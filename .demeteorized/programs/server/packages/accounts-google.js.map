{"version":3,"file":"/packages/accounts-google.js","sources":["accounts-google/google.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,yC;;AAEA,sB;AACA,wD;AACA,yC;AACA,sD;AACA,yB;AACA,qB;AACA,K;;AAEA,sG;AACA,yE;AACA,I;AACA,Q;AACA,iC;AACA,2B;AACA,sE;AACA,mC;AACA,gF;AACA,uD;AACA,mG;AACA,qE;;AAEA,yB;AACA,+D;AACA,qC;AACA,qE;AACA,oE;AACA,K;AACA,C","sourcesContent":["Accounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  Meteor.loginWithGoogle = function(options, callback) {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: _.map(\n      // publish access token since it can be used from the client (if\n      // transmitted over ssl or on\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n      // refresh token probably shouldn't be sent down.\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']), // don't publish refresh token\n      function (subfield) { return 'services.google.' + subfield; }),\n\n    forOtherUsers: _.map(\n      // even with autopublish, no legitimate web app should be\n      // publishing all users' emails\n      _.without(Google.whitelistedFields, 'email', 'verified_email'),\n      function (subfield) { return 'services.google.' + subfield; })\n  });\n}\n"]}