{"version":3,"file":"/packages/service-configuration.js","sources":["service-configuration/service_configuration_common.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,kD;AACA,4B;AACA,C;;;AAGA,iE;AACA,gB;AACA,4D;AACA,4E;AACA,wE;AACA,uE;AACA,mE;AACA,qE;AACA,Q;;;AAGA,oE;AACA,0D;AACA,6B;AACA,E;AACA,yD;AACA,qF","sourcesContent":["if (typeof ServiceConfiguration === 'undefined') {\n  ServiceConfiguration = {};\n}\n\n\n// Table containing documents with configuration options for each\n// login service\nServiceConfiguration.configurations = new Meteor.Collection(\n  \"meteor_accounts_loginServiceConfiguration\", {_preventAutopublish: true});\n// Leave this collection open in insecure mode. In theory, someone could\n// hijack your oauth connect requests to a different endpoint or appId,\n// but you did ask for 'insecure'. The advantage is that it is much\n// easier to write a configuration wizard that works only in insecure\n// mode.\n\n\n// Thrown when trying to use a login service which is not configured\nServiceConfiguration.ConfigError = function(description) {\n  this.message = description;\n};\nServiceConfiguration.ConfigError.prototype = new Error();\nServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';\n"]}