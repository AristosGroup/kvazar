{"version":3,"file":"/packages/github.js","sources":["github/github_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,Y;;AAEA,0D;;AAEA,0C;AACA,0C;;AAEA,U;AACA,kB;AACA,sB;AACA,+B;AACA,4B;AACA,8B;AACA,M;AACA,6C;AACA,I;AACA,G;;AAEA,sD;AACA,yB;AACA,mB;AACA,oC;;AAEA,uC;AACA,gF;AACA,c;AACA,yE;;AAEA,e;AACA,O;AACA,yB;AACA,sD;AACA,kB;AACA,qC;AACA,iC;AACA,U;AACA,iB;AACA,2B;AACA,qC;AACA,uC;AACA,kE;AACA,4B;AACA,S;AACA,S;AACA,iB;AACA,+F;AACA,6C;AACA,G;AACA,8F;AACA,8F;AACA,U;AACA,sC;AACA,G;AACA,E;;AAEA,0C;AACA,O;AACA,oB;AACA,sC;AACA,kG;AACA,2C;AACA,c;AACA,iB;AACA,qF;AACA,6C;AACA,G;AACA,E;;;AAGA,uD;AACA,mD;AACA,E","sourcesContent":["Github = {};\n\nOauth.registerService('github', 2, null, function(query) {\n\n  var accessToken = getAccessToken(query);\n  var identity = getIdentity(accessToken);\n\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: accessToken,\n      email: identity.email,\n      username: identity.login\n    },\n    options: {profile: {name: identity.name}}\n  };\n});\n\n// http://developer.github.com/v3/#user-agent-required\nvar userAgent = \"Meteor\";\nif (Meteor.release)\n  userAgent += \"/\" + Meteor.release;\n\nvar getAccessToken = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://github.com/login/oauth/access_token\", {\n        headers: {\n          Accept: 'application/json',\n          \"User-Agent\": userAgent\n        },\n        params: {\n          code: query.code,\n          client_id: config.clientId,\n          client_secret: config.secret,\n          redirect_uri: Meteor.absoluteUrl(\"_oauth/github?close\"),\n          state: query.state\n        }\n      });\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Github. \" + err.message),\n                   {response: err.response});\n  }\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with GitHub. \" + response.data.error);\n  } else {\n    return response.data.access_token;\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://api.github.com/user\", {\n        headers: {\"User-Agent\": userAgent}, // http://developer.github.com/v3/#user-agent-required\n        params: {access_token: accessToken}\n      }).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Github. \" + err.message),\n                   {response: err.response});\n  }\n};\n\n\nGithub.retrieveCredential = function(credentialToken) {\n  return Oauth.retrieveCredential(credentialToken);\n};\n"]}