{"version":3,"file":"/packages/google.js","sources":["google/google_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,Y;;AAEA,uE;AACA,kF;AACA,6E;;;AAGA,0D;;AAEA,kC;AACA,yC;AACA,0C;;AAEA,qB;AACA,6B;AACA,wD;AACA,I;;AAEA,0D;AACA,gC;;AAEA,kE;AACA,qE;AACA,oB;AACA,4B;AACA,qD;;AAEA,U;AACA,6B;AACA,6C;AACA,I;AACA,G;;AAEA,gC;AACA,gB;AACA,4C;AACA,6D;AACA,kC;AACA,gF;AACA,c;AACA,yE;;AAEA,e;AACA,O;AACA,yB;AACA,8D;AACA,yB;AACA,mC;AACA,qC;AACA,gE;AACA,wC;AACA,U;AACA,iB;AACA,+F;AACA,6C;AACA,G;;AAEA,8F;AACA,8F;AACA,U;AACA,Y;AACA,8C;AACA,gD;AACA,yC;AACA,M;AACA,G;AACA,E;;AAEA,0C;AACA,O;AACA,oB;AACA,sD;AACA,kD;AACA,iB;AACA,qF;AACA,6C;AACA,G;AACA,E;;;AAGA,uD;AACA,mD;AACA,E","sourcesContent":["Google = {};\n\n// https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\nGoogle.whitelistedFields = ['id', 'email', 'verified_email', 'name', 'given_name',\n                   'family_name', 'picture', 'locale', 'timezone', 'gender'];\n\n\nOauth.registerService('google', 2, null, function(query) {\n\n  var response = getTokens(query);\n  var accessToken = response.accessToken;\n  var identity = getIdentity(accessToken);\n\n  var serviceData = {\n    accessToken: accessToken,\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n  var fields = _.pick(identity, Google.whitelistedFields);\n  _.extend(serviceData, fields);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (response.refreshToken)\n    serviceData.refreshToken = response.refreshToken;\n\n  return {\n    serviceData: serviceData,\n    options: {profile: {name: identity.name}}\n  };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request\nvar getTokens = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var response;\n  try {\n    response = HTTP.post(\n      \"https://accounts.google.com/o/oauth2/token\", {params: {\n        code: query.code,\n        client_id: config.clientId,\n        client_secret: config.secret,\n        redirect_uri: Meteor.absoluteUrl(\"_oauth/google?close\"),\n        grant_type: 'authorization_code'\n      }});\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to complete OAuth handshake with Google. \" + err.message),\n                   {response: err.response});\n  }\n\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(\"Failed to complete OAuth handshake with Google. \" + response.data.error);\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in\n    };\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\n      \"https://www.googleapis.com/oauth2/v1/userinfo\",\n      {params: {access_token: accessToken}}).data;\n  } catch (err) {\n    throw _.extend(new Error(\"Failed to fetch identity from Google. \" + err.message),\n                   {response: err.response});\n  }\n};\n\n\nGoogle.retrieveCredential = function(credentialToken) {\n  return Oauth.retrieveCredential(credentialToken);\n};\n"]}