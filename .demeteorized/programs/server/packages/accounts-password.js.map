{"version":3,"file":"/packages/accounts-password.js","sources":["accounts-password/email_templates.js","accounts-password/password_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2B;AACA,gD;AACA,gF;;AAEA,kB;AACA,6B;AACA,iF;AACA,M;AACA,+B;AACA,0D;AACA,4D;AACA,4B;AACA,c;AACA,kE;AACA,c;AACA,oB;AACA,c;AACA,sB;AACA,K;AACA,I;AACA,gB;AACA,6B;AACA,kF;AACA,M;AACA,+B;AACA,0D;AACA,4D;AACA,4B;AACA,c;AACA,wE;AACA,c;AACA,oB;AACA,c;AACA,sB;AACA,K;AACA,I;AACA,kB;AACA,6B;AACA,0F;AACA,M;AACA,+B;AACA,0D;AACA,4D;AACA,4B;AACA,c;AACA,sE;AACA,c;AACA,oB;AACA,c;AACA,sB;AACA,K;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACpDA,G;AACA,S;AACA,G;;AAEA,8D;AACA,iE;AACA,+D;;AAEA,6C;AACA,c;AACA,0B;AACA,yB;AACA,qC;AACA,sB;AACA,0C;AACA,oE;AACA,E;;AAEA,8C;AACA,+C;AACA,mB;AACA,sB;AACA,G;;AAEA,sD;AACA,e;AACA,uC;AACA,6C;AACA,yC;AACA,K;AACA,gC;AACA,uE;AACA,c;AACA,G;;AAEA,iE;AACA,qE;AACA,oE;AACA,oE;AACA,oC;AACA,E;AACA,uC;AACA,6E;AACA,kE;AACA,iC;AACA,+B;AACA,2B;AACA,8D;AACA,2D;AACA,kB;AACA,6B;AACA,a;AACA,K;AACA,qD;;AAEA,4C;AACA,Y;AACA,kD;;AAEA,kD;AACA,kC;AACA,4D;;AAEA,4C;AACA,qC;AACA,qD;;AAEA,8C;AACA,8D;AACA,kD;AACA,I;AACA,mB;AACA,I;;AAEA,sE;AACA,yB;AACA,kD;AACA,mB;AACA,qC;AACA,kC;;AAEA,qE;AACA,a;AACA,uD;AACA,6F;AACA,oD;AACA,sD;AACA,kC;AACA,uF;;AAEA,iC;AACA,0C;AACA,4D;AACA,Y;AACA,kD;AACA,gE;AACA,sB;AACA,yE;;AAEA,U;AACA,mC;AACA,oE;AACA,e;AACA,yB;AACA,I;AACA,G;;AAEA,4C;AACA,E;AACA,sE;AACA,oE;AACA,iD;AACA,E;AACA,qE;AACA,yD;AACA,kD;AACA,yC;AACA,qC;;AAEA,+D;;AAEA,qD;AACA,4C;AACA,Y;AACA,kD;;AAEA,kD;AACA,kC;AACA,4D;;AAEA,mE;AACA,mD;AACA,4C;AACA,4D;AACA,uD;;AAEA,iD;AACA,sD;;AAEA,gE;AACA,sB;AACA,2E;;AAEA,U;AACA,mC;AACA,oE;AACA,gB;AACA,I;AACA,G;;;AAGA,G;AACA,Y;AACA,G;;AAEA,8D;AACA,+D;AACA,oD;AACA,mB;AACA,qD;AACA,kB;AACA,6E;AACA,+E;AACA,gB;AACA,c;AACA,2C;AACA,oC;AACA,K;;AAEA,gF;AACA,gD;AACA,sD;AACA,wC;AACA,0B;AACA,sD;AACA,kC;AACA,0E;;AAEA,6B;AACA,sC;AACA,sD;AACA,G;AACA,gB;AACA,oD;;AAEA,2E;AACA,qE;AACA,yC;AACA,mE;;AAEA,oC;AACA,iB;AACA,+B;AACA,a;AACA,I;;;AAGA,mC;AACA,uD;AACA,0C;AACA,Y;AACA,kD;AACA,sD;;AAEA,wC;AACA,mD;AACA,E;;;AAGA,G;AACA,uB;AACA,G;;AAEA,qE;AACA,kC;AACA,oD;AACA,kC;;AAEA,qE;AACA,Y;AACA,kD;;AAEA,2D;AACA,I;;AAEA,sE;AACA,mD;AACA,E;AACA,4D;AACA,oE;AACA,0C;AACA,Y;AACA,uC;AACA,wD;AACA,8C;AACA,mC;AACA,oC;AACA,0E;AACA,+C;;AAEA,0B;AACA,wB;AACA,sC;AACA,gC;AACA,mB;AACA,mB;AACA,gB;AACA,K;AACA,M;;AAEA,4D;AACA,c;AACA,c;AACA,uC;AACA,iE;AACA,+E;AACA,E;;AAEA,6E;AACA,6E;AACA,0E;AACA,2E;AACA,E;AACA,sE;AACA,iC;AACA,E;AACA,yD;AACA,yE;;AAEA,gE;AACA,0C;AACA,Y;AACA,uC;AACA,wD;AACA,8C;AACA,mC;AACA,oC;AACA,0E;AACA,+C;;;AAGA,0B;AACA,wB;AACA,sC;AACA,gC;AACA,mB;AACA,mB;AACA,gB;AACA,K;AACA,M;;AAEA,4D;AACA,c;AACA,c;AACA,uC;AACA,iE;AACA,4E;AACA,K;AACA,E;;;AAGA,wE;AACA,uC;AACA,8D;AACA,uB;AACA,wC;;AAEA,mC;AACA,gD;AACA,Y;AACA,iD;AACA,iD;AACA,+D;AACA,mE;;AAEA,gE;;AAEA,wE;AACA,mE;AACA,uE;AACA,8C;AACA,6D;AACA,oD;;AAEA,O;AACA,iC;AACA,sD;AACA,iE;AACA,uD;AACA,4D;AACA,4E;AACA,mE;AACA,kD;AACA,gE;AACA,wC;AACA,4C;AACA,O;AACA,iB;AACA,iD;AACA,0D;AACA,c;AACA,G;;AAEA,uE;AACA,2B;;AAEA,U;AACA,mC;AACA,oE;AACA,gB;AACA,I;AACA,I;;AAEA,G;AACA,sB;AACA,G;;;AAGA,iE;AACA,sB;AACA,E;AACA,6D;AACA,iE;AACA,mE;AACA,kB;;AAEA,sE;AACA,0C;AACA,Y;AACA,uC;AACA,uE;AACA,iB;AACA,yC;AACA,6D;AACA,oC;AACA,G;AACA,sC;AACA,8E;AACA,uD;;;AAGA,qB;AACA,uB;AACA,qB;AACA,sB;AACA,sB;AACA,kB;AACA,iE;;AAEA,oE;AACA,c;AACA,gB;AACA,uC;AACA,+D;AACA,wE;AACA,K;AACA,E;;AAEA,qE;AACA,mB;AACA,+C;AACA,uB;;AAEA,kC;AACA,wD;AACA,Y;AACA,6D;;AAEA,kE;AACA,yC;AACA,qD;AACA,8B;AACA,mB;AACA,6D;;AAEA,uD;AACA,4C;AACA,K;AACA,oB;AACA,4E;;AAEA,4C;AACA,gE;;AAEA,wE;AACA,qE;AACA,e;AACA,qF;AACA,kE;AACA,sB;AACA,mB;AACA,4C;AACA,uC;AACA,kE;AACA,iE;;AAEA,2B;AACA,uE;AACA,U;AACA,mC;AACA,oE;AACA,gB;AACA,I;AACA,I;;;;AAIA,G;AACA,kB;AACA,G;;AAEA,qE;AACA,qE;AACA,kC;AACA,E;AACA,2E;AACA,0B;AACA,qC;AACA,wE;AACA,a;AACA,wC;AACA,gC;AACA,qC;AACA,kC;AACA,qC;AACA,0C;AACA,M;;AAEA,kC;AACA,4B;AACA,0B;AACA,mE;;AAEA,iE;AACA,kE;AACA,2B;AACA,yB;AACA,oB;AACA,iF;AACA,yD;AACA,G;;AAEA,4B;AACA,kB;AACA,yE;AACA,e;AACA,6B;AACA,Y;AACA,sD;;AAEA,+C;AACA,E;;AAEA,yD;AACA,gD;AACA,2C;AACA,yB;AACA,oC;AACA,oD;AACA,qD;;AAEA,+C;AACA,mC;AACA,0E;AACA,+D;AACA,iB;AACA,4D;;AAEA,kE;AACA,+D;AACA,kB;AACA,+D;AACA,6D;;AAEA,sD;AACA,4B;AACA,4D;AACA,gB;AACA,I;;AAEA,sC;AACA,E;AACA,mE;AACA,kB;AACA,E;AACA,uD;AACA,E;AACA,8E;AACA,4E;AACA,8E;AACA,gD;AACA,E;AACA,oD;AACA,6B;AACA,qC;;AAEA,oC;AACA,iB;AACA,0F;AACA,G;;AAEA,sC;;AAEA,gB;AACA,E;;AAEA,G;AACA,sC;AACA,G;AACA,0D;AACA,kD;AACA,0D;AACA,kD","sourcesContent":["Accounts.emailTemplates = {\n  from: \"Meteor Accounts <no-reply@meteor.com>\",\n  siteName: Meteor.absoluteUrl().replace(/^https?:\\/\\//, '').replace(/\\/$/, ''),\n\n  resetPassword: {\n    subject: function(user) {\n      return \"How to reset your password on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return greeting + \"\\n\"\n        + \"\\n\"\n        + \"To reset your password, simply click the link below.\\n\"\n        + \"\\n\"\n        + url + \"\\n\"\n        + \"\\n\"\n        + \"Thanks.\\n\";\n    }\n  },\n  verifyEmail: {\n    subject: function(user) {\n      return \"How to verify email address on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return greeting + \"\\n\"\n        + \"\\n\"\n        + \"To verify your account email, simply click the link below.\\n\"\n        + \"\\n\"\n        + url + \"\\n\"\n        + \"\\n\"\n        + \"Thanks.\\n\";\n    }\n  },\n  enrollAccount: {\n    subject: function(user) {\n      return \"An account has been created for you on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return greeting + \"\\n\"\n        + \"\\n\"\n        + \"To start using the service, simply click the link below.\\n\"\n        + \"\\n\"\n        + url + \"\\n\"\n        + \"\\n\"\n        + \"Thanks.\\n\";\n    }\n  }\n};\n","///\n/// LOGIN\n///\n\n// Users can specify various keys to identify themselves with.\n// @param user {Object} with one of `id`, `username`, or `email`.\n// @returns A selector to pass to mongo to get the user record.\n\nvar selectorFromUserQuery = function (user) {\n  if (user.id)\n    return {_id: user.id};\n  else if (user.username)\n    return {username: user.username};\n  else if (user.email)\n    return {\"emails.address\": user.email};\n  throw new Error(\"shouldn't happen (validation missed something)\");\n};\n\n// XXX maybe this belongs in the check package\nvar NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\n\nvar userQueryValidator = Match.Where(function (user) {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (_.keys(user).length !== 1)\n    throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\n\n// Step 1 of SRP password exchange. This puts an `M` value in the\n// session data for this connection. If a client later sends the same\n// `M` value to a method on this connection, it proves they know the\n// password for this user. We can then prove we know the password to\n// them by sending our `HAMK` value.\n//\n// @param request {Object} with fields:\n//   user: either {username: (username)}, {email: (email)}, or {id: (userId)}\n//   A: hex encoded int. the client's public key for this exchange\n// @returns {Object} with fields:\n//   identity: random string ID\n//   salt: random string ID\n//   B: hex encoded int. server's public key for this exchange\nMeteor.methods({beginPasswordExchange: function (request) {\n  check(request, {\n    user: userQueryValidator,\n    A: String\n  });\n  var selector = selectorFromUserQuery(request.user);\n\n  var user = Meteor.users.findOne(selector);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  if (!user.services || !user.services.password ||\n      !user.services.password.srp)\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  var verifier = user.services.password.srp;\n  var srp = new SRP.Server(verifier);\n  var challenge = srp.issueChallenge({A: request.A});\n\n  // Save results so we can verify them later.\n  Accounts._setAccountData(this.connection.id, 'srpChallenge',\n    { userId: user._id, M: srp.M, HAMK: srp.HAMK }\n  );\n  return challenge;\n}});\n\n// Handler to login with password via SRP. Checks the `M` value set by\n// beginPasswordExchange.\nAccounts.registerLoginHandler(function (options) {\n  if (!options.srp)\n    return undefined; // don't handle\n  check(options.srp, {M: String});\n\n  // we're always called from within a 'login' method, so this should\n  // be safe.\n  var currentInvocation = DDP._CurrentInvocation.get();\n  var serialized = Accounts._getAccountData(currentInvocation.connection.id, 'srpChallenge');\n  if (!serialized || serialized.M !== options.srp.M)\n    throw new Meteor.Error(403, \"Incorrect password\");\n  // Only can use challenges once.\n  Accounts._setAccountData(currentInvocation.connection.id, 'srpChallenge', undefined);\n\n  var userId = serialized.userId;\n  var user = Meteor.users.findOne(userId);\n  // Was the user deleted since the start of this challenge?\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n  var stampedLoginToken = Accounts._generateStampedLoginToken();\n  Meteor.users.update(\n    userId, {$push: {'services.resume.loginTokens': stampedLoginToken}});\n\n  return {\n    token: stampedLoginToken.token,\n    tokenExpires: Accounts._tokenExpiration(stampedLoginToken.when),\n    id: userId,\n    HAMK: serialized.HAMK\n  };\n});\n\n// Handler to login with plaintext password.\n//\n// The meteor client doesn't use this, it is for other DDP clients who\n// haven't implemented SRP. Since it sends the password in plaintext\n// over the wire, it should only be run over SSL!\n//\n// Also, it might be nice if servers could turn this off. Or maybe it\n// should be opt-in, not opt-out? Accounts.config option?\nAccounts.registerLoginHandler(function (options) {\n  if (!options.password || !options.user)\n    return undefined; // don't handle\n\n  check(options, {user: userQueryValidator, password: String});\n\n  var selector = selectorFromUserQuery(options.user);\n  var user = Meteor.users.findOne(selector);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  if (!user.services || !user.services.password ||\n      !user.services.password.srp)\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  // Just check the verifier output when the same identity and salt\n  // are passed. Don't bother with a full exchange.\n  var verifier = user.services.password.srp;\n  var newVerifier = SRP.generateVerifier(options.password, {\n    identity: verifier.identity, salt: verifier.salt});\n\n  if (verifier.verifier !== newVerifier.verifier)\n    throw new Meteor.Error(403, \"Incorrect password\");\n\n  var stampedLoginToken = Accounts._generateStampedLoginToken();\n  Meteor.users.update(\n    user._id, {$push: {'services.resume.loginTokens': stampedLoginToken}});\n\n  return {\n    token: stampedLoginToken.token,\n    tokenExpires: Accounts._tokenExpiration(stampedLoginToken.when),\n    id: user._id\n  };\n});\n\n\n///\n/// CHANGING\n///\n\n// Let the user change their own password if they know the old\n// password. Checks the `M` value set by beginPasswordExchange.\nMeteor.methods({changePassword: function (options) {\n  if (!this.userId)\n    throw new Meteor.Error(401, \"Must be logged in\");\n  check(options, {\n    // If options.M is set, it means we went through a challenge with the old\n    // password. For now, we don't allow changePassword without knowing the old\n    // password.\n    M: String,\n    srp: Match.Optional(SRP.matchVerifier),\n    password: Match.Optional(String)\n  });\n\n  var serialized = Accounts._getAccountData(this.connection.id, 'srpChallenge');\n  if (!serialized || serialized.M !== options.M)\n    throw new Meteor.Error(403, \"Incorrect password\");\n  if (serialized.userId !== this.userId)\n    // No monkey business!\n    throw new Meteor.Error(403, \"Incorrect password\");\n  // Only can use challenges once.\n  Accounts._setAccountData(this.connection.id, 'srpChallenge', undefined);\n\n  var verifier = options.srp;\n  if (!verifier && options.password) {\n    verifier = SRP.generateVerifier(options.password);\n  }\n  if (!verifier)\n    throw new Meteor.Error(400, \"Invalid verifier\");\n\n  // XXX this should invalidate all login tokens other than the current one\n  // (or it should assign a new login token, replacing existing ones)\n  Meteor.users.update({_id: this.userId},\n                      {$set: {'services.password.srp': verifier}});\n\n  var ret = {passwordChanged: true};\n  if (serialized)\n    ret.HAMK = serialized.HAMK;\n  return ret;\n}});\n\n\n// Force change the users password.\nAccounts.setPassword = function (userId, newPassword) {\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n  var newVerifier = SRP.generateVerifier(newPassword);\n\n  Meteor.users.update({_id: user._id}, {\n    $set: {'services.password.srp': newVerifier}});\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: function (options) {\n  check(options, {email: String});\n\n  var user = Meteor.users.findOne({\"emails.address\": options.email});\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Accounts.sendResetPasswordEmail(user._id, options.email);\n}});\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n//\nAccounts.sendResetPasswordEmail = function (userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0])\n    email = user.emails[0].address;\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email))\n    throw new Error(\"No such email for user.\");\n\n  var token = Random.id();\n  var when = new Date();\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": {\n      token: token,\n      email: email,\n      when: when\n    }\n  }});\n\n  var resetPasswordUrl = Accounts.urls.resetPassword(token);\n  Email.send({\n    to: email,\n    from: Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.resetPassword.subject(user),\n    text: Accounts.emailTemplates.resetPassword.text(user, resetPasswordUrl)});\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n//\nAccounts.sendEnrollmentEmail = function (userId, email) {\n  // XXX refactor! This is basically identical to sendResetPasswordEmail.\n\n  // Make sure the user exists, and email is in their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0])\n    email = user.emails[0].address;\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email))\n    throw new Error(\"No such email for user.\");\n\n\n  var token = Random.id();\n  var when = new Date();\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": {\n      token: token,\n      email: email,\n      when: when\n    }\n  }});\n\n  var enrollAccountUrl = Accounts.urls.enrollAccount(token);\n  Email.send({\n    to: email,\n    from: Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.enrollAccount.subject(user),\n    text: Accounts.emailTemplates.enrollAccount.text(user, enrollAccountUrl)\n  });\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: function (token, newVerifier) {\n  check(token, String);\n  check(newVerifier, SRP.matchVerifier);\n\n  var user = Meteor.users.findOne({\n    \"services.password.reset.token\": \"\"+token});\n  if (!user)\n    throw new Meteor.Error(403, \"Token expired\");\n  var email = user.services.password.reset.email;\n  if (!_.include(_.pluck(user.emails || [], 'address'), email))\n    throw new Meteor.Error(403, \"Token has invalid email address\");\n\n  var stampedLoginToken = Accounts._generateStampedLoginToken();\n\n  // NOTE: We're about to invalidate tokens on the user, who we might be\n  // logged in as. Make sure to avoid logging ourselves out if this\n  // happens. But also make sure not to leave the connection in a state\n  // of having a bad token set if things fail.\n  var oldToken = Accounts._getLoginToken(this.connection.id);\n  Accounts._setLoginToken(this.connection.id, null);\n\n  try {\n    // Update the user record by:\n    // - Changing the password verifier to the new one\n    // - Replacing all valid login tokens with new ones (changing\n    //   password should invalidate existing sessions).\n    // - Forgetting about the reset token that was just used\n    // - Verifying their email, since they got the password reset via email.\n    Meteor.users.update({_id: user._id, 'emails.address': email}, {\n      $set: {'services.password.srp': newVerifier,\n             'services.resume.loginTokens': [stampedLoginToken],\n             'emails.$.verified': true},\n      $unset: {'services.password.reset': 1}\n    });\n  } catch (err) {\n    // update failed somehow. reset to old token.\n    Accounts._setLoginToken(this.connection.id, oldToken);\n    throw err;\n  }\n\n  Accounts._setLoginToken(this.connection.id, stampedLoginToken.token);\n  this.setUserId(user._id);\n\n  return {\n    token: stampedLoginToken.token,\n    tokenExpires: Accounts._tokenExpiration(stampedLoginToken.when),\n    id: user._id\n  };\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n//\nAccounts.sendVerificationEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first unverified address if we weren't passed an address.\n  if (!address) {\n    var email = _.find(user.emails || [],\n                       function (e) { return !e.verified; });\n    address = (email || {}).address;\n  }\n  // make sure we have a valid address\n  if (!address || !_.contains(_.pluck(user.emails || [], 'address'), address))\n    throw new Error(\"No such email address for user.\");\n\n\n  var tokenRecord = {\n    token: Random.id(),\n    address: address,\n    when: new Date()};\n  Meteor.users.update(\n    {_id: userId},\n    {$push: {'services.email.verificationTokens': tokenRecord}});\n\n  var verifyEmailUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n  Email.send({\n    to: address,\n    from: Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.verifyEmail.subject(user),\n    text: Accounts.emailTemplates.verifyEmail.text(user, verifyEmailUrl)\n  });\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: function (token) {\n  check(token, String);\n\n  var user = Meteor.users.findOne(\n    {'services.email.verificationTokens.token': token});\n  if (!user)\n    throw new Meteor.Error(403, \"Verify email link expired\");\n\n  var tokenRecord = _.find(user.services.email.verificationTokens,\n                           function (t) {\n                             return t.token == token;\n                           });\n  if (!tokenRecord)\n    throw new Meteor.Error(403, \"Verify email link expired\");\n\n  var emailsRecord = _.find(user.emails, function (e) {\n    return e.address == tokenRecord.address;\n  });\n  if (!emailsRecord)\n    throw new Meteor.Error(403, \"Verify email link is for unknown address\");\n\n  // Log the user in with a new login token.\n  var stampedLoginToken = Accounts._generateStampedLoginToken();\n\n  // By including the address in the query, we can use 'emails.$' in the\n  // modifier to get a reference to the specific object in the emails\n  // array. See\n  // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n  // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n  Meteor.users.update(\n    {_id: user._id,\n     'emails.address': tokenRecord.address},\n    {$set: {'emails.$.verified': true},\n     $pull: {'services.email.verificationTokens': {token: token}},\n     $push: {'services.resume.loginTokens': stampedLoginToken}});\n\n  this.setUserId(user._id);\n  Accounts._setLoginToken(this.connection.id, stampedLoginToken.token);\n  return {\n    token: stampedLoginToken.token,\n    tokenExpires: Accounts._tokenExpiration(stampedLoginToken.when),\n    id: user._id\n  };\n}});\n\n\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns an object with id: userId, and (if options.generateLoginToken is\n// set) token: loginToken.\nvar createUser = function (options) {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    generateLoginToken: Boolean,\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(String),\n    srp: Match.Optional(SRP.matchVerifier)\n  }));\n\n  var username = options.username;\n  var email = options.email;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  // Raw password. The meteor client doesn't send this, but a DDP\n  // client that didn't implement SRP could send this. This should\n  // only be done over SSL.\n  if (options.password) {\n    if (options.srp)\n      throw new Meteor.Error(400, \"Don't pass both password and srp in options\");\n    options.srp = SRP.generateVerifier(options.password);\n  }\n\n  var user = {services: {}};\n  if (options.srp)\n    user.services.password = {srp: options.srp}; // XXX validate verifier\n  if (username)\n    user.username = username;\n  if (email)\n    user.emails = [{address: email, verified: false}];\n\n  return Accounts.insertUserDoc(options, user);\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: function (options) {\n  // createUser() above does more checking.\n  check(options, Object);\n  options.generateLoginToken = true;\n  if (Accounts._options.forbidClientAccountCreation)\n    throw new Meteor.Error(403, \"Signups forbidden\");\n\n  // Create user. result contains id and token.\n  var result = createUser(options);\n  // safety belt. createUser is supposed to throw on error. send 500 error\n  // instead of sending a verification email with empty userid.\n  if (!result.id)\n    throw new Error(\"createUser failed to insert new user\");\n\n  // If `Accounts._options.sendVerificationEmail` is set, register\n  // a token to verify the user's primary email, and send it to\n  // that address.\n  if (options.email && Accounts._options.sendVerificationEmail)\n    Accounts.sendVerificationEmail(result.id, options.email);\n\n  // client gets logged in as the new user afterwards.\n  this.setUserId(result.id);\n  Accounts._setLoginToken(this.connection.id, result.token);\n  return result;\n}});\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options);\n  options.generateLoginToken = false;\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  var userId = createUser(options).id;\n\n  return userId;\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users._ensureIndex('emails.validationTokens.token',\n                          {unique: 1, sparse: 1});\nMeteor.users._ensureIndex('services.password.reset.token',\n                          {unique: 1, sparse: 1});\n"]}