{"version":3,"file":"/packages/crypto-base.js","sources":["crypto-base/crypto.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,E;AACA,e;AACA,2B;AACA,gD;AACA,wC;AACA,E;AACA,G;AACA,4B;AACA,G;AACA,oD;AACA,O;AACA,0B;AACA,O;AACA,e;;AAEA,O;AACA,yB;AACA,O;AACA,2B;;AAEA,O;AACA,8C;AACA,O;AACA,0C;AACA,uB;;AAEA,gB;AACA,e;AACA,mE;AACA,c;AACA,gF;AACA,c;AACA,+C;AACA,c;AACA,sB;AACA,c;AACA,uB;AACA,c;AACA,0D;AACA,sC;AACA,c;AACA,4C;AACA,wB;AACA,sB;AACA,e;AACA,0C;AACA,wB;AACA,mC;AACA,sC;;AAEA,0B;AACA,gC;AACA,6C;AACA,iB;;AAEA,6C;AACA,sD;AACA,gD;AACA,mE;AACA,sB;AACA,iB;;AAEA,gE;AACA,iD;;AAEA,sC;AACA,sC;;AAEA,+B;AACA,c;;AAEA,e;AACA,4D;AACA,8D;AACA,c;AACA,+C;AACA,c;AACA,sB;AACA,c;AACA,uB;AACA,c;AACA,kD;AACA,e;AACA,iC;AACA,6C;AACA,yD;;AAEA,gC;AACA,c;;AAEA,e;AACA,kD;AACA,oF;AACA,c;AACA,uB;AACA,c;AACA,0D;AACA,0C;AACA,iC;AACA,wB;AACA,sB;AACA,e;AACA,+B;AACA,c;;AAEA,e;AACA,kD;AACA,c;AACA,mE;AACA,c;AACA,uB;AACA,c;AACA,iC;AACA,qC;AACA,sB;AACA,e;AACA,0C;AACA,sD;AACA,kE;AACA,sE;AACA,qB;AACA,iB;;AAEA,8D;AACA,4D;AACA,wD;AACA,iB;AACA,c;;AAEA,e;AACA,6C;AACA,c;AACA,0C;AACA,c;AACA,uB;AACA,c;AACA,gD;AACA,e;AACA,gC;AACA,wD;AACA,a;AACA,U;AACA,S;;AAEA,O;AACA,gC;AACA,M;AACA,yD;AACA,sF;AACA,O;AACA,mD;AACA,W;AACA,kD;AACA,U;AACA,oE;AACA,4F;AACA,U;AACA,mB;AACA,U;AACA,+D;AACA,uF;AACA,0F;AACA,W;AACA,0C;AACA,6C;;AAEA,wC;AACA,yC;AACA,oB;AACA,iD;AACA,a;AACA,U;;AAEA,W;AACA,gD;AACA,U;AACA,sG;AACA,U;AACA,uD;AACA,U;AACA,mB;AACA,U;AACA,2C;AACA,iD;AACA,kE;AACA,W;AACA,sC;AACA,oD;AACA,U;;AAEA,W;AACA,wD;AACA,U;AACA,iE;AACA,U;AACA,+C;AACA,U;AACA,mB;AACA,U;AACA,6C;AACA,W;AACA,sC;AACA,wB;AACA,uC;AACA,4C;AACA,6C;AACA,kD;;AAEA,gC;AACA,yB;;AAEA,qB;AACA,mC;AACA,0C;AACA,wD;AACA,sF;AACA,2G;AACA,iB;AACA,mD;AACA,0C;AACA,2D;AACA,6E;AACA,iB;AACA,oB;AACA,yC;AACA,2D;AACA,a;AACA,0C;;AAEA,wB;AACA,wB;AACA,U;;AAEA,W;AACA,sC;AACA,U;AACA,mB;AACA,U;AACA,iC;AACA,W;AACA,4B;AACA,wB;AACA,mC;AACA,yC;;AAEA,oB;AACA,6E;AACA,mD;AACA,U;;AAEA,W;AACA,6C;AACA,U;AACA,yC;AACA,U;AACA,mB;AACA,U;AACA,6C;AACA,W;AACA,4B;AACA,8C;AACA,8C;;AAEA,yB;AACA,U;;AAEA,W;AACA,yD;AACA,U;AACA,yE;AACA,U;AACA,qD;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,iE;AACA,W;AACA,mC;AACA,2B;AACA,iD;AACA,8D;AACA,a;;AAEA,qD;AACA,S;AACA,O;;AAEA,O;AACA,yB;AACA,O;AACA,2B;;AAEA,O;AACA,6B;AACA,O;AACA,2B;AACA,W;AACA,iD;AACA,U;AACA,uD;AACA,U;AACA,2C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,qE;AACA,W;AACA,yC;AACA,wB;AACA,wC;AACA,8C;;AAEA,sB;AACA,8B;AACA,gD;AACA,0E;AACA,yD;AACA,0D;AACA,a;;AAEA,qC;AACA,U;;AAEA,W;AACA,iD;AACA,U;AACA,iD;AACA,U;AACA,8C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,iE;AACA,W;AACA,kC;AACA,uB;AACA,6C;;AAEA,sB;AACA,2B;AACA,uD;AACA,0F;AACA,a;;AAEA,+D;AACA,S;AACA,M;;AAEA,O;AACA,gC;AACA,O;AACA,iC;AACA,W;AACA,oD;AACA,U;AACA,uD;AACA,U;AACA,8C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,2E;AACA,W;AACA,yC;AACA,wB;AACA,wC;AACA,8C;;AAEA,sB;AACA,iC;AACA,gD;AACA,0E;AACA,4D;AACA,a;;AAEA,wC;AACA,U;;AAEA,W;AACA,oD;AACA,U;AACA,uD;AACA,U;AACA,8C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,uE;AACA,W;AACA,qC;AACA,uB;AACA,mD;;AAEA,sB;AACA,2B;AACA,uD;AACA,yF;AACA,a;;AAEA,8D;AACA,S;AACA,M;;AAEA,O;AACA,+B;AACA,O;AACA,6B;AACA,W;AACA,mD;AACA,U;AACA,uD;AACA,U;AACA,6C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,uE;AACA,W;AACA,yC;AACA,iB;AACA,+E;AACA,yB;AACA,wD;AACA,a;AACA,U;;AAEA,W;AACA,mD;AACA,U;AACA,oD;AACA,U;AACA,8C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,mE;AACA,W;AACA,mC;AACA,uE;AACA,S;AACA,M;;AAEA,O;AACA,kD;AACA,M;AACA,wE;AACA,M;AACA,uH;AACA,O;AACA,6E;AACA,W;AACA,0E;AACA,U;AACA,mB;AACA,U;AACA,8C;AACA,W;AACA,4B;AACA,6B;AACA,8C;AACA,iC;AACA,U;;AAEA,W;AACA,0D;AACA,U;AACA,+G;AACA,U;AACA,mB;AACA,U;AACA,sD;AACA,yD;AACA,W;AACA,kC;AACA,yE;AACA,0C;AACA,wC;AACA,a;;AAEA,qB;AACA,oC;AACA,8C;AACA,U;;AAEA,W;AACA,2C;AACA,U;AACA,wG;AACA,U;AACA,8F;AACA,U;AACA,kD;AACA,U;AACA,mB;AACA,U;AACA,qE;AACA,8E;AACA,W;AACA,sC;AACA,wB;AACA,kC;AACA,uC;AACA,6C;AACA,2C;AACA,+C;;AAEA,iC;AACA,6D;AACA,0B;AACA,qD;AACA,uD;AACA,oB;AACA,0D;AACA,2E;AACA,qF;AACA,a;;AAEA,gC;AACA,uD;;AAEA,gC;AACA,sE;;AAEA,6B;AACA,8B;AACA,iF;AACA,uD;AACA,4D;AACA,iB;;AAEA,yC;AACA,sE;AACA,6C;AACA,a;;AAEA,qC;AACA,mE;AACA,U;;AAEA,W;AACA,yC;AACA,U;AACA,sC;AACA,U;AACA,mB;AACA,U;AACA,0D;AACA,W;AACA,4B;AACA,8C;AACA,6C;;AAEA,yB;AACA,U;;AAEA,yB;AACA,O;;AAEA,O;AACA,gC;AACA,M;AACA,8G;AACA,O;AACA,+D;AACA,W;AACA,iC;AACA,W;AACA,2B;;AAEA,W;AACA,8C;AACA,U;AACA,qG;AACA,U;AACA,mB;AACA,U;AACA,0D;AACA,W;AACA,8B;AACA,oC;AACA,4C;;AAEA,iC;AACA,yB;AACA,U;;AAEA,W;AACA,mD;AACA,U;AACA,mB;AACA,U;AACA,8B;AACA,W;AACA,4B;AACA,gC;AACA,oD;;AAEA,4C;AACA,4B;AACA,U;;AAEA,W;AACA,8C;AACA,U;AACA,yE;AACA,U;AACA,wC;AACA,U;AACA,mB;AACA,U;AACA,wC;AACA,wC;AACA,W;AACA,0C;AACA,qB;AACA,wC;;AAEA,8B;AACA,4B;;AAEA,wB;AACA,wB;AACA,U;;AAEA,W;AACA,0C;AACA,8F;AACA,U;AACA,qF;AACA,U;AACA,wC;AACA,U;AACA,mB;AACA,U;AACA,4C;AACA,qD;AACA,qD;AACA,W;AACA,4C;AACA,mC;AACA,gC;AACA,4C;AACA,a;;AAEA,4C;AACA,0C;;AAEA,wB;AACA,U;;AAEA,0B;;AAEA,W;AACA,sE;AACA,U;AACA,oE;AACA,U;AACA,oD;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,oF;AACA,W;AACA,0C;AACA,4C;AACA,8D;AACA,c;AACA,U;;AAEA,W;AACA,sE;AACA,U;AACA,wE;AACA,U;AACA,oD;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,4F;AACA,W;AACA,8C;AACA,4C;AACA,2E;AACA,c;AACA,S;AACA,O;;AAEA,O;AACA,2B;AACA,O;AACA,6B;;AAEA,a;AACA,S","sourcesContent":["/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nCryptoJS = CryptoJS || (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n"]}