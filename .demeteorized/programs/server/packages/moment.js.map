{"version":3,"file":"/packages/moment.js","sources":["moment/lib/moment/moment.js","moment/export-moment.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,a;AACA,mB;AACA,8D;AACA,iB;AACA,gB;;AAEA,uB;;AAEA,yC;AACA,iB;AACA,yC;;AAEA,e;AACA,0B;AACA,8B;AACA,qD;AACA,uB;;AAEA,2B;AACA,sE;;AAEA,yC;AACA,gD;AACA,oF;;AAEA,wB;AACA,oL;AACA,yE;;AAEA,gC;AACA,qD;AACA,0D;AACA,qD;AACA,qD;AACA,oE;AACA,iO;AACA,qF;AACA,gD;AACA,oF;;AAEA,gC;AACA,qF;AACA,wG;AACA,2C;;AAEA,uC;AACA,oB;AACA,2D;AACA,gD;AACA,wC;AACA,+B;AACA,U;;AAEA,8E;AACA,iD;;AAEA,kC;AACA,sF;AACA,kC;AACA,+B;AACA,4B;AACA,4B;AACA,2B;AACA,2B;AACA,8B;AACA,6B;AACA,U;;AAEA,uB;AACA,+B;AACA,yB;AACA,yB;AACA,uB;AACA,sB;AACA,uB;AACA,0B;AACA,wB;AACA,sB;AACA,U;;AAEA,kC;AACA,6B;;AAEA,uC;AACA,sD;AACA,oD;;AAEA,gC;AACA,gC;AACA,wC;AACA,c;AACA,sC;AACA,6D;AACA,c;AACA,sC;AACA,wD;AACA,c;AACA,gC;AACA,mC;AACA,c;AACA,gC;AACA,wC;AACA,c;AACA,gC;AACA,kC;AACA,c;AACA,sC;AACA,6D;AACA,c;AACA,sC;AACA,+D;AACA,c;AACA,sC;AACA,0D;AACA,c;AACA,gC;AACA,mC;AACA,c;AACA,gC;AACA,sC;AACA,c;AACA,gC;AACA,0D;AACA,c;AACA,gC;AACA,oD;AACA,c;AACA,iC;AACA,oD;AACA,c;AACA,gC;AACA,8D;AACA,c;AACA,gC;AACA,uC;AACA,c;AACA,iC;AACA,wD;AACA,c;AACA,gC;AACA,iE;AACA,c;AACA,gC;AACA,0C;AACA,c;AACA,iC;AACA,2D;AACA,c;AACA,6B;AACA,sC;AACA,c;AACA,6B;AACA,yC;AACA,c;AACA,gC;AACA,gF;AACA,c;AACA,gC;AACA,iF;AACA,c;AACA,gC;AACA,oC;AACA,c;AACA,gC;AACA,+C;AACA,c;AACA,gC;AACA,sC;AACA,c;AACA,gC;AACA,sC;AACA,c;AACA,gC;AACA,qD;AACA,c;AACA,gC;AACA,qE;AACA,c;AACA,gC;AACA,4D;AACA,c;AACA,gC;AACA,qC;AACA,4B;AACA,4B;AACA,2B;AACA,4B;AACA,iB;AACA,yF;AACA,c;AACA,gC;AACA,qC;AACA,4B;AACA,4B;AACA,2B;AACA,4B;AACA,iB;AACA,2D;AACA,c;AACA,6B;AACA,uC;AACA,c;AACA,8B;AACA,uC;AACA,c;AACA,gC;AACA,mC;AACA,a;AACA,U;;AAEA,oC;AACA,6B;AACA,2D;AACA,U;AACA,K;AACA,4C;AACA,6B;AACA,mE;AACA,U;AACA,K;;AAEA,qC;AACA,mC;AACA,oF;AACA,K;AACA,iC;AACA,+B;AACA,2E;AACA,K;AACA,sE;;;AAGA,yC;AACA,oB;AACA,yC;;AAEA,yB;;AAEA,K;;AAEA,8B;AACA,6B;AACA,6B;AACA,K;;AAEA,2B;AACA,iC;AACA,uE;AACA,0E;AACA,uE;AACA,oE;AACA,uE;AACA,6E;AACA,6E;AACA,6F;;AAEA,6D;AACA,+B;;AAEA,2C;AACA,4C;AACA,mC;AACA,wC;AACA,2C;AACA,uE;AACA,wE;AACA,4B;AACA,sB;AACA,sE;AACA,sE;AACA,yB;AACA,gC;AACA,uB;;AAEA,wB;;AAEA,uB;AACA,K;;;AAGA,yC;AACA,e;AACA,yC;;;AAGA,2B;AACA,0B;AACA,sC;AACA,4B;AACA,a;AACA,S;AACA,iB;AACA,K;;AAEA,+B;AACA,yB;AACA,qC;AACA,gB;AACA,sC;AACA,S;AACA,K;;AAEA,8B;AACA,yE;AACA,iD;AACA,iC;AACA,8C;AACA,kC;AACA,S;AACA,sB;AACA,K;;AAEA,uD;AACA,2F;AACA,kD;AACA,kC;AACA,sC;AACA,oB;AACA,kB;;AAEA,2B;AACA,8D;AACA,S;AACA,6D;AACA,6B;AACA,mC;AACA,+B;AACA,S;AACA,mB;AACA,mD;AACA,S;AACA,qB;AACA,uD;AACA,S;AACA,kD;AACA,qC;AACA,S;AACA,oE;AACA,6B;AACA,gC;AACA,4B;AACA,S;AACA,K;;AAEA,2B;AACA,6B;AACA,0E;AACA,K;;AAEA,2D;AACA,4C;AACA,yD;AACA,iE;AACA,sB;AACA,c;AACA,mC;AACA,8C;AACA,wB;AACA,a;AACA,S;AACA,kC;AACA,K;;AAEA,oC;AACA,gG;AACA,K;;;AAGA,yC;AACA,iB;AACA,yC;;;AAGA,gC;;AAEA,iC;AACA,wB;AACA,+B;AACA,iC;AACA,iD;AACA,mC;AACA,wB;AACA,yC;AACA,iB;AACA,a;AACA,U;;AAEA,qH;AACA,+B;AACA,2C;AACA,U;;AAEA,oF;AACA,oC;AACA,gD;AACA,U;;AAEA,4C;AACA,8B;;AAEA,qC;AACA,uC;AACA,a;;AAEA,sC;AACA,6D;AACA,4C;AACA,gD;AACA,0F;AACA,mF;AACA,iB;AACA,iC;AACA,2D;AACA,6B;AACA,iB;AACA,a;AACA,U;;AAEA,0F;AACA,iC;AACA,2C;AACA,U;;AAEA,kE;AACA,sC;AACA,gD;AACA,U;;AAEA,yD;AACA,oC;AACA,8C;AACA,U;;AAEA,gD;AACA,8B;;AAEA,uC;AACA,yC;AACA,a;;AAEA,qC;AACA,6D;AACA,8C;AACA,mD;AACA,iI;AACA,qF;AACA,iB;AACA,iC;AACA,+D;AACA,6B;AACA,iB;AACA,a;AACA,U;;AAEA,2B;AACA,0B;AACA,6B;AACA,+B;AACA,mC;AACA,yC;AACA,U;AACA,yC;AACA,mD;AACA,qE;AACA,6G;AACA,wC;AACA,mB;AACA,mD;AACA,a;AACA,0B;AACA,U;;AAEA,iC;AACA,8F;AACA,sD;AACA,kE;AACA,U;;AAEA,yC;AACA,uD;AACA,6B;AACA,6C;AACA,oB;AACA,6C;AACA,a;AACA,U;;AAEA,qB;AACA,sC;AACA,yC;AACA,sC;AACA,0C;AACA,6C;AACA,0B;AACA,U;AACA,wC;AACA,6C;AACA,6E;AACA,U;;AAEA,yB;AACA,6B;AACA,4B;AACA,gC;AACA,2B;AACA,8B;AACA,0B;AACA,4B;AACA,wB;AACA,2B;AACA,0B;AACA,6B;AACA,yB;AACA,2B;AACA,U;AACA,2E;AACA,oD;AACA,mD;AACA,iE;AACA,8C;AACA,U;AACA,8C;AACA,0E;AACA,iG;AACA,U;;AAEA,qC;AACA,uD;AACA,U;AACA,wB;;AAEA,sC;AACA,0B;AACA,U;;AAEA,wC;AACA,0B;AACA,U;;AAEA,+B;AACA,wE;AACA,U;AACA,iB;AACA,4D;AACA,qF;AACA,S;AACA,O;;AAEA,4E;AACA,8E;AACA,8E;AACA,sD;AACA,oC;AACA,0B;AACA,8B;AACA,4C;AACA,S;AACA,mC;AACA,8B;AACA,K;;AAEA,4E;AACA,8B;AACA,8B;AACA,K;;AAEA,kE;AACA,M;AACA,sE;AACA,+D;AACA,yE;AACA,mB;AACA,qC;AACA,mB;AACA,mC;AACA,S;AACA,2C;AACA,iB;AACA,yC;AACA,yB;AACA,wD;AACA,uC;AACA,a;AACA,S;AACA,iD;AACA,K;;;AAGA,yC;AACA,kB;AACA,yC;;;AAGA,4C;AACA,oC;AACA,iD;AACA,S;AACA,wC;AACA,K;;AAEA,yC;AACA,8D;;AAEA,6D;AACA,iD;AACA,0D;AACA,oB;AACA,4D;AACA,a;AACA,S;;AAEA,+B;AACA,4B;AACA,0C;AACA,+F;AACA,a;AACA,0B;AACA,U;AACA,K;;AAEA,2C;AACA,sC;;AAEA,gD;;AAEA,uC;AACA,iE;AACA,S;;AAEA,0C;AACA,K;;AAEA,yC;AACA,kB;;AAEA,qD;AACA,uD;AACA,S;;AAEA,2D;AACA,0D;AACA,wF;AACA,S;;AAEA,sB;AACA,K;;;AAGA,yC;AACA,e;AACA,yC;;;AAGA,2C;AACA,mD;AACA,wB;AACA,oB;AACA,yC;AACA,oB;AACA,wC;AACA,qB;AACA,uC;AACA,iB;AACA,kB;AACA,mB;AACA,mB;AACA,8C;AACA,mB;AACA,oB;AACA,kB;AACA,mB;AACA,oB;AACA,kC;AACA,iB;AACA,iB;AACA,+D;AACA,iB;AACA,yC;AACA,iB;AACA,kB;AACA,sC;AACA,iB;AACA,+B;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,4C;AACA,iB;AACA,uD;AACA,S;AACA,K;;AAEA,gD;AACA,iE;AACA,8E;AACA,oD;;AAEA,qD;AACA,K;;AAEA,+C;AACA,4D;AACA,yC;;AAEA,wB;AACA,gB;AACA,wC;AACA,mB;AACA,gC;AACA,+C;AACA,a;AACA,kB;AACA,4C;AACA,qB;AACA,gE;AACA,wE;AACA,4B;AACA,qC;AACA,oB;AACA,wC;AACA,a;AACA,kB;AACA,uB;AACA,wC;AACA,mB;AACA,gC;AACA,2C;AACA,a;AACA,kB;AACA,sB;AACA,4C;AACA,qB;AACA,gC;AACA,qC;AACA,2C;AACA,a;AACA,kB;AACA,e;AACA,mB;AACA,sE;AACA,kB;AACA,qB;AACA,sB;AACA,uC;AACA,kB;AACA,kB;AACA,uC;AACA,kB;AACA,oE;AACA,kB;AACA,kB;AACA,wC;AACA,yC;AACA,wC;AACA,mB;AACA,uC;AACA,kB;AACA,iB;AACA,wC;AACA,mB;AACA,uC;AACA,kB;AACA,iB;AACA,wC;AACA,mB;AACA,uC;AACA,kB;AACA,sB;AACA,kB;AACA,mB;AACA,oB;AACA,0D;AACA,kB;AACA,iC;AACA,iB;AACA,2D;AACA,kB;AACA,mB;AACA,wC;AACA,mB;AACA,kC;AACA,2D;AACA,kB;AACA,S;;AAEA,sD;AACA,4B;AACA,oC;AACA,S;AACA,K;;AAEA,kC;AACA,mD;AACA,iG;AACA,6D;AACA,oC;AACA,6C;;AAEA,wB;AACA,mB;AACA,S;;AAEA,mC;AACA,wE;AACA,6D;AACA,iD;AACA,qD;AACA,+C;AACA,yD;AACA,qD;AACA,S;;AAEA,8D;AACA,4B;AACA,gG;AACA,S;;AAEA,0G;AACA,gD;AACA,gD;;AAEA,2B;;AAEA,6B;AACA,8D;AACA,qE;AACA,gB;AACA,2D;AACA,kE;AACA,S;;AAEA,yB;AACA,K;;AAEA,qC;AACA,0B;;AAEA,wB;AACA,mB;AACA,S;;AAEA,qB;AACA,qC;AACA,uC;AACA,mC;AACA,qC;AACA,yC;AACA,yC;AACA,mD;AACA,U;;AAEA,8B;AACA,K;;AAEA,uC;AACA,6B;AACA,6B;AACA,oB;AACA,qC;AACA,kC;AACA,gC;AACA,c;AACA,gB;AACA,sE;AACA,S;AACA,K;;AAEA,yC;AACA,kD;AACA,kF;AACA,gD;AACA,oC;AACA,mC;;AAEA,uE;;AAEA,uB;;AAEA,6C;AACA,2F;AACA,8B;AACA,wF;AACA,a;AACA,mD;AACA,kD;AACA,wE;AACA,a;AACA,S;;AAEA,qD;AACA,qB;AACA,gC;AACA,S;;AAEA,uB;AACA,gD;AACA,+B;AACA,S;AACA,yC;AACA,4D;AACA,6B;AACA,S;AACA,iB;AACA,8B;AACA,K;;AAEA,mD;AACA,iD;AACA,uB;AACA,uB;AACA,uB;;AAEA,6B;AACA,c;AACA,yB;;AAEA,gD;AACA,4C;AACA,yC;AACA,oD;AACA,gD;;AAEA,8E;;AAEA,wD;AACA,4C;AACA,iC;AACA,sD;AACA,a;;AAEA,6C;AACA,2C;AACA,wC;AACA,a;AACA,S;;AAEA,mC;AACA,K;;AAEA,2B;AACA,yC;AACA,c;AACA,+B;AACA,0C;;AAEA,oB;AACA,kD;AACA,yD;AACA,qC;AACA,kD;AACA,gD;AACA,0B;AACA,iB;AACA,a;AACA,kD;AACA,kC;AACA,a;AACA,gD;AACA,gB;AACA,yC;AACA,S;AACA,K;;AAEA,wC;AACA,8B;AACA,kD;;AAEA,kC;AACA,mC;AACA,6B;AACA,8C;AACA,+C;AACA,uC;AACA,oC;AACA,uC;AACA,kC;AACA,2C;AACA,yC;AACA,gD;AACA,mC;AACA,gB;AACA,wC;AACA,S;AACA,K;;;AAGA,yC;AACA,qB;AACA,yC;;;AAGA,6F;AACA,+E;AACA,iF;AACA,K;;AAEA,8D;AACA,2D;AACA,0C;AACA,wC;AACA,qC;AACA,sC;AACA,oD;AACA,yC;AACA,kD;AACA,uC;AACA,8C;AACA,sC;AACA,6C;AACA,sC;AACA,yD;AACA,sD;AACA,gC;AACA,mC;AACA,uB;AACA,iD;AACA,K;;;AAGA,yC;AACA,oB;AACA,yC;;;AAGA,4C;AACA,oE;AACA,sD;AACA,4C;AACA,8E;AACA,mD;AACA,4D;AACA,oE;AACA,wD;AACA,+D;AACA,2B;;;AAGA,oC;AACA,iC;AACA,S;;AAEA,wC;AACA,iC;AACA,S;;AAEA,+D;AACA,gB;AACA,4D;AACA,uC;AACA,U;AACA,K;;;AAGA,yC;AACA,2B;AACA,yC;;AAEA,iC;AACA,8B;AACA,+B;;AAEA,6C;AACA,wB;AACA,S;;AAEA,wC;AACA,oE;AACA,S;;AAEA,qC;AACA,uC;AACA,4C;AACA,4B;AACA,kC;AACA,mD;AACA,oB;AACA,oD;AACA,a;AACA,gB;AACA,sC;AACA,S;;AAEA,kC;AACA,K;;AAEA,6C;AACA,2B;AACA,uB;AACA,wB;AACA,sB;AACA,0B;AACA,W;AACA,M;;AAEA,wB;AACA,iD;AACA,2B;AACA,2B;AACA,0B;AACA,sB;AACA,uB;AACA,uB;AACA,iB;AACA,M;;AAEA,gD;AACA,oC;AACA,oC;AACA,M;;AAEA,e;AACA,6C;AACA,kD;AACA,mD;AACA,6E;AACA,0D;AACA,iB;AACA,gB;;AAEA,uB;AACA,sB;AACA,sC;AACA,oB;AACA,8C;AACA,a;AACA,6B;AACA,iD;AACA,wB;AACA,qB;AACA,uC;AACA,uC;AACA,uC;AACA,uC;AACA,uC;AACA,c;AACA,S;;AAEA,qC;;AAEA,0D;AACA,oC;AACA,S;;AAEA,mB;AACA,M;;AAEA,qB;AACA,6B;;AAEA,qB;AACA,qC;;AAEA,iE;AACA,mE;AACA,yC;;AAEA,8E;AACA,2E;AACA,oB;AACA,0C;AACA,mB;AACA,yC;AACA,S;AACA,gC;AACA,oC;AACA,qB;AACA,kC;AACA,qC;AACA,4B;AACA,uB;AACA,qC;AACA,mC;AACA,S;AACA,4E;AACA,M;;AAEA,4B;AACA,sC;AACA,kD;AACA,kC;AACA,S;AACA,sC;AACA,M;;AAEA,4B;AACA,sC;AACA,qC;AACA,M;;AAEA,wC;AACA,wC;AACA,uC;AACA,M;;;AAGA,yC;AACA,wB;AACA,yC;;;AAGA,0C;;AAEA,6B;AACA,gC;AACA,U;;AAEA,+B;AACA,4D;AACA,U;;AAEA,4B;AACA,4C;AACA,U;;AAEA,gC;AACA,mE;AACA,U;;AAEA,8B;AACA,4D;AACA,U;;AAEA,mC;AACA,oF;AACA,U;;AAEA,+B;AACA,yB;AACA,oB;AACA,yB;AACA,0B;AACA,yB;AACA,0B;AACA,4B;AACA,4B;AACA,gC;AACA,c;AACA,U;;AAEA,+B;AACA,wC;AACA,8B;AACA,6H;AACA,wB;AACA,8D;AACA,iB;AACA,a;AACA,mC;AACA,U;;AAEA,gC;AACA,0G;AACA,6D;AACA,kC;AACA,a;AACA,qB;AACA,U;;AAEA,2B;AACA,gC;AACA,U;;AAEA,6B;AACA,yB;AACA,gC;AACA,wB;AACA,U;;AAEA,yC;AACA,iF;AACA,kD;AACA,U;;AAEA,qC;AACA,oB;AACA,iE;AACA,4C;AACA,mD;AACA,oB;AACA,kD;AACA,a;AACA,0D;AACA,wB;AACA,U;;AAEA,0C;AACA,oB;AACA,2E;AACA,4C;AACA,mD;AACA,oB;AACA,kD;AACA,a;AACA,2D;AACA,wB;AACA,U;;AAEA,iD;AACA,mG;AACA,6D;AACA,6B;;AAEA,0C;;AAEA,wD;AACA,0E;AACA,oG;AACA,uC;AACA,4F;AACA,8E;AACA,+C;AACA,mE;AACA,uE;AACA,kE;AACA,iF;AACA,2F;AACA,uC;AACA,yC;AACA,iB;AACA,oB;AACA,qC;AACA,kE;AACA,kE;AACA,sE;AACA,oG;AACA,0G;AACA,yB;AACA,a;AACA,uD;AACA,U;;AAEA,+C;AACA,qG;AACA,U;;AAEA,4C;AACA,sD;AACA,U;;AAEA,gC;AACA,0F;AACA,iD;AACA,wC;AACA,sC;AACA,sC;AACA,sC;AACA,mD;AACA,mE;AACA,U;;AAEA,kC;AACA,mC;AACA,4E;AACA,U;;AAEA,6B;AACA,iE;AACA,4D;AACA,U;;AAEA,gC;AACA,2E;AACA,gC;AACA,gD;AACA,6D;AACA,oD;AACA,oC;AACA,qB;AACA,iB;AACA,qD;AACA,oB;AACA,2B;AACA,a;AACA,U;;AAEA,kC;AACA,+C;AACA,2B;;AAEA,gC;AACA,gD;AACA,2D;AACA,oD;AACA,oC;AACA,qB;AACA,iB;;AAEA,yC;AACA,6B;AACA,sD;AACA,oE;;AAEA,0C;AACA,4B;AACA,oB;AACA,wD;AACA,a;AACA,U;;AAEA,mC;AACA,0C;AACA,sE;AACA,oD;AACA,4B;AACA,wB;AACA,8B;AACA,mC;AACA,yB;AACA,6B;AACA,mC;AACA,wB;AACA,2B;AACA,uB;AACA,8B;AACA,mC;AACA,wB;AACA,gC;AACA,mC;AACA,0B;AACA,gC;AACA,mC;AACA,0B;AACA,qC;AACA,mC;AACA,a;;AAEA,uC;AACA,mC;AACA,gC;AACA,6C;AACA,mC;AACA,a;;AAEA,wB;AACA,U;;AAEA,iC;AACA,0C;AACA,wG;AACA,U;;AAEA,0C;AACA,yE;AACA,gF;AACA,U;;AAEA,2C;AACA,yE;AACA,gF;AACA,U;;AAEA,yC;AACA,yE;AACA,kF;AACA,U;;AAEA,+B;AACA,kD;AACA,+C;AACA,U;;AAEA,+B;AACA,kD;AACA,+C;AACA,U;;AAEA,iC;AACA,2C;AACA,gC;AACA,gD;AACA,6D;AACA,iB;AACA,2C;AACA,uC;AACA,iB;AACA,qC;AACA,mC;AACA,uC;AACA,yG;AACA,iB;AACA,oB;AACA,0E;AACA,a;AACA,wB;AACA,U;;AAEA,gC;AACA,4C;AACA,U;;AAEA,gC;AACA,mE;AACA,U;;AAEA,iD;AACA,yB;AACA,0B;AACA,a;AACA,kB;AACA,6C;AACA,a;;AAEA,oD;AACA,U;;AAEA,mC;AACA,yE;AACA,U;;AAEA,sC;AACA,4G;AACA,kF;AACA,U;;AAEA,qC;AACA,2F;AACA,wE;AACA,U;;AAEA,wC;AACA,mD;AACA,wE;AACA,U;;AAEA,iC;AACA,8C;AACA,4E;AACA,U;;AAEA,oC;AACA,mD;AACA,4E;AACA,U;;AAEA,oC;AACA,6E;AACA,4E;AACA,U;;AAEA,uC;AACA,oD;AACA,6E;AACA,sE;AACA,kG;AACA,U;;AAEA,gC;AACA,0C;AACA,+C;AACA,U;;AAEA,uC;AACA,0C;AACA,6C;AACA,U;;AAEA,sE;AACA,0E;AACA,uC;AACA,+B;AACA,oC;AACA,kC;AACA,oB;AACA,oD;AACA,4B;AACA,a;AACA,S;AACA,O;;AAEA,kC;AACA,6C;AACA,oE;AACA,+C;AACA,gC;AACA,kD;AACA,0C;AACA,4B;AACA,oB;AACA,oD;AACA,a;AACA,U;AACA,K;;AAEA,0F;AACA,0D;AACA,kH;AACA,K;;AAEA,gG;AACA,4C;;AAEA,yB;AACA,mC;AACA,uC;AACA,qC;AACA,2C;;AAEA,iC;AACA,6C;;AAEA,yC;AACA,0B;AACA,yC;;;AAGA,qD;;AAEA,+B;AACA,kD;AACA,kC;AACA,sC;AACA,kC;AACA,+C;;AAEA,sE;AACA,2C;AACA,oD;;AAEA,oD;AACA,wC;;AAEA,6C;AACA,wC;;AAEA,2C;AACA,oC;;AAEA,yC;AACA,kC;;AAEA,0C;AACA,sC;;AAEA,0C;AACA,+B;AACA,U;;AAEA,6B;AACA,6C;AACA,U;;AAEA,+B;AACA,uC;AACA,kC;AACA,4C;AACA,8C;AACA,U;;AAEA,0C;AACA,mC;AACA,4E;;AAEA,6B;AACA,oE;AACA,a;;AAEA,kD;AACA,U;;AAEA,qC;AACA,iE;AACA,kD;;AAEA,oD;AACA,oC;AACA,wC;;AAEA,2B;;AAEA,wB;AACA,U;;AAEA,0C;AACA,kD;;AAEA,oD;AACA,oC;AACA,wC;;AAEA,2B;;AAEA,wB;AACA,U;;AAEA,gC;AACA,0C;AACA,qD;AACA,U;;AAEA,+B;AACA,0C;AACA,uF;AACA,U;;AAEA,6B;AACA,O;;AAEA,uC;AACA,gD;AACA,oC;AACA,U;AACA,K;;AAEA,iD;AACA,uD;AACA,kC;AACA,U;AACA,K;;AAEA,uC;AACA,uD;AACA,+D;AACA,gD;AACA,S;AACA,K;;AAEA,0C;AACA,+C;AACA,6E;AACA,M;;;AAGA,yC;AACA,oB;AACA,yC;;;AAGA,uE;AACA,uB;AACA,qC;AACA,gC;AACA,gE;AACA,kC;AACA,kC;AACA,wC;AACA,mC;AACA,S;AACA,O;;AAEA,yB;;AAEA,yC;AACA,uB;AACA,yC;;;AAGA,iC;AACA,oB;AACA,gC;AACA,K;AACA,2B;AACA,uC;AACA,gF;AACA,mE;AACA,+C;AACA,gC;AACA,K;AACA,4B;AACA,qD;AACA,0C;AACA,0B;AACA,W;AACA,K;AACA,c;;;;;;;;;;;;;;;;;;;AC9uDA,+E;AACA,qC;AACA,uB;AACA,C","sourcesContent":["//! moment.js\n//! version : 2.2.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n(function (undefined) {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = \"2.2.1\",\n        round = Math.round, i,\n        // internal storage for language config files\n        languages = {},\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n        aspNetTimeSpanJsonRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)\\:(\\d+)\\.?(\\d{3})?/,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO seperator)\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n\n        // preliminary iso regex\n        // 0000-00-00 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000\n        isoRegex = /^\\s*\\d{4}-\\d\\d-\\d\\d((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d\\d?\\d?)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d)?)?/,\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.S', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d{1,3}/],\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],\n            ['HH', /(T| )\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        unitAliases = {\n            ms : 'millisecond',\n            s : 'second',\n            m : 'minute',\n            h : 'hour',\n            d : 'day',\n            w : 'week',\n            W : 'isoweek',\n            M : 'month',\n            y : 'year'\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),\n        paddedTokens = 'M D H h m s w W'.split(' '),\n\n        formatTokenFunctions = {\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return this.lang().monthsShort(this, format);\n            },\n            MMMM : function (format) {\n                return this.lang().months(this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                return this.dayOfYear();\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return this.lang().weekdaysMin(this, format);\n            },\n            ddd  : function (format) {\n                return this.lang().weekdaysShort(this, format);\n            },\n            dddd : function (format) {\n                return this.lang().weekdays(this, format);\n            },\n            w    : function () {\n                return this.week();\n            },\n            W    : function () {\n                return this.isoWeek();\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            YYYYY : function () {\n                return leftZeroFill(this.year(), 5);\n            },\n            gg   : function () {\n                return leftZeroFill(this.weekYear() % 100, 2);\n            },\n            gggg : function () {\n                return this.weekYear();\n            },\n            ggggg : function () {\n                return leftZeroFill(this.weekYear(), 5);\n            },\n            GG   : function () {\n                return leftZeroFill(this.isoWeekYear() % 100, 2);\n            },\n            GGGG : function () {\n                return this.isoWeekYear();\n            },\n            GGGGG : function () {\n                return leftZeroFill(this.isoWeekYear(), 5);\n            },\n            e : function () {\n                return this.weekday();\n            },\n            E : function () {\n                return this.isoWeekday();\n            },\n            a    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return ~~(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(~~(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(a / 60), 2) + \":\" + leftZeroFill(~~a % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(10 * a / 6), 4);\n            },\n            z : function () {\n                return this.zoneAbbr();\n            },\n            zz : function () {\n                return this.zoneName();\n            },\n            X    : function () {\n                return this.unix();\n            }\n        };\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func, period) {\n        return function (a) {\n            return this.lang().ordinal(func.call(this, a), period);\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    function Language() {\n\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        extend(this, config);\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var years = duration.years || duration.year || duration.y || 0,\n            months = duration.months || duration.month || duration.M || 0,\n            weeks = duration.weeks || duration.week || duration.w || 0,\n            days = duration.days || duration.day || duration.d || 0,\n            hours = duration.hours || duration.hour || duration.h || 0,\n            minutes = duration.minutes || duration.minute || duration.m || 0,\n            seconds = duration.seconds || duration.second || duration.s || 0,\n            milliseconds = duration.milliseconds || duration.millisecond || duration.ms || 0;\n\n        // store reference to input for deterministic cloning\n        this._input = duration;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            years * 12;\n\n        this._data = {};\n\n        this._bubble();\n    }\n\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (b.hasOwnProperty(i)) {\n                a[i] = b[i];\n            }\n        }\n        return a;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength) {\n        var output = number + '';\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return output;\n    }\n\n    // helper function for _.addTime and _.subtractTime\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = duration._days,\n            months = duration._months,\n            minutes,\n            hours;\n\n        if (milliseconds) {\n            mom._d.setTime(+mom._d + milliseconds * isAdding);\n        }\n        // store the minutes and hours so we can restore them\n        if (days || months) {\n            minutes = mom.minute();\n            hours = mom.hour();\n        }\n        if (days) {\n            mom.date(mom.date() + days * isAdding);\n        }\n        if (months) {\n            mom.month(mom.month() + months * isAdding);\n        }\n        if (milliseconds && !ignoreUpdateOffset) {\n            moment.updateOffset(mom);\n        }\n        // restore the minutes and hours after possibly changing dst\n        if (days || months) {\n            mom.minute(minutes);\n            mom.hour(hours);\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (~~array1[i] !== ~~array2[i]) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function normalizeUnits(units) {\n        return units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1') : units;\n    }\n\n\n    /************************************\n        Languages\n    ************************************/\n\n\n    extend(Language.prototype, {\n\n        set : function (config) {\n            var prop, i;\n            for (i in config) {\n                prop = config[i];\n                if (typeof prop === 'function') {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        },\n\n        _months : \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n        months : function (m) {\n            return this._months[m.month()];\n        },\n\n        _monthsShort : \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n        monthsShort : function (m) {\n            return this._monthsShort[m.month()];\n        },\n\n        monthsParse : function (monthName) {\n            var i, mom, regex;\n\n            if (!this._monthsParse) {\n                this._monthsParse = [];\n            }\n\n            for (i = 0; i < 12; i++) {\n                // make the regex if we don't have it already\n                if (!this._monthsParse[i]) {\n                    mom = moment.utc([2000, i]);\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._monthsParse[i].test(monthName)) {\n                    return i;\n                }\n            }\n        },\n\n        _weekdays : \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n        weekdays : function (m) {\n            return this._weekdays[m.day()];\n        },\n\n        _weekdaysShort : \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n        weekdaysShort : function (m) {\n            return this._weekdaysShort[m.day()];\n        },\n\n        _weekdaysMin : \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n        weekdaysMin : function (m) {\n            return this._weekdaysMin[m.day()];\n        },\n\n        weekdaysParse : function (weekdayName) {\n            var i, mom, regex;\n\n            if (!this._weekdaysParse) {\n                this._weekdaysParse = [];\n            }\n\n            for (i = 0; i < 7; i++) {\n                // make the regex if we don't have it already\n                if (!this._weekdaysParse[i]) {\n                    mom = moment([2000, 1]).day(i);\n                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._weekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n            }\n        },\n\n        _longDateFormat : {\n            LT : \"h:mm A\",\n            L : \"MM/DD/YYYY\",\n            LL : \"MMMM D YYYY\",\n            LLL : \"MMMM D YYYY LT\",\n            LLLL : \"dddd, MMMM D YYYY LT\"\n        },\n        longDateFormat : function (key) {\n            var output = this._longDateFormat[key];\n            if (!output && this._longDateFormat[key.toUpperCase()]) {\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {\n                    return val.slice(1);\n                });\n                this._longDateFormat[key] = output;\n            }\n            return output;\n        },\n\n        isPM : function (input) {\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n            // Using charAt should be more compatible.\n            return ((input + '').toLowerCase().charAt(0) === 'p');\n        },\n\n        _meridiemParse : /[ap]\\.?m?\\.?/i,\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n\n        _calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[Last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        calendar : function (key, mom) {\n            var output = this._calendar[key];\n            return typeof output === 'function' ? output.apply(mom) : output;\n        },\n\n        _relativeTime : {\n            future : \"in %s\",\n            past : \"%s ago\",\n            s : \"a few seconds\",\n            m : \"a minute\",\n            mm : \"%d minutes\",\n            h : \"an hour\",\n            hh : \"%d hours\",\n            d : \"a day\",\n            dd : \"%d days\",\n            M : \"a month\",\n            MM : \"%d months\",\n            y : \"a year\",\n            yy : \"%d years\"\n        },\n        relativeTime : function (number, withoutSuffix, string, isFuture) {\n            var output = this._relativeTime[string];\n            return (typeof output === 'function') ?\n                output(number, withoutSuffix, string, isFuture) :\n                output.replace(/%d/i, number);\n        },\n        pastFuture : function (diff, output) {\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);\n        },\n\n        ordinal : function (number) {\n            return this._ordinal.replace(\"%d\", number);\n        },\n        _ordinal : \"%d\",\n\n        preparse : function (string) {\n            return string;\n        },\n\n        postformat : function (string) {\n            return string;\n        },\n\n        week : function (mom) {\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;\n        },\n        _week : {\n            dow : 0, // Sunday is the first day of the week.\n            doy : 6  // The week that contains Jan 1st is the first week of the year.\n        }\n    });\n\n    // Loads a language definition into the `languages` cache.  The function\n    // takes a key and optionally values.  If not in the browser and no values\n    // are provided, it will load the language file module.  As a convenience,\n    // this function also returns the language values.\n    function loadLang(key, values) {\n        values.abbr = key;\n        if (!languages[key]) {\n            languages[key] = new Language();\n        }\n        languages[key].set(values);\n        return languages[key];\n    }\n\n    // Remove a language from the `languages` cache. Mostly useful in tests.\n    function unloadLang(key) {\n        delete languages[key];\n    }\n\n    // Determines which language definition to use and returns it.\n    //\n    // With no parameters, it will return the global language.  If you\n    // pass in a language key, such as 'en', it will return the\n    // definition for 'en', so long as 'en' has already been loaded using\n    // moment.lang.\n    function getLangDefinition(key) {\n        if (!key) {\n            return moment.fn._lang;\n        }\n        if (!languages[key] && hasModule) {\n            try {\n                require('./lang/' + key);\n            } catch (e) {\n                // call with no params to set to default\n                return moment.fn._lang;\n            }\n        }\n        return languages[key] || moment.fn._lang;\n    }\n\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[.*\\]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \"\";\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n\n        format = expandFormat(format, m.lang());\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, lang) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return lang.longDateFormat(input) || input;\n        }\n\n        while (i-- && (localFormattingTokens.lastIndex = 0,\n                    localFormattingTokens.test(format))) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n        }\n\n        return format;\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token, config) {\n        switch (token) {\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n            return parseTokenFourDigits;\n        case 'YYYYY':\n            return parseTokenSixDigits;\n        case 'S':\n        case 'SS':\n        case 'SSS':\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n            return parseTokenWord;\n        case 'a':\n        case 'A':\n            return getLangDefinition(config._l)._meridiemParse;\n        case 'X':\n            return parseTokenTimestampMs;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n            return parseTokenOneOrTwoDigits;\n        default :\n            return new RegExp(token.replace('\\\\', ''));\n        }\n    }\n\n    function timezoneMinutesFromString(string) {\n        var tzchunk = (parseTokenTimezone.exec(string) || [])[0],\n            parts = (tzchunk + '').match(parseTimezoneChunker) || ['-', 0, 0],\n            minutes = +(parts[1] * 60) + ~~parts[2];\n\n        return parts[0] === '+' ? -minutes : minutes;\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, config) {\n        var a, datePartArray = config._a;\n\n        switch (token) {\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            if (input != null) {\n                datePartArray[1] = ~~input - 1;\n            }\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            a = getLangDefinition(config._l).monthsParse(input);\n            // if we didn't find a month name, mark the date as invalid.\n            if (a != null) {\n                datePartArray[1] = a;\n            } else {\n                config._isValid = false;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DD\n        case 'DD' :\n            if (input != null) {\n                datePartArray[2] = ~~input;\n            }\n            break;\n        // DAY OF YEAR\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                datePartArray[1] = 0;\n                datePartArray[2] = ~~input;\n            }\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[0] = ~~input + (~~input > 68 ? 1900 : 2000);\n            break;\n        case 'YYYY' :\n        case 'YYYYY' :\n            datePartArray[0] = ~~input;\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config._isPm = getLangDefinition(config._l).isPM(input);\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[3] = ~~input;\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[4] = ~~input;\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[5] = ~~input;\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n            datePartArray[6] = ~~ (('0.' + input) * 1000);\n            break;\n        // UNIX TIMESTAMP WITH MS\n        case 'X':\n            config._d = new Date(parseFloat(input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config._useUTC = true;\n            config._tzm = timezoneMinutesFromString(input);\n            break;\n        }\n\n        // if the input is null, the date is not valid\n        if (input == null) {\n            config._isValid = false;\n        }\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromArray(config) {\n        var i, date, input = [], currentDate;\n\n        if (config._d) {\n            return;\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        currentDate = currentDateArray(config);\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid\n        input[3] += ~~((config._tzm || 0) / 60);\n        input[4] += ~~((config._tzm || 0) % 60);\n\n        date = new Date(0);\n\n        if (config._useUTC) {\n            date.setUTCFullYear(input[0], input[1], input[2]);\n            date.setUTCHours(input[3], input[4], input[5], input[6]);\n        } else {\n            date.setFullYear(input[0], input[1], input[2]);\n            date.setHours(input[3], input[4], input[5], input[6]);\n        }\n\n        config._d = date;\n    }\n\n    function dateFromObject(config) {\n        var o = config._i;\n\n        if (config._d) {\n            return;\n        }\n\n        config._a = [\n            o.years || o.year || o.y,\n            o.months || o.month || o.M,\n            o.days || o.day || o.d,\n            o.hours || o.hour || o.h,\n            o.minutes || o.minute || o.m,\n            o.seconds || o.second || o.s,\n            o.milliseconds || o.millisecond || o.ms\n        ];\n\n        dateFromArray(config);\n    }\n\n    function currentDateArray(config) {\n        var now = new Date();\n        if (config._useUTC) {\n            return [\n                now.getUTCFullYear(),\n                now.getUTCMonth(),\n                now.getUTCDate()\n            ];\n        } else {\n            return [now.getFullYear(), now.getMonth(), now.getDate()];\n        }\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(config) {\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var lang = getLangDefinition(config._l),\n            string = '' + config._i,\n            i, parsedInput, tokens;\n\n        tokens = expandFormat(config._f, lang).match(formattingTokens);\n\n        config._a = [];\n\n        for (i = 0; i < tokens.length; i++) {\n            parsedInput = (getParseRegexForToken(tokens[i], config).exec(string) || [])[0];\n            if (parsedInput) {\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n            }\n            // don't parse if its not a known token\n            if (formatTokenFunctions[tokens[i]]) {\n                addTimeToArrayFromToken(tokens[i], parsedInput, config);\n            }\n        }\n\n        // add remaining unparsed input to the string\n        if (string) {\n            config._il = string;\n        }\n\n        // handle am pm\n        if (config._isPm && config._a[3] < 12) {\n            config._a[3] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config._isPm === false && config._a[3] === 12) {\n            config._a[3] = 0;\n        }\n        // return\n        dateFromArray(config);\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(config) {\n        var tempConfig,\n            tempMoment,\n            bestMoment,\n\n            scoreToBeat = 99,\n            i,\n            currentScore;\n\n        for (i = 0; i < config._f.length; i++) {\n            tempConfig = extend({}, config);\n            tempConfig._f = config._f[i];\n            makeDateFromStringAndFormat(tempConfig);\n            tempMoment = new Moment(tempConfig);\n\n            currentScore = compareArrays(tempConfig._a, tempMoment.toArray());\n\n            // if there is any input that was not parsed\n            // add a penalty for that format\n            if (tempMoment._il) {\n                currentScore += tempMoment._il.length;\n            }\n\n            if (currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempMoment;\n            }\n        }\n\n        extend(config, bestMoment);\n    }\n\n    // date from iso format\n    function makeDateFromString(config) {\n        var i,\n            string = config._i,\n            match = isoRegex.exec(string);\n\n        if (match) {\n            // match[2] should be \"T\" or undefined\n            config._f = 'YYYY-MM-DD' + (match[2] || \" \");\n            for (i = 0; i < 4; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    config._f += isoTimes[i][0];\n                    break;\n                }\n            }\n            if (parseTokenTimezone.exec(string)) {\n                config._f += \" Z\";\n            }\n            makeDateFromStringAndFormat(config);\n        } else {\n            config._d = new Date(string);\n        }\n    }\n\n    function makeDateFromInput(config) {\n        var input = config._i,\n            matched = aspNetJsonRegex.exec(input);\n\n        if (input === undefined) {\n            config._d = new Date();\n        } else if (matched) {\n            config._d = new Date(+matched[1]);\n        } else if (typeof input === 'string') {\n            makeDateFromString(config);\n        } else if (isArray(input)) {\n            config._a = input.slice(0);\n            dateFromArray(config);\n        } else if (input instanceof Date) {\n            config._d = new Date(+input);\n        } else if (typeof(input) === 'object') {\n            dateFromObject(config);\n        } else {\n            config._d = new Date(input);\n        }\n    }\n\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {\n        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime(milliseconds, withoutSuffix, lang) {\n        var seconds = round(Math.abs(milliseconds) / 1000),\n            minutes = round(seconds / 60),\n            hours = round(minutes / 60),\n            days = round(hours / 24),\n            years = round(days / 365),\n            args = seconds < 45 && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < 45 && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < 22 && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days <= 25 && ['dd', days] ||\n                days <= 45 && ['M'] ||\n                days < 345 && ['MM', round(days / 30)] ||\n                years === 1 && ['y'] || ['yy', years];\n        args[2] = withoutSuffix;\n        args[3] = milliseconds > 0;\n        args[4] = lang;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Week of Year\n    ************************************/\n\n\n    // firstDayOfWeek       0 = sun, 6 = sat\n    //                      the day of the week that starts the week\n    //                      (usually sunday or monday)\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat\n    //                      the first week is the week that contains the first\n    //                      of this day of the week\n    //                      (eg. ISO weeks use thursday (4))\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n            adjustedMoment;\n\n\n        if (daysToDayOfWeek > end) {\n            daysToDayOfWeek -= 7;\n        }\n\n        if (daysToDayOfWeek < end - 7) {\n            daysToDayOfWeek += 7;\n        }\n\n        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);\n        return {\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),\n            year: adjustedMoment.year()\n        };\n    }\n\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    function makeMoment(config) {\n        var input = config._i,\n            format = config._f;\n\n        if (input === null || input === '') {\n            return null;\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = getLangDefinition().preparse(input);\n        }\n\n        if (moment.isMoment(input)) {\n            config = extend({}, input);\n            config._d = new Date(+input._d);\n        } else if (format) {\n            if (isArray(format)) {\n                makeDateFromStringAndArray(config);\n            } else {\n                makeDateFromStringAndFormat(config);\n            }\n        } else {\n            makeDateFromInput(config);\n        }\n\n        return new Moment(config);\n    }\n\n    moment = function (input, format, lang) {\n        return makeMoment({\n            _i : input,\n            _f : format,\n            _l : lang,\n            _isUTC : false\n        });\n    };\n\n    // creating with utc\n    moment.utc = function (input, format, lang) {\n        return makeMoment({\n            _useUTC : true,\n            _isUTC : true,\n            _l : lang,\n            _i : input,\n            _f : format\n        }).utc();\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var isDuration = moment.isDuration(input),\n            isNumber = (typeof input === 'number'),\n            duration = (isDuration ? input._input : (isNumber ? {} : input)),\n            matched = aspNetTimeSpanJsonRegex.exec(input),\n            sign,\n            ret;\n\n        if (isNumber) {\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (matched) {\n            sign = (matched[1] === \"-\") ? -1 : 1;\n            duration = {\n                y: 0,\n                d: ~~matched[2] * sign,\n                h: ~~matched[3] * sign,\n                m: ~~matched[4] * sign,\n                s: ~~matched[5] * sign,\n                ms: ~~matched[6] * sign\n            };\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration && input.hasOwnProperty('_lang')) {\n            ret._lang = input._lang;\n        }\n\n        return ret;\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    moment.updateOffset = function () {};\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    moment.lang = function (key, values) {\n        if (!key) {\n            return moment.fn._lang._abbr;\n        }\n        key = key.toLowerCase();\n        key = key.replace('_', '-');\n        if (values) {\n            loadLang(key, values);\n        } else if (values === null) {\n            unloadLang(key);\n            key = 'en';\n        } else if (!languages[key]) {\n            getLangDefinition(key);\n        }\n        moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);\n    };\n\n    // returns language data\n    moment.langData = function (key) {\n        if (key && key._lang && key._lang._abbr) {\n            key = key._lang._abbr;\n        }\n        return getLangDefinition(key);\n    };\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment;\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    extend(moment.fn = Moment.prototype, {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d + ((this._offset || 0) * 60000);\n        },\n\n        unix : function () {\n            return Math.floor(+this / 1000);\n        },\n\n        toString : function () {\n            return this.format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n        },\n\n        toDate : function () {\n            return this._offset ? new Date(+this) : this._d;\n        },\n\n        toISOString : function () {\n            return formatMoment(moment(this).utc(), 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds()\n            ];\n        },\n\n        isValid : function () {\n            if (this._isValid == null) {\n                if (this._a) {\n                    this._isValid = !compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray());\n                } else {\n                    this._isValid = !isNaN(this._d.getTime());\n                }\n            }\n            return !!this._isValid;\n        },\n\n        invalidAt: function () {\n            var i, arr1 = this._a, arr2 = (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray();\n            for (i = 6; i >= 0 && arr1[i] === arr2[i]; --i) {\n                // empty loop body\n            }\n            return i;\n        },\n\n        utc : function () {\n            return this.zone(0);\n        },\n\n        local : function () {\n            this.zone(0);\n            this._isUTC = false;\n            return this;\n        },\n\n        format : function (inputString) {\n            var output = formatMoment(this, inputString || moment.defaultFormat);\n            return this.lang().postformat(output);\n        },\n\n        add : function (input, val) {\n            var dur;\n            // switch args to support add('s', 1) and add(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, 1);\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur;\n            // switch args to support subtract('s', 1) and subtract(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, -1);\n            return this;\n        },\n\n        diff : function (input, units, asFloat) {\n            var that = this._isUTC ? moment(input).zone(this._offset || 0) : moment(input).local(),\n                zoneDiff = (this.zone() - that.zone()) * 6e4,\n                diff, output;\n\n            units = normalizeUnits(units);\n\n            if (units === 'year' || units === 'month') {\n                // average number of days in the months in the given dates\n                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2\n                // difference in months\n                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());\n                // adjust by taking difference in days, average number of days\n                // and dst in the given months.\n                output += ((this - moment(this).startOf('month')) -\n                        (that - moment(that).startOf('month'))) / diff;\n                // same as above but with zones, to negate all dst\n                output -= ((this.zone() - moment(this).startOf('month').zone()) -\n                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;\n                if (units === 'year') {\n                    output = output / 12;\n                }\n            } else {\n                diff = (this - that);\n                output = units === 'second' ? diff / 1e3 : // 1000\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60\n                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                    diff;\n            }\n            return asFloat ? output : absRound(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function () {\n            var diff = this.diff(moment().zone(this.zone()).startOf('day'), 'days', true),\n                format = diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n            return this.format(this.lang().calendar(format, this));\n        },\n\n        isLeapYear : function () {\n            var year = this.year();\n            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        },\n\n        isDST : function () {\n            return (this.zone() < this.clone().month(0).zone() ||\n                this.zone() < this.clone().month(5).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            if (input != null) {\n                if (typeof input === 'string') {\n                    input = this.lang().weekdaysParse(input);\n                    if (typeof input !== 'number') {\n                        return this;\n                    }\n                }\n                return this.add({ d : input - day });\n            } else {\n                return day;\n            }\n        },\n\n        month : function (input) {\n            var utc = this._isUTC ? 'UTC' : '',\n                dayOfMonth;\n\n            if (input != null) {\n                if (typeof input === 'string') {\n                    input = this.lang().monthsParse(input);\n                    if (typeof input !== 'number') {\n                        return this;\n                    }\n                }\n\n                dayOfMonth = this.date();\n                this.date(1);\n                this._d['set' + utc + 'Month'](input);\n                this.date(Math.min(dayOfMonth, this.daysInMonth()));\n\n                moment.updateOffset(this);\n                return this;\n            } else {\n                return this._d['get' + utc + 'Month']();\n            }\n        },\n\n        startOf: function (units) {\n            units = normalizeUnits(units);\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoweek':\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n\n            // weeks are a special case\n            if (units === 'week') {\n                this.weekday(0);\n            } else if (units === 'isoweek') {\n                this.isoWeekday(1);\n            }\n\n            return this;\n        },\n\n        endOf: function (units) {\n            units = normalizeUnits(units);\n            return this.startOf(units).add((units === 'isoweek' ? 'week' : units), 1).subtract('ms', 1);\n        },\n\n        isAfter: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) > +moment(input).startOf(units);\n        },\n\n        isBefore: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) < +moment(input).startOf(units);\n        },\n\n        isSame: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) === +moment(input).startOf(units);\n        },\n\n        min: function (other) {\n            other = moment.apply(null, arguments);\n            return other < this ? this : other;\n        },\n\n        max: function (other) {\n            other = moment.apply(null, arguments);\n            return other > this ? this : other;\n        },\n\n        zone : function (input) {\n            var offset = this._offset || 0;\n            if (input != null) {\n                if (typeof input === \"string\") {\n                    input = timezoneMinutesFromString(input);\n                }\n                if (Math.abs(input) < 16) {\n                    input = input * 60;\n                }\n                this._offset = input;\n                this._isUTC = true;\n                if (offset !== input) {\n                    addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, true);\n                }\n            } else {\n                return this._isUTC ? offset : this._d.getTimezoneOffset();\n            }\n            return this;\n        },\n\n        zoneAbbr : function () {\n            return this._isUTC ? \"UTC\" : \"\";\n        },\n\n        zoneName : function () {\n            return this._isUTC ? \"Coordinated Universal Time\" : \"\";\n        },\n\n        hasAlignedHourOffset : function (input) {\n            if (!input) {\n                input = 0;\n            }\n            else {\n                input = moment(input).zone();\n            }\n\n            return (this.zone() - input) % 60 === 0;\n        },\n\n        daysInMonth : function () {\n            return moment.utc([this.year(), this.month() + 1, 0]).date();\n        },\n\n        dayOfYear : function (input) {\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;\n            return input == null ? dayOfYear : this.add(\"d\", (input - dayOfYear));\n        },\n\n        weekYear : function (input) {\n            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;\n            return input == null ? year : this.add(\"y\", (input - year));\n        },\n\n        isoWeekYear : function (input) {\n            var year = weekOfYear(this, 1, 4).year;\n            return input == null ? year : this.add(\"y\", (input - year));\n        },\n\n        week : function (input) {\n            var week = this.lang().week(this);\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        isoWeek : function (input) {\n            var week = weekOfYear(this, 1, 4).week;\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        weekday : function (input) {\n            var weekday = (this._d.getDay() + 7 - this.lang()._week.dow) % 7;\n            return input == null ? weekday : this.add(\"d\", input - weekday);\n        },\n\n        isoWeekday : function (input) {\n            // behaves the same as moment#day except\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n            // as a setter, sunday should belong to the previous week.\n            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units.toLowerCase()]();\n        },\n\n        set : function (units, value) {\n            units = normalizeUnits(units);\n            this[units.toLowerCase()](value);\n        },\n\n        // If passed a language key, it will set the language for this\n        // instance.  Otherwise, it will return the language configuration\n        // variables for this instance.\n        lang : function (key) {\n            if (key === undefined) {\n                return this._lang;\n            } else {\n                this._lang = getLangDefinition(key);\n                return this;\n            }\n        }\n    });\n\n    // helper for adding shortcuts\n    function makeGetterAndSetter(name, key) {\n        moment.fn[name] = moment.fn[name + 's'] = function (input) {\n            var utc = this._isUTC ? 'UTC' : '';\n            if (input != null) {\n                this._d['set' + utc + key](input);\n                moment.updateOffset(this);\n                return this;\n            } else {\n                return this._d['get' + utc + key]();\n            }\n        };\n    }\n\n    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)\n    for (i = 0; i < proxyGettersAndSetters.length; i ++) {\n        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);\n    }\n\n    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')\n    makeGetterAndSetter('year', 'FullYear');\n\n    // add plural methods\n    moment.fn.days = moment.fn.day;\n    moment.fn.months = moment.fn.month;\n    moment.fn.weeks = moment.fn.week;\n    moment.fn.isoWeeks = moment.fn.isoWeek;\n\n    // add aliased format methods\n    moment.fn.toJSON = moment.fn.toISOString;\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    extend(moment.duration.fn = Duration.prototype, {\n\n        _bubble : function () {\n            var milliseconds = this._milliseconds,\n                days = this._days,\n                months = this._months,\n                data = this._data,\n                seconds, minutes, hours, years;\n\n            // The following code bubbles up values, see the tests for\n            // examples of what that means.\n            data.milliseconds = milliseconds % 1000;\n\n            seconds = absRound(milliseconds / 1000);\n            data.seconds = seconds % 60;\n\n            minutes = absRound(seconds / 60);\n            data.minutes = minutes % 60;\n\n            hours = absRound(minutes / 60);\n            data.hours = hours % 24;\n\n            days += absRound(hours / 24);\n            data.days = days % 30;\n\n            months += absRound(days / 30);\n            data.months = months % 12;\n\n            years = absRound(months / 12);\n            data.years = years;\n        },\n\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              (this._months % 12) * 2592e6 +\n              ~~(this._months / 12) * 31536e6;\n        },\n\n        humanize : function (withSuffix) {\n            var difference = +this,\n                output = relativeTime(difference, !withSuffix, this.lang());\n\n            if (withSuffix) {\n                output = this.lang().pastFuture(difference, output);\n            }\n\n            return this.lang().postformat(output);\n        },\n\n        add : function (input, val) {\n            // supports only 2.0-style add(1, 's') or add(moment)\n            var dur = moment.duration(input, val);\n\n            this._milliseconds += dur._milliseconds;\n            this._days += dur._days;\n            this._months += dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur = moment.duration(input, val);\n\n            this._milliseconds -= dur._milliseconds;\n            this._days -= dur._days;\n            this._months -= dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units.toLowerCase() + 's']();\n        },\n\n        as : function (units) {\n            units = normalizeUnits(units);\n            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();\n        },\n\n        lang : moment.fn.lang\n    });\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    function makeDurationAsGetter(name, factor) {\n        moment.duration.fn['as' + name] = function () {\n            return +this / factor;\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationAsGetter(i, unitMillisecondFactors[i]);\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    makeDurationAsGetter('Weeks', 6048e5);\n    moment.duration.fn.asMonths = function () {\n        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;\n    };\n\n\n    /************************************\n        Default Lang\n    ************************************/\n\n\n    // Set default language, other languages will inherit from English.\n    moment.lang('en', {\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    /* EMBED_LANGUAGES */\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n    }\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `moment` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        this['moment'] = moment;\n    }\n    /*global define:false */\n    if (typeof define === \"function\" && define.amd) {\n        define(\"moment\", [], function () {\n            return moment;\n        });\n    }\n}).call(this);\n","//This file exposes moment so that it works with Meteor 0.6.5's package system.\nif (typeof Package !== \"undefined\") {\n  moment = this.moment;\n}\n"]}