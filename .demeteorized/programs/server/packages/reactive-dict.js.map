{"version":3,"file":"/packages/reactive-dict.js","sources":["reactive-dict/reactive-dict.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,yE;AACA,mE;AACA,kC;AACA,0B;AACA,uB;AACA,gC;AACA,E;AACA,mC;AACA,6D;AACA,qB;AACA,iC;AACA,E;;AAEA,qE;AACA,qB;AACA,yC;AACA,kD;AACA,yC;AACA,8C;AACA,E;;AAEA,kC;AACA,8B;AACA,oB;;AAEA,6B;;AAEA,yC;AACA,mE;AACA,qC;AACA,a;AACA,2B;;AAEA,gC;AACA,uB;AACA,M;;AAEA,+B;AACA,iC;AACA,0D;AACA,6C;AACA,K;AACA,I;;AAEA,qC;AACA,oB;AACA,iE;AACA,uF;AACA,yC;AACA,uC;AACA,2B;AACA,K;AACA,I;;AAEA,uB;AACA,oB;AACA,yB;AACA,+B;AACA,iC;AACA,I;;AAEA,iC;AACA,oB;;AAEA,2E;AACA,2E;;AAEA,wE;AACA,sE;AACA,4E;AACA,0E;AACA,+E;AACA,oD;AACA,M;AACA,2E;AACA,qB;AACA,oC;AACA,oC;AACA,qC;AACA,uC;AACA,mC;AACA,mD;AACA,uB;AACA,mE;AACA,2C;;AAEA,sB;AACA,2B;;AAEA,2D;AACA,sE;;AAEA,mE;AACA,kB;AACA,uC;AACA,2E;AACA,qD;AACA,wE;AACA,2D;AACA,W;AACA,O;AACA,K;;AAEA,6B;AACA,gE;AACA,yC;AACA,I;;AAEA,8B;AACA,oB;AACA,iC;AACA,8C;AACA,kC;AACA,K;AACA,I;;AAEA,8D;AACA,iE;AACA,iC;AACA,gD;AACA,qB;AACA,G;AACA,G","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\n// migrationData, if present, should be data previously returned from\n// getMigrationData()\nReactiveDict = function (migrationData) {\n  this.keys = migrationData || {}; // key -> value\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  set: function (key, value) {\n    var self = this;\n\n    value = stringify(value);\n\n    var oldSerializedValue = 'undefined';\n    if (_.has(self.keys, key)) oldSerializedValue = self.keys[key];\n    if (value === oldSerializedValue)\n      return;\n    self.keys[key] = value;\n\n    var changed = function (v) {\n      v && v.changed();\n    };\n\n    changed(self.keyDeps[key]);\n    if (self.keyValueDeps[key]) {\n      changed(self.keyValueDeps[key][oldSerializedValue]);\n      changed(self.keyValueDeps[key][value]);\n    }\n  },\n\n  setDefault: function (key, value) {\n    var self = this;\n    // for now, explicitly check for undefined, since there is no\n    // ReactiveDict.clear().  Later we might have a ReactiveDict.clear(), in which case\n    // we should check if it has the key.\n    if (self.keys[key] === undefined) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // XXX hardcoded awareness of the 'mongo-livedata' package is not ideal\n    var ObjectID = Package['mongo-livedata'] && Meteor.Collection.ObjectID;\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null)\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    var serializedValue = stringify(value);\n\n    if (Deps.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Deps.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Deps.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Deps.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n"]}