{"version":3,"file":"/packages/deps.js","sources":["deps/deps.js","deps/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,kD;AACA,kD;AACA,kD;;AAEA,U;;AAEA,sC;AACA,oB;;AAEA,kD;AACA,+B;;AAEA,0C;AACA,8B;AACA,qB;AACA,E;;AAEA,8B;AACA,+D;AACA,yD;AACA,0E;AACA,4B;AACA,E;;AAEA,e;AACA,4D;AACA,6B;AACA,sE;AACA,sB;AACA,qC;AACA,oB;AACA,kE;AACA,+D;AACA,kE;AACA,iD;AACA,sB;;AAEA,6B;;AAEA,gC;AACA,oB;AACA,8B;AACA,qB;AACA,G;AACA,E;;AAEA,sD;AACA,0C;AACA,oC;;AAEA,E;AACA,2C;AACA,E;AACA,yC;AACA,gC;AACA,oB;AACA,mE;AACA,kC;;AAEA,kB;;AAEA,gD;AACA,uB;;AAEA,oD;AACA,2B;;AAEA,iD;AACA,uB;;AAEA,sB;AACA,mC;AACA,yD;AACA,2D;AACA,wB;AACA,iB;AACA,4B;;AAEA,qB;AACA,O;AACA,oB;AACA,oB;AACA,a;AACA,0B;AACA,gB;AACA,kB;AACA,G;AACA,E;;AAEA,sC;;AAEA,qD;AACA,8B;AACA,oB;;AAEA,gC;AACA,0D;;AAEA,yB;AACA,oC;AACA,gB;AACA,S;AACA,M;;AAEA,yB;AACA,U;AACA,Q;AACA,0C;AACA,I;;AAEA,mD;AACA,2B;AACA,oB;AACA,6B;AACA,0D;AACA,yD;AACA,kD;AACA,uB;AACA,uC;AACA,O;;AAEA,8B;;AAEA,+C;AACA,mC;AACA,gE;AACA,mD;AACA,uC;AACA,K;AACA,I;;AAEA,6C;AACA,qB;AACA,yB;AACA,0B;AACA,wB;AACA,K;AACA,I;;AAEA,yB;AACA,oB;AACA,6B;;AAEA,2C;AACA,gC;AACA,sC;AACA,qB;AACA,S;AACA,uB;AACA,e;AACA,sC;AACA,wB;AACA,K;AACA,I;;AAEA,2B;AACA,oB;;AAEA,6B;AACA,gD;AACA,W;AACA,wB;AACA,mB;AACA,6E;AACA,O;AACA,gE;AACA,iE;AACA,kC;AACA,Q;AACA,kE;AACA,e;AACA,K;AACA,8B;AACA,G;AACA,G;;AAEA,E;AACA,0C;AACA,E;AACA,+B;AACA,4B;AACA,E;;AAEA,qC;AACA,8C;AACA,I;AACA,wD;AACA,wE;AACA,oE;AACA,uC;AACA,kC;AACA,wB;AACA,wB;AACA,qB;;AAEA,4C;AACA,K;AACA,oB;AACA,6B;AACA,yC;AACA,6C;AACA,4C;AACA,wC;AACA,S;AACA,kB;AACA,K;AACA,iB;AACA,I;;AAEA,+C;AACA,wB;AACA,oB;AACA,wC;AACA,4C;AACA,I;;AAEA,qD;AACA,8B;AACA,oB;AACA,uC;AACA,kB;AACA,iB;AACA,G;AACA,G;;AAEA,gB;AACA,uC;AACA,sB;AACA,kE;AACA,+D;AACA,8D;AACA,8D;AACA,iE;AACA,2C;AACA,M;AACA,wD;AACA,gB;AACA,8D;;AAEA,kB;AACA,yD;;AAEA,mB;AACA,qB;;AAEA,wC;AACA,wC;;AAEA,2C;AACA,sC;AACA,+B;;AAEA,iD;AACA,0B;;AAEA,uC;AACA,kD;AACA,uC;AACA,+C;AACA,a;AACA,iB;AACA,qB;AACA,kE;AACA,6C;AACA,S;AACA,O;AACA,K;;AAEA,oB;AACA,sB;AACA,I;;AAEA,yC;AACA,I;AACA,4D;AACA,yB;AACA,I;AACA,0D;AACA,I;AACA,qD;AACA,qE;AACA,yB;AACA,gC;AACA,mE;;AAEA,mC;AACA,6D;;AAEA,oB;AACA,qC;AACA,iB;AACA,S;;AAEA,a;AACA,I;;AAEA,6C;AACA,I;AACA,oE;AACA,kE;AACA,yE;AACA,oC;AACA,6B;AACA,2C;AACA,gC;AACA,S;AACA,iB;AACA,e;AACA,sC;AACA,K;AACA,I;;AAEA,qD;AACA,kC;AACA,+D;AACA,e;AACA,uD;AACA,sB;AACA,sC;AACA,c;AACA,oC;AACA,kC;AACA,S;AACA,iB;AACA,M;AACA,6C;AACA,8B;AACA,I;;AAEA,8C;AACA,8B;AACA,sB;AACA,yE;;AAEA,4C;AACA,I;;AAEA,4C;AACA,4B;AACA,gC;AACA,mB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACtVA,wC;;AAEA,uE;AACA,gB;AACA,wB;AACA,0B;AACA,8B;;AAEA,+E;AACA,sC;AACA,wB;AACA,oC;;AAEA,mD;AACA,wB;AACA,4B;AACA,oB;AACA,E","sourcesContent":["//////////////////////////////////////////////////\n// Package docs at http://docs.meteor.com/#deps //\n//////////////////////////////////////////////////\n\nDeps = {};\n\n// http://docs.meteor.com/#deps_active\nDeps.active = false;\n\n// http://docs.meteor.com/#deps_currentcomputation\nDeps.currentComputation = null;\n\nvar setCurrentComputation = function (c) {\n  Deps.currentComputation = c;\n  Deps.active = !! c;\n};\n\nvar _debugFunc = function () {\n  // lazy evaluation because `Meteor` does not exist right away\n  return (typeof Meteor !== \"undefined\" ? Meteor._debug :\n          ((typeof console !== \"undefined\") && console.log ? console.log :\n           function () {}));\n};\n\nvar nextId = 1;\n// computations whose callbacks we should call at flush time\nvar pendingComputations = [];\n// `true` if a Deps.flush is scheduled, or if we are in Deps.flush now\nvar willFlush = false;\n// `true` if we are in Deps.flush now\nvar inFlush = false;\n// `true` if we are computing a computation now, either first time\n// or recompute.  This matches Deps.active unless we are inside\n// Deps.nonreactive, which nullfies currentComputation even though\n// an enclosing computation may still be running.\nvar inCompute = false;\n\nvar afterFlushCallbacks = [];\n\nvar requireFlush = function () {\n  if (! willFlush) {\n    setTimeout(Deps.flush, 0);\n    willFlush = true;\n  }\n};\n\n// Deps.Computation constructor is visible but private\n// (throws an error if you try to call it)\nvar constructingComputation = false;\n\n//\n// http://docs.meteor.com/#deps_computation\n//\nDeps.Computation = function (f, parent) {\n  if (! constructingComputation)\n    throw new Error(\n      \"Deps.Computation constructor is private; use Deps.autorun\");\n  constructingComputation = false;\n\n  var self = this;\n\n  // http://docs.meteor.com/#computation_stopped\n  self.stopped = false;\n\n  // http://docs.meteor.com/#computation_invalidated\n  self.invalidated = false;\n\n  // http://docs.meteor.com/#computation_firstrun\n  self.firstRun = true;\n\n  self._id = nextId++;\n  self._onInvalidateCallbacks = [];\n  // the plan is at some point to use the parent relation\n  // to constrain the order that computations are processed\n  self._parent = parent;\n  self._func = f;\n  self._recomputing = false;\n\n  var errored = true;\n  try {\n    self._compute();\n    errored = false;\n  } finally {\n    self.firstRun = false;\n    if (errored)\n      self.stop();\n  }\n};\n\n_.extend(Deps.Computation.prototype, {\n\n  // http://docs.meteor.com/#computation_oninvalidate\n  onInvalidate: function (f) {\n    var self = this;\n\n    if (typeof f !== 'function')\n      throw new Error(\"onInvalidate requires a function\");\n\n    var g = function () {\n      Deps.nonreactive(function () {\n        f(self);\n      });\n    };\n\n    if (self.invalidated)\n      g();\n    else\n      self._onInvalidateCallbacks.push(g);\n  },\n\n  // http://docs.meteor.com/#computation_invalidate\n  invalidate: function () {\n    var self = this;\n    if (! self.invalidated) {\n      // if we're currently in _recompute(), don't enqueue\n      // ourselves, since we'll rerun immediately anyway.\n      if (! self._recomputing && ! self.stopped) {\n        requireFlush();\n        pendingComputations.push(this);\n      }\n\n      self.invalidated = true;\n\n      // callbacks can't add callbacks, because\n      // self.invalidated === true.\n      for(var i = 0, f; f = self._onInvalidateCallbacks[i]; i++)\n        f(); // already bound with self as argument\n      self._onInvalidateCallbacks = [];\n    }\n  },\n\n  // http://docs.meteor.com/#computation_stop\n  stop: function () {\n    if (! this.stopped) {\n      this.stopped = true;\n      this.invalidate();\n    }\n  },\n\n  _compute: function () {\n    var self = this;\n    self.invalidated = false;\n\n    var previous = Deps.currentComputation;\n    setCurrentComputation(self);\n    var previousInCompute = inCompute;\n    inCompute = true;\n    try {\n      self._func(self);\n    } finally {\n      setCurrentComputation(previous);\n      inCompute = false;\n    }\n  },\n\n  _recompute: function () {\n    var self = this;\n\n    self._recomputing = true;\n    while (self.invalidated && ! self.stopped) {\n      try {\n        self._compute();\n      } catch (e) {\n        _debugFunc()(\"Exception from Deps recompute:\", e.stack || e.message);\n      }\n      // If _compute() invalidated us, we run again immediately.\n      // A computation that invalidates itself indefinitely is an\n      // infinite loop, of course.\n      //\n      // We could put an iteration counter here and catch run-away\n      // loops.\n    }\n    self._recomputing = false;\n  }\n});\n\n//\n// http://docs.meteor.com/#deps_dependency\n//\nDeps.Dependency = function () {\n  this._dependentsById = {};\n};\n\n_.extend(Deps.Dependency.prototype, {\n  // http://docs.meteor.com/#dependency_depend\n  //\n  // Adds `computation` to this set if it is not already\n  // present.  Returns true if `computation` is a new member of the set.\n  // If no argument, defaults to currentComputation, or does nothing\n  // if there is no currentComputation.\n  depend: function (computation) {\n    if (! computation) {\n      if (! Deps.active)\n        return false;\n\n      computation = Deps.currentComputation;\n    }\n    var self = this;\n    var id = computation._id;\n    if (! (id in self._dependentsById)) {\n      self._dependentsById[id] = computation;\n      computation.onInvalidate(function () {\n        delete self._dependentsById[id];\n      });\n      return true;\n    }\n    return false;\n  },\n\n  // http://docs.meteor.com/#dependency_changed\n  changed: function () {\n    var self = this;\n    for (var id in self._dependentsById)\n      self._dependentsById[id].invalidate();\n  },\n\n  // http://docs.meteor.com/#dependency_hasdependents\n  hasDependents: function () {\n    var self = this;\n    for(var id in self._dependentsById)\n      return true;\n    return false;\n  }\n});\n\n_.extend(Deps, {\n  // http://docs.meteor.com/#deps_flush\n  flush: function () {\n    // Nested flush could plausibly happen if, say, a flush causes\n    // DOM mutation, which causes a \"blur\" event, which runs an\n    // app event handler that calls Deps.flush.  At the moment\n    // Spark blocks event handlers during DOM mutation anyway,\n    // because the LiveRange tree isn't valid.  And we don't have\n    // any useful notion of a nested flush.\n    //\n    // https://app.asana.com/0/159908330244/385138233856\n    if (inFlush)\n      throw new Error(\"Can't call Deps.flush while flushing\");\n\n    if (inCompute)\n      throw new Error(\"Can't flush inside Deps.autorun\");\n\n    inFlush = true;\n    willFlush = true;\n\n    while (pendingComputations.length ||\n           afterFlushCallbacks.length) {\n\n      // recompute all pending computations\n      var comps = pendingComputations;\n      pendingComputations = [];\n\n      for (var i = 0, comp; comp = comps[i]; i++)\n        comp._recompute();\n\n      if (afterFlushCallbacks.length) {\n        // call one afterFlush callback, which may\n        // invalidate more computations\n        var func = afterFlushCallbacks.shift();\n        try {\n          func();\n        } catch (e) {\n          _debugFunc()(\"Exception from Deps afterFlush function:\",\n                       e.stack || e.message);\n        }\n      }\n    }\n\n    inFlush = false;\n    willFlush = false;\n  },\n\n  // http://docs.meteor.com/#deps_autorun\n  //\n  // Run f(). Record its dependencies. Rerun it whenever the\n  // dependencies change.\n  //\n  // Returns a new Computation, which is also passed to f.\n  //\n  // Links the computation to the current computation\n  // so that it is stopped if the current computation is invalidated.\n  autorun: function (f) {\n    if (typeof f !== 'function')\n      throw new Error('Deps.autorun requires a function argument');\n\n    constructingComputation = true;\n    var c = new Deps.Computation(f, Deps.currentComputation);\n\n    if (Deps.active)\n      Deps.onInvalidate(function () {\n        c.stop();\n      });\n\n    return c;\n  },\n\n  // http://docs.meteor.com/#deps_nonreactive\n  //\n  // Run `f` with no current computation, returning the return value\n  // of `f`.  Used to turn off reactivity for the duration of `f`,\n  // so that reactive data sources accessed by `f` will not result in any\n  // computations being invalidated.\n  nonreactive: function (f) {\n    var previous = Deps.currentComputation;\n    setCurrentComputation(null);\n    try {\n      return f();\n    } finally {\n      setCurrentComputation(previous);\n    }\n  },\n\n  // Wrap `f` so that it is always run nonreactively.\n  _makeNonreactive: function (f) {\n    if (f.$isNonreactive) // avoid multiple layers of wrapping.\n      return f;\n    var nonreactiveVersion = function (/*arguments*/) {\n      var self = this;\n      var args = _.toArray(arguments);\n      var ret;\n      Deps.nonreactive(function () {\n        ret = f.apply(self, args);\n      });\n      return ret;\n    };\n    nonreactiveVersion.$isNonreactive = true;\n    return nonreactiveVersion;\n  },\n\n  // http://docs.meteor.com/#deps_oninvalidate\n  onInvalidate: function (f) {\n    if (! Deps.active)\n      throw new Error(\"Deps.onInvalidate requires a currentComputation\");\n\n    Deps.currentComputation.onInvalidate(f);\n  },\n\n  // http://docs.meteor.com/#deps_afterflush\n  afterFlush: function (f) {\n    afterFlushCallbacks.push(f);\n    requireFlush();\n  }\n});\n","// Deprecated (Deps-recated?) functions.\n\n// These functions used to be on the Meteor object (and worked slightly\n// differently).\n// XXX COMPAT WITH 0.5.7\nMeteor.flush = Deps.flush;\nMeteor.autorun = Deps.autorun;\n\n// We used to require a special \"autosubscribe\" call to reactively subscribe to\n// things. Now, it works with autorun.\n// XXX COMPAT WITH 0.5.4\nMeteor.autosubscribe = Deps.autorun;\n\n// This Deps API briefly existed in 0.5.8 and 0.5.9\n// XXX COMPAT WITH 0.5.9\nDeps.depend = function (d) {\n  return d.depend();\n};\n"]}