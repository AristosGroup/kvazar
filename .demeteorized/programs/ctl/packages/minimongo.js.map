{"version":3,"file":"/packages/minimongo.js","sources":["minimongo/minimongo.js","minimongo/selector.js","minimongo/projection.js","minimongo/modify.js","minimongo/diff.js","minimongo/id_map.js","minimongo/observe.js","minimongo/objectid.js","minimongo/selector_projection.js","minimongo/selector_modifier.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,+D;;AAEA,2E;;AAEA,mE;AACA,sF;;AAEA,mD;;AAEA,mC;AACA,mB;AACA,yD;;AAEA,sD;;AAEA,+C;;AAEA,oC;AACA,4E;AACA,uE;AACA,gE;AACA,0C;AACA,gD;AACA,oB;;AAEA,8E;AACA,2D;AACA,8B;;AAEA,qE;AACA,sB;AACA,E;;AAEA,yC;AACA,0D;AACA,mB;;AAEA,8D;AACA,8C;AACA,4B;AACA,sB;AACA,Q;AACA,uB;AACA,K;AACA,E;;AAEA,qC;AACA,6B;AACA,4B;AACA,W;AACA,E;;;AAGA,kD;AACA,kC;AACA,oB;AACA,oC;AACA,2B;AACA,mE;AACA,wB;AACA,E;AACA,mE;AACA,W;AACA,E;AACA,iE;AACA,iE;AACA,Q;AACA,E;AACA,6D;AACA,oC;AACA,Y;AACA,+D;AACA,oE;AACA,sE;AACA,0C;AACA,6B;AACA,kB;;AAEA,6D;AACA,E;;AAEA,8D;AACA,mE;AACA,kB;AACA,6B;;AAEA,+B;;AAEA,gD;AACA,0B;AACA,8D;AACA,uE;AACA,4B;AACA,U;AACA,uE;AACA,uB;AACA,oC;AACA,kE;;AAEA,iC;AACA,uE;AACA,0D;AACA,oE;AACA,G;AACA,2B;AACA,6B;AACA,+B;;AAEA,kB;AACA,wE;;AAEA,uD;AACA,+D;AACA,M;AACA,wC;;AAEA,8E;AACA,sE;AACA,yB;AACA,sB;;AAEA,+D;AACA,kC;AACA,+E;AACA,E;;AAEA,uD;AACA,kB;AACA,yB;AACA,sB;AACA,E;;AAEA,kE;AACA,6B;AACA,kB;;AAEA,oE;AACA,uE;AACA,8D;AACA,qE;AACA,sE;AACA,qE;AACA,uE;AACA,iB;AACA,0B;AACA,oB;;AAEA,iD;AACA,E;;AAEA,yE;AACA,kB;;AAEA,+B;AACA,gD;;AAEA,oB;AACA,kB;AACA,wB;AACA,oB;AACA,oB;AACA,0B;;AAEA,oD;AACA,4D;AACA,0B;AACA,mC;AACA,wB;AACA,iC;AACA,uD;AACA,sB;AACA,G;AACA,E;;AAEA,6D;AACA,kB;AACA,yB;AACA,E;;AAEA,qE;AACA,kB;AACA,e;AACA,sC;AACA,uD;AACA,K;AACA,a;AACA,E;;AAEA,sD;AACA,kB;AACA,e;AACA,+B;AACA,kB;AACA,K;AACA,a;AACA,E;;AAEA,sD;AACA,kB;;AAEA,oB;AACA,8C;AACA,+D;;AAEA,+B;AACA,gD;;AAEA,gC;AACA,E;;AAEA,kE;AACA,kB;AACA,6B;AACA,gF;AACA,wC;;AAEA,uD;AACA,iE;AACA,E;;AAEA,2E;AACA,+C;AACA,4E;AACA,4D;AACA,E;;AAEA,oE;AACA,2C;AACA,wE;AACA,+C;AACA,4E;AACA,+C;AACA,4E;;AAEA,yE;AACA,oC;AACA,E;;AAEA,2C;AACA,+C;;AAEA,sB;AACA,8B;AACA,mC;AACA,wB;AACA,qD;AACA,0C;AACA,qC;AACA,0B;AACA,8C;AACA,E;AACA,iD;AACA,yB;AACA,uD;AACA,E;AACA,kD;AACA,yC;AACA,E;AACA,mD;AACA,6E;AACA,sE;;AAEA,4C;AACA,+B;AACA,oB;AACA,qE;AACA,I;AACA,sC;AACA,oB;;AAEA,8E;;AAEA,2E;AACA,qE;;AAEA,iE;AACA,iB;AACA,qD;AACA,qC;AACA,6B;AACA,uB;AACA,mB;AACA,6C;AACA,0B;AACA,qC;AACA,M;AACA,Y;;AAEA,2E;AACA,Y;AACA,wB;AACA,uC;AACA,2C;AACA,K;AACA,iD;AACA,+B;AACA,mD;;AAEA,6E;AACA,0B;AACA,uE;AACA,gC;;AAEA,6E;AACA,Y;AACA,qE;AACA,a;AACA,8B;AACA,kC;AACA,2B;AACA,6B;;AAEA,6D;AACA,mE;AACA,gE;AACA,mB;AACA,S;;AAEA,sC;AACA,+D;AACA,mC;AACA,a;AACA,S;AACA,Q;AACA,M;AACA,iD;AACA,2D;AACA,kD;AACA,kB;AACA,+D;AACA,4D;AACA,K;;AAEA,gE;AACA,+C;AACA,sC;;AAEA,0B;AACA,oB;AACA,mD;AACA,qC;AACA,S;AACA,K;;AAEA,mD;AACA,sB;AACA,kC;AACA,yB;AACA,0B;AACA,8C;AACA,O;AACA,O;;AAEA,uC;AACA,mE;AACA,6D;AACA,2D;AACA,iE;AACA,6C;AACA,qC;AACA,sB;AACA,S;AACA,K;AACA,oE;AACA,mC;AACA,0C;;AAEA,kB;AACA,G;AACA,G;;AAEA,wE;AACA,E;AACA,gF;AACA,gF;AACA,S;AACA,E;AACA,gF;AACA,gC;AACA,sE;AACA,kB;;AAEA,kC;;AAEA,kC;AACA,yB;AACA,iE;AACA,sE;AACA,Y;AACA,kB;AACA,qB;;AAEA,wD;AACA,+D;AACA,kB;AACA,kC;AACA,U;AACA,gD;AACA,K;AACA,mB;AACA,G;;AAEA,wD;AACA,wC;AACA,uC;AACA,+B;AACA,kB;AACA,0B;AACA,U;AACA,0B;AACA,K;AACA,8C;AACA,mD;AACA,sC;AACA,qB;AACA,G;;AAEA,e;AACA,mB;;AAEA,kB;AACA,8B;;AAEA,iC;AACA,uE;AACA,2C;AACA,E;;AAEA,uE;AACA,oB;AACA,kF;AACA,kB;;AAEA,oB;AACA,gC;AACA,e;AACA,4C;;AAEA,mB;AACA,8B;AACA,wC;AACA,M;AACA,yE;AACA,8B;AACA,kC;AACA,8C;AACA,c;;AAEA,sE;AACA,iC;AACA,G;AACA,E;;AAEA,wE;AACA,2C;AACA,mE;AACA,4C;AACA,6D;AACA,kB;AACA,yB;;AAEA,2B;AACA,4D;AACA,0E;AACA,uE;AACA,oD;AACA,G;AACA,iD;;AAEA,2B;AACA,4D;;AAEA,oC;AACA,sB;;AAEA,8B;AACA,oC;AACA,iC;AACA,kC;AACA,gC;AACA,kD;AACA,qC;AACA,U;AACA,qD;AACA,K;AACA,G;;AAEA,6C;AACA,0B;AACA,2D;AACA,K;AACA,6B;;AAEA,0E;AACA,iB;AACA,e;AACA,8B;AACA,8B;AACA,O;AACA,iB;AACA,E;;AAEA,kE;AACA,kB;AACA,kB;;AAEA,8B;AACA,oE;;AAEA,gD;AACA,oE;AACA,oB;AACA,uC;AACA,mD;AACA,qE;AACA,4B;AACA,kE;AACA,2B;AACA,O;AACA,U;AACA,+B;AACA,8B;AACA,4B;AACA,wB;AACA,O;AACA,K;AACA,G;;AAEA,uB;AACA,2C;AACA,6B;AACA,wC;AACA,gD;AACA,wC;AACA,oD;AACA,uC;AACA,Y;AACA,uD;AACA,O;AACA,O;AACA,4C;AACA,+B;AACA,G;;AAEA,kE;AACA,yC;AACA,yC;AACA,c;AACA,4D;AACA,K;AACA,6C;AACA,kC;AACA,c;AACA,+C;AACA,K;AACA,6B;AACA,6B;AACA,e;AACA,8B;AACA,6B;AACA,O;AACA,gB;AACA,E;;AAEA,kE;AACA,4C;AACA,gF;AACA,kB;AACA,kD;AACA,uB;AACA,mB;AACA,G;AACA,6B;;AAEA,oE;;AAEA,iE;AACA,8E;AACA,8E;AACA,oE;AACA,wB;AACA,gC;AACA,8C;AACA,mE;AACA,6D;AACA,K;AACA,yB;;AAEA,sB;;AAEA,6B;AACA,4B;AACA,0B;AACA,2E;AACA,kC;AACA,qD;AACA,oB;AACA,yB;AACA,c;AACA,K;AACA,G;;AAEA,+C;AACA,kC;AACA,c;AACA,8C;AACA,mE;AACA,K;AACA,6B;;AAEA,4E;AACA,8E;AACA,2B;AACA,iB;AACA,4C;AACA,kE;AACA,+C;AACA,2C;AACA,sC;AACA,qC;AACA,oB;AACA,G;;AAEA,8E;AACA,0E;AACA,sB;AACA,a;AACA,8B;AACA,c;AACA,iC;AACA,M;AACA,iC;AACA,qC;AACA,U;AACA,yB;AACA,G;;AAEA,e;AACA,8B;AACA,6B;AACA,O;AACA,gB;AACA,E;;AAEA,uE;AACA,gF;AACA,W;AACA,gF;AACA,kB;AACA,oD;AACA,uB;AACA,iB;AACA,G;AACA,2D;AACA,iB;AACA,uB;AACA,gB;AACA,E;;AAEA,uD;AACA,8B;AACA,kB;;AAEA,0B;AACA,iC;AACA,kC;AACA,wB;AACA,kD;AACA,Y;AACA,8E;AACA,qC;AACA,gD;AACA,yE;AACA,K;AACA,G;;AAEA,iC;;AAEA,oC;;AAEA,6B;AACA,8B;AACA,qC;AACA,sC;;AAEA,kD;AACA,0E;AACA,8E;AACA,4E;AACA,6E;AACA,8E;AACA,2E;AACA,yB;AACA,0B;AACA,kC;AACA,kC;AACA,qD;AACA,kC;AACA,mD;AACA,iC;AACA,4D;AACA,K;AACA,G;AACA,E;;AAEA,mE;AACA,wD;AACA,E;AACA,kE;AACA,oE;;AAEA,0D;AACA,gC;AACA,oB;AACA,sB;AACA,wB;AACA,+C;AACA,8B;AACA,Y;AACA,kD;AACA,0C;AACA,oC;AACA,e;AACA,wB;AACA,U;AACA,oB;AACA,+C;AACA,K;AACA,iC;AACA,U;AACA,iC;AACA,+D;AACA,G;AACA,E;;AAEA,4D;AACA,sB;AACA,8D;AACA,2B;AACA,+B;AACA,U;AACA,oF;AACA,2B;AACA,6B;AACA,G;AACA,E;;AAEA,mE;AACA,0C;AACA,+D;AACA,uE;AACA,uB;AACA,oC;AACA,4C;AACA,iE;AACA,K;AACA,W;AACA,G;;AAEA,mE;;AAEA,gC;AACA,0C;AACA,oB;AACA,W;;AAEA,oE;AACA,Y;AACA,oC;AACA,oD;AACA,sC;AACA,6B;AACA,wC;AACA,a;AACA,sB;AACA,Q;AACA,kB;AACA,0D;AACA,G;AACA,E;;AAEA,uE;AACA,0E;AACA,wC;AACA,E;AACA,+E;AACA,yE;AACA,gF;AACA,0E;AACA,kE;AACA,kB;AACA,+B;AACA,6D;;AAEA,sB;AACA,sC;AACA,uD;AACA,G;AACA,E;;;AAGA,+D;AACA,qB;AACA,2E;AACA,gD;AACA,iC;AACA,e;AACA,2C;AACA,E;;AAEA,0E;AACA,gB;AACA,8D;AACA,4C;;AAEA,2B;AACA,8C;AACA,oD;AACA,6B;AACA,mC;AACA,Y;AACA,8B;AACA,K;AACA,G;AACA,e;AACA,E;;AAEA,oE;AACA,2B;AACA,sB;AACA,a;AACA,G;;AAEA,6D;AACA,8B;AACA,a;AACA,E;;AAEA,gF;AACA,2E;AACA,8E;AACA,+E;AACA,gF;AACA,yE;AACA,uB;AACA,uD;AACA,kB;AACA,2B;AACA,4E;AACA,4B;AACA,E;AACA,2D;AACA,kB;AACA,4B;AACA,sE;;AAEA,uC;AACA,8B;AACA,mB;AACA,E;;AAEA,8D;AACA,kB;AACA,0C;AACA,4B;AACA,W;AACA,0E;AACA,4E;AACA,6B;AACA,sC;AACA,W;AACA,8C;AACA,E;;AAEA,mE;AACA,+B;AACA,wD;AACA,6B;AACA,kB;AACA,W;;AAEA,sE;AACA,qB;;AAEA,yD;AACA,iC;AACA,kC;;AAEA,wD;AACA,G;AACA,E;;AAEA,6D;AACA,0D;AACA,sE;AACA,+D;AACA,yD;AACA,kB;AACA,yB;AACA,mB;AACA,W;;AAEA,mE;AACA,+D;AACA,sB;;AAEA,iC;AACA,kC;AACA,2E;AACA,wD;AACA,sC;AACA,mE;AACA,kC;AACA,G;AACA,6B;AACA,E;;;AAGA,uB;AACA,8C;AACA,gD;AACA,wB;AACA,sC;AACA,oB;AACA,gB;AACA,6E;AACA,gF;AACA,yF;AACA,qG;AACA,sB;AACA,Y;AACA,uD;AACA,K;AACA,gC;AACA,e;AACA,qD;AACA,4F;AACA,wC;AACA,oC;AACA,G;AACA,E;;;AAGA,uB;AACA,0C;AACA,kB;AACA,c;AACA,0B;AACA,qB;AACA,uC;AACA,wB;AACA,uC;AACA,oC;AACA,sD;AACA,6C;AACA,U;AACA,c;AACA,G;AACA,E;;AAEA,gE;AACA,kB;AACA,gD;AACA,qC;AACA,8B;AACA,M;AACA,sC;AACA,0B;AACA,M;AACA,iD;AACA,+C;AACA,iC;AACA,K;AACA,K;AACA,gB;AACA,E;;AAEA,sD;AACA,8C;AACA,sC;AACA,8C;AACA,kD;AACA,mE;AACA,K;AACA,E;;AAEA,+D;AACA,6C;AACA,8C;AACA,yD;AACA,6B;AACA,kD;AACA,qD;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;;;ACl+BA,+E;AACA,U;AACA,4B;AACA,4C;AACA,E;;AAEA,mC;AACA,iB;AACA,uB;AACA,c;AACA,E;;AAEA,uC;AACA,W;AACA,gB;AACA,mC;AACA,E;;AAEA,4C;AACA,oC;AACA,qC;AACA,qD;AACA,0C;AACA,yC;AACA,sD;AACA,iE;AACA,K;AACA,G;AACA,qD;AACA,E;;AAEA,uE;AACA,oD;AACA,6B;AACA,8C;AACA,+C;AACA,S;AACA,M;AACA,G;;AAEA,0E;AACA,mC;AACA,6B;AACA,8C;AACA,mC;AACA,S;AACA,M;AACA,G;;AAEA,wC;AACA,6B;AACA,8B;AACA,qB;AACA,8C;AACA,qC;AACA,S;AACA,M;AACA,G;;AAEA,+E;AACA,+B;AACA,6B;AACA,0B;AACA,qB;AACA,kD;AACA,2D;AACA,S;AACA,M;AACA,G;;AAEA,gD;AACA,oC;AACA,+B;AACA,wD;AACA,4C;AACA,8D;AACA,4C;AACA,uD;AACA,yC;AACA,O;AACA,kC;AACA,oD;AACA,6B;AACA,S;AACA,M;AACA,G;;AAEA,8E;AACA,c;AACA,2B;AACA,4C;AACA,yD;AACA,O;AACA,I;AACA,E;;AAEA,wC;AACA,yB;AACA,oD;AACA,wD;AACA,0D;AACA,uE;AACA,2D;AACA,qC;AACA,uD;AACA,gC;AACA,S;AACA,M;AACA,I;;AAEA,mD;AACA,wD;AACA,0D;AACA,uE;AACA,2D;AACA,qC;AACA,uD;AACA,gC;AACA,S;AACA,M;AACA,I;;AAEA,oD;AACA,wD;AACA,0D;AACA,uE;AACA,2D;AACA,qC;AACA,uD;AACA,iC;AACA,S;AACA,M;AACA,I;;AAEA,qC;AACA,+C;AACA,0D;AACA,K;AACA,2B;AACA,qC;AACA,M;AACA,G;AACA,E;;AAEA,+C;AACA,wB;AACA,mE;AACA,uC;AACA,gC;AACA,oD;AACA,mD;AACA,uB;AACA,6B;AACA,0B;AACA,uD;AACA,6B;AACA,kD;AACA,qD;AACA,0D;AACA,W;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,0B;AACA,wD;AACA,6B;AACA,0B;AACA,qB;AACA,mD;AACA,iD;AACA,iE;AACA,W;AACA,S;AACA,M;AACA,I;;AAEA,6B;AACA,6B;AACA,8C;AACA,uD;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,6B;AACA,8C;AACA,wD;AACA,S;AACA,M;AACA,I;;AAEA,6B;AACA,6B;AACA,8C;AACA,uD;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,6B;AACA,8C;AACA,wD;AACA,S;AACA,M;AACA,I;;AAEA,6B;AACA,6B;AACA,oD;AACA,qD;AACA,S;AACA,M;AACA,I;;AAEA,8B;AACA,0B;AACA,wD;AACA,kD;AACA,kC;AACA,oD;AACA,8B;AACA,oB;AACA,qC;AACA,M;AACA,I;;AAEA,iC;AACA,6B;AACA,+C;AACA,M;AACA,I;;AAEA,8B;AACA,6B;AACA,+B;AACA,6B;AACA,8C;AACA,yC;AACA,S;AACA,M;AACA,I;;AAEA,+B;AACA,6B;AACA,wD;AACA,M;AACA,I;;AAEA,+B;AACA,6B;AACA,2C;AACA,8B;AACA,qB;AACA,+E;AACA,wD;AACA,8C;AACA,uD;AACA,S;AACA,M;AACA,I;;AAEA,2C;AACA,qC;AACA,gC;AACA,4E;AACA,uD;AACA,6C;;AAEA,6E;AACA,8E;AACA,qD;AACA,iC;AACA,6E;;AAEA,6E;AACA,iD;AACA,8C;AACA,oC;AACA,K;;AAEA,6B;AACA,8B;AACA,qB;AACA,8C;AACA,+B;AACA,S;AACA,M;AACA,I;;AAEA,kC;AACA,sD;AACA,6C;AACA,I;;AAEA,sD;AACA,2D;AACA,kC;AACA,0B;AACA,qB;AACA,wC;AACA,+B;AACA,S;AACA,M;AACA,I;;AAEA,iD;AACA,mE;AACA,kC;AACA,kC;AACA,M;AACA,I;;AAEA,kD;AACA,6C;AACA,0B;AACA,0B;AACA,0B;AACA,0B;AACA,mC;AACA,oB;AACA,sC;AACA,K;AACA,8E;AACA,sD;AACA,4D;AACA,mC;AACA,sC;AACA,K;AACA,oD;AACA,sF;AACA,oF;AACA,4D;AACA,kC;AACA,sB;AACA,qB;AACA,kB;AACA,uD;AACA,gB;AACA,wB;AACA,+E;AACA,+E;AACA,wB;AACA,qC;AACA,uD;AACA,c;AACA,4E;AACA,yC;AACA,gB;AACA,O;AACA,6E;AACA,2C;AACA,mB;AACA,8B;AACA,gC;AACA,yC;AACA,O;;AAEA,kD;AACA,wB;AACA,qB;;AAEA,oE;AACA,M;AACA,I;;AAEA,+B;AACA,+C;AACA,uC;AACA,G;AACA,E;;AAEA,yC;AACA,sB;AACA,wE;;AAEA,uB;AACA,8B;AACA,e;AACA,8B;AACA,e;AACA,+B;AACA,e;AACA,mB;AACA,e;AACA,mB;AACA,gB;AACA,4B;AACA,gB;AACA,gC;AACA,6C;AACA,gB;AACA,0B;AACA,e;AACA,0B;AACA,e;AACA,+C;AACA,e;AACA,uB;;AAEA,qC;AACA,iB;AACA,qC;AACA,oC;AACA,oB;AACA,kB;AACA,kB;AACA,I;;AAEA,mE;AACA,2B;AACA,yD;AACA,I;;AAEA,mE;AACA,oB;AACA,4B;AACA,mF;AACA,iE;AACA,kC;AACA,wB;AACA,gC;AACA,0B;AACA,0B;AACA,0B;AACA,yB;AACA,0B;AACA,8B;AACA,4B;AACA,wB;AACA,wB;AACA,wB;AACA,0B;AACA,8B;AACA,2B;AACA,uC;AACA,2B;AACA,8B;AACA,mC;AACA,8B;AACA,gB;AACA,I;;AAEA,kE;AACA,sE;AACA,qE;AACA,wB;AACA,yB;AACA,wB;AACA,sC;AACA,wB;AACA,e;AACA,yC;AACA,yC;AACA,+C;AACA,+C;AACA,kB;AACA,8B;AACA,kB;AACA,0E;AACA,kB;AACA,yD;AACA,+B;AACA,2B;AACA,kB;AACA,0B;AACA,0B;AACA,K;AACA,2B;AACA,2B;AACA,kB;AACA,sB;AACA,sB;AACA,K;;AAEA,2B;AACA,mB;AACA,2B;AACA,4C;AACA,6B;AACA,mE;AACA,qC;AACA,qB;AACA,8B;AACA,wB;AACA,6B;AACA,S;AACA,mB;AACA,Q;AACA,+D;AACA,K;AACA,4B;AACA,8B;AACA,2B;AACA,2C;AACA,2B;AACA,mB;AACA,oD;AACA,oB;AACA,mB;AACA,O;AACA,K;AACA,6B;AACA,6E;AACA,e;AACA,gC;AACA,mC;AACA,sC;AACA,wB;AACA,oB;AACA,wB;AACA,mB;AACA,O;AACA,e;AACA,K;AACA,8B;AACA,8B;AACA,wB;AACA,K;AACA,0B;AACA,e;AACA,4B;AACA,wE;AACA,0B;AACA,iB;AACA,qC;AACA,yB;AACA,oB;AACA,yB;AACA,kB;AACA,kB;AACA,qC;AACA,qE;AACA,wC;AACA,G;AACA,E;;AAEA,+D;AACA,Y;AACA,kD;AACA,2D;AACA,E;;AAEA,sD;AACA,E;AACA,yE;AACA,gF;AACA,4E;AACA,4E;AACA,gF;AACA,yE;AACA,kD;AACA,E;AACA,sD;AACA,0D;AACA,0D;AACA,0C;AACA,4C;AACA,4C;AACA,gC;AACA,sD;AACA,qC;AACA,uC;AACA,2B;AACA,gB;AACA,U;AACA,uC;AACA,2C;AACA,2D;AACA,uE;AACA,4C;AACA,G;;AAEA,yB;AACA,0C;AACA,yB;AACA,gC;;AAEA,4C;AACA,oB;AACA,0B;;AAEA,uE;AACA,uD;AACA,yB;;AAEA,+E;AACA,2E;AACA,yB;AACA,M;AACA,0E;AACA,wE;AACA,sC;AACA,kD;AACA,2E;AACA,8C;AACA,gC;AACA,2E;AACA,I;AACA,E;;AAEA,sD;AACA,8D;AACA,2B;AACA,mD;AACA,mC;AACA,6E;AACA,mC;AACA,yC;AACA,iE;AACA,2B;AACA,kE;AACA,Y;AACA,mE;AACA,6B;AACA,+D;AACA,qD;AACA,8C;AACA,gF;AACA,gF;AACA,2C;AACA,U;AACA,gF;AACA,6E;AACA,kE;AACA,4E;AACA,0C;AACA,U;AACA,uE;AACA,0D;AACA,2E;AACA,2E;AACA,oB;AACA,sC;AACA,+D;AACA,2C;AACA,8B;AACA,sD;AACA,kD;AACA,W;AACA,S;AACA,K;AACA,K;;;AAGA,mC;AACA,wE;AACA,+B;AACA,qB;AACA,gD;AACA,8B;AACA,O;AACA,I;AACA,E;;AAEA,iE;AACA,mE;AACA,c;AACA,gE;AACA,0D;AACA,mC;AACA,uD;;AAEA,mC;AACA,gD;AACA,2B;AACA,6C;AACA,M;AACA,G;;AAEA,4E;AACA,qE;AACA,4B;AACA,0D;AACA,0C;;AAEA,mD;AACA,4D;AACA,+B;AACA,qD;;AAEA,mD;AACA,E;;AAEA,wD;AACA,4B;AACA,wC;AACA,+B;AACA,E;AACA,iE;AACA,sE;AACA,0D;AACA,E;AACA,kE;AACA,kE;AACA,wD;;AAEA,wD;AACA,yB;;AAEA,8B;AACA,2C;AACA,wC;AACA,4B;AACA,+D;AACA,yB;AACA,W;AACA,c;AACA,4B;AACA,kE;AACA,0C;AACA,W;AACA,O;AACA,K;AACA,wC;AACA,2B;AACA,0B;AACA,yD;AACA,iC;AACA,S;AACA,K;AACA,U;AACA,kE;AACA,G;;AAEA,6E;AACA,sE;AACA,iC;AACA,4B;AACA,uC;AACA,iB;AACA,+D;AACA,M;;AAEA,gF;AACA,sE;AACA,2E;AACA,gF;AACA,c;AACA,sD;AACA,gB;AACA,qB;AACA,+E;AACA,wE;AACA,iD;AACA,2C;AACA,gC;AACA,oC;AACA,+E;AACA,0B;AACA,2D;AACA,kC;AACA,4C;AACA,8E;AACA,yE;AACA,iD;AACA,oB;AACA,0B;AACA,wB;AACA,gB;AACA,+E;AACA,2E;AACA,mB;AACA,4D;AACA,4D;AACA,4B;AACA,S;AACA,S;AACA,O;AACA,mB;AACA,I;;AAEA,0B;AACA,oD;AACA,sC;AACA,uE;AACA,uE;AACA,4D;AACA,wB;AACA,uD;AACA,M;AACA,a;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;;AClxBA,oE;AACA,6E;AACA,sC;AACA,0D;AACA,wE;AACA,gF;AACA,4C;AACA,wD;AACA,oD;;AAEA,oE;AACA,0C;;AAEA,kD;AACA,4C;AACA,8B;AACA,uB;AACA,mF;;AAEA,wD;AACA,2C;AACA,2B;AACA,e;AACA,6B;AACA,4C;AACA,iC;AACA,+C;AACA,sD;AACA,mC;AACA,yC;AACA,U;AACA,wB;AACA,O;;AAEA,e;AACA,I;;AAEA,yB;AACA,2C;;AAEA,2C;AACA,wB;AACA,4C;AACA,qB;AACA,e;AACA,I;AACA,E;;AAEA,0E;AACA,0C;AACA,mB;AACA,wE;AACA,oE;AACA,yE;AACA,uC;AACA,kF;AACA,6E;AACA,gE;AACA,yC;;AAEA,4E;AACA,4E;AACA,oC;AACA,qF;AACA,gF;;AAEA,kC;;AAEA,yC;AACA,iC;AACA,2B;AACA,uB;AACA,2B;AACA,wD;AACA,uF;AACA,K;;;AAGA,wC;AACA,e;AACA,0C;AACA,qC;AACA,4E;AACA,2E;AACA,4E;AACA,yE;AACA,2E;AACA,8E;AACA,yC;AACA,Q;AACA,kD;AACA,kD;AACA,iD;AACA,6E;AACA,iD;AACA,uF;AACA,Q;AACA,mE;;AAEA,iC;AACA,6B;AACA,0E;AACA,uF;AACA,yF;AACA,O;;AAEA,U;AACA,8B;AACA,wB;AACA,I;AACA,E;;AAEA,2C;AACA,+E;AACA,4D;AACA,0E;AACA,0E;AACA,+E;AACA,8C;AACA,iD;AACA,iE;AACA,6D;AACA,oB;AACA,oC;AACA,uB;AACA,qC;;AAEA,8C;AACA,mE;AACA,+B;AACA,0B;AACA,2C;AACA,+C;AACA,sE;AACA,2C;AACA,4D;AACA,sC;AACA,uB;AACA,O;;AAEA,6B;AACA,kB;AACA,O;;AAEA,kB;AACA,oC;AACA,mC;AACA,8C;AACA,U;AACA,0E;AACA,K;AACA,K;;AAEA,c;AACA,E;;AAEA,+D;AACA,+C;AACA,4D;;AAEA,0C;AACA,4C;AACA,uF;AACA,mD;AACA,sF;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;;;ACtKA,6D;AACA,uC;AACA,E;AACA,6D;AACA,E;AACA,sE;AACA,U;AACA,E;AACA,0E;AACA,6E;AACA,sD;AACA,yD;AACA,0B;AACA,sB;AACA,2E;AACA,kC;AACA,gE;AACA,yC;AACA,uC;AACA,G;;AAEA,c;;AAEA,qB;AACA,mD;AACA,kE;;AAEA,iC;AACA,wB;AACA,iC;AACA,6B;AACA,wE;AACA,uB;AACA,6B;AACA,qE;AACA,K;AACA,kB;AACA,U;AACA,sB;AACA,mC;;AAEA,yB;AACA,oD;AACA,yD;AACA,4C;AACA,sD;AACA,oB;AACA,iE;AACA,oC;AACA,sE;AACA,kE;AACA,gE;AACA,+B;AACA,+D;;AAEA,mC;AACA,0C;AACA,iE;AACA,8C;AACA,sE;AACA,6E;AACA,mC;AACA,uD;AACA,O;AACA,K;AACA,G;;AAEA,kC;AACA,oC;AACA,sE;AACA,uE;AACA,qD;;AAEA,wE;AACA,qE;AACA,0D;AACA,gC;AACA,oB;AACA,K;AACA,0B;AACA,wB;AACA,G;AACA,E;;AAEA,sE;AACA,iE;AACA,iE;AACA,oE;AACA,iE;AACA,mE;AACA,qE;AACA,kE;AACA,oE;AACA,qC;AACA,oE;AACA,qD;AACA,6C;AACA,2C;AACA,8B;AACA,2C;AACA,uE;AACA,uB;AACA,+B;AACA,uB;AACA,oB;AACA,mB;AACA,6B;AACA,2D;AACA,qC;AACA,kC;AACA,e;AACA,wB;AACA,8B;AACA,kC;AACA,uB;AACA,kB;AACA,mC;AACA,uB;AACA,kD;AACA,yE;AACA,yE;AACA,O;AACA,Y;AACA,wD;AACA,qC;AACA,0B;AACA,K;;AAEA,a;AACA,iB;AACA,uB;AACA,G;;AAEA,e;AACA,E;;AAEA,sC;AACA,e;AACA,a;AACA,gB;AACA,c;AACA,gB;AACA,E;;AAEA,8B;AACA,uC;AACA,gC;AACA,qE;AACA,0B;AACA,4C;AACA,yE;AACA,2B;AACA,Y;AACA,0B;AACA,K;AACA,I;AACA,uC;AACA,2D;AACA,wE;AACA,gC;AACA,c;AACA,K;AACA,0B;AACA,4D;AACA,gC;AACA,c;AACA,K;AACA,0D;AACA,kE;;AAEA,qC;AACA,I;AACA,+C;AACA,uC;AACA,I;AACA,yC;AACA,+B;AACA,oC;AACA,4B;AACA,+B;AACA,Y;AACA,6B;AACA,K;AACA,I;AACA,wC;AACA,oC;AACA,yB;AACA,0C;AACA,uE;;AAEA,8B;AACA,+B;AACA,2C;AACA,a;AACA,K;;AAEA,qD;AACA,2B;AACA,mC;AACA,qD;;AAEA,oB;AACA,0B;AACA,0B;AACA,yC;AACA,+D;AACA,8C;AACA,yB;AACA,yE;AACA,yB;AACA,K;;AAEA,mB;AACA,iC;AACA,oB;AACA,8B;AACA,oE;AACA,8E;AACA,mE;AACA,yC;AACA,6D;AACA,+C;AACA,wD;AACA,oE;AACA,4D;AACA,S;AACA,O;AACA,K;;AAEA,qB;AACA,2C;AACA,iD;;AAEA,qB;AACA,qB;AACA,uC;;AAEA,sB;AACA,8B;AACA,sB;AACA,yD;AACA,U;AACA,mD;AACA,K;AACA,I;AACA,2C;AACA,2D;AACA,gF;AACA,0B;AACA,wB;AACA,0B;AACA,mC;AACA,0E;AACA,U;AACA,0C;AACA,uB;AACA,K;AACA,I;AACA,4C;AACA,0B;AACA,wB;AACA,4B;AACA,mC;AACA,2E;AACA,U;AACA,yB;AACA,oC;AACA,4B;AACA,4B;AACA,0B;AACA,gB;AACA,S;AACA,O;AACA,iD;AACA,uC;AACA,0C;AACA,qD;AACA,mB;AACA,mC;AACA,S;AACA,K;AACA,I;AACA,uC;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,sE;AACA,U;AACA,6C;AACA,uB;AACA,U;AACA,gB;AACA,K;AACA,I;AACA,wC;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,+E;AACA,U;AACA,kB;AACA,+D;AACA,oE;AACA,8D;AACA,mE;AACA,c;;AAEA,qE;AACA,kE;AACA,6D;AACA,6C;AACA,0D;AACA,0C;AACA,2B;AACA,0B;AACA,c;AACA,0C;AACA,oD;AACA,2B;AACA,O;AACA,0B;AACA,K;AACA,I;AACA,2C;AACA,2D;AACA,gF;AACA,6B;AACA,a;AACA,0B;AACA,wB;AACA,a;AACA,mC;AACA,+E;AACA,U;AACA,kB;AACA,0C;AACA,4B;AACA,8C;AACA,wD;AACA,2B;AACA,kB;AACA,W;AACA,S;AACA,qB;AACA,yB;AACA,O;AACA,0B;AACA,K;AACA,I;AACA,wD;AACA,wB;AACA,iD;AACA,qE;AACA,wB;AACA,2D;AACA,gC;AACA,8D;AACA,6B;AACA,a;AACA,0B;AACA,yB;;AAEA,kC;AACA,6E;AACA,yB;AACA,2D;AACA,gC;AACA,wB;AACA,I;AACA,uC;AACA,oE;AACA,2E;AACA,kD;AACA,G;AACA,E;;AAEA,8D;AACA,uB;AACA,yB;AACA,+B;AACA,mC;AACA,qB;AACA,E;;;;;;;;;;;;;;;;;;;;;ACnYA,iB;AACA,yD;AACA,kC;AACA,6C;AACA,8E;AACA,kD;AACA,c;AACA,6C;AACA,wC;AACA,M;AACA,+C;AACA,wC;AACA,E;;AAEA,8E;AACA,2D;AACA,6B;AACA,+E;AACA,G;;AAEA,wC;AACA,wC;AACA,0C;AACA,8D;AACA,yF;AACA,O;AACA,Y;AACA,uC;AACA,wB;AACA,2D;AACA,K;AACA,K;;AAEA,yB;AACA,0C;AACA,yC;AACA,qC;AACA,O;AACA,G;AACA,E;;;AAGA,0F;;AAEA,8B;AACA,sC;AACA,oC;AACA,oD;AACA,uC;AACA,K;;AAEA,2B;AACA,yC;AACA,mC;AACA,oD;AACA,iC;AACA,K;;AAEA,e;AACA,I;AACA,oE;AACA,gE;AACA,oE;AACA,sE;AACA,sB;;AAEA,gF;AACA,e;;AAEA,0E;AACA,W;;AAEA,+E;AACA,8E;AACA,gF;AACA,+E;AACA,gF;AACA,4E;AACA,8E;AACA,S;;AAEA,oE;AACA,mE;;;AAGA,6D;AACA,8D;AACA,iE;AACA,yB;AACA,I;AACA,8D;AACA,4C;AACA,mB;AACA,4C;AACA,sB;AACA,iE;AACA,uD;AACA,6B;AACA,8B;AACA,qE;AACA,iE;AACA,kB;AACA,0B;AACA,mD;AACA,qC;AACA,mD;AACA,I;AACA,wE;AACA,+B;AACA,0B;AACA,4D;AACA,0B;AACA,gE;AACA,sE;AACA,qE;AACA,uE;AACA,oD;AACA,qB;AACA,wD;AACA,gB;AACA,Y;AACA,O;;AAEA,+C;AACA,sB;AACA,4B;AACA,0B;AACA,K;AACA,G;;AAEA,sC;AACA,+D;AACA,oB;AACA,sB;AACA,oB;AACA,G;AACA,0D;AACA,oB;;AAEA,8E;AACA,oB;AACA,mC;;AAEA,sC;AACA,qC;AACA,oD;AACA,K;AACA,+E;AACA,mD;AACA,uB;AACA,yC;AACA,+E;AACA,e;AACA,e;AACA,e;AACA,qD;AACA,8B;AACA,gD;AACA,qC;AACA,0B;AACA,kF;AACA,6D;AACA,c;AACA,gB;AACA,0D;AACA,oE;AACA,iC;AACA,mE;AACA,S;AACA,0E;AACA,O;AACA,K;AACA,kB;AACA,uC;AACA,wD;AACA,kE;AACA,+B;AACA,iE;AACA,O;AACA,K;AACA,gC;AACA,K;;;AAGA,E;;;AAGA,2C;AACA,kC;AACA,+C;AACA,iD;AACA,uD;AACA,I;AACA,kE;AACA,0C;AACA,0B;AACA,mE;AACA,Q;AACA,+D;AACA,K;AACA,4B;AACA,6C;AACA,4B;AACA,6C;AACA,O;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC/MA,sC;AACA,kB;AACA,iB;AACA,E;;AAEA,4E;AACA,6E;AACA,6E;AACA,gD;;AAEA,4C;AACA,sB;AACA,oB;AACA,+C;AACA,0B;AACA,I;AACA,6B;AACA,oB;AACA,+C;AACA,2B;AACA,I;AACA,yB;AACA,oB;AACA,+C;AACA,0B;AACA,I;AACA,sB;AACA,oB;AACA,+C;AACA,iC;AACA,I;AACA,sB;AACA,oB;AACA,gC;AACA,I;AACA,sB;AACA,oB;AACA,mB;AACA,I;AACA,gC;AACA,oB;AACA,kD;AACA,yB;AACA,wE;AACA,O;AACA,I;AACA,c;AACA,kC;AACA,oB;AACA,+C;AACA,8B;AACA,4B;AACA,yB;AACA,e;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACvDA,wE;;AAEA,8E;AACA,+E;AACA,8E;AACA,4E;AACA,gF;AACA,4E;AACA,0C;AACA,6D;AACA,kB;AACA,0B;;AAEA,iD;AACA,8E;AACA,kC;AACA,mC;AACA,sE;AACA,4D;AACA,iC;AACA,wC;AACA,U;AACA,qD;AACA,G;AACA,0C;;AAEA,qB;AACA,8D;AACA,wB;AACA,kD;AACA,sC;AACA,qB;AACA,4D;AACA,oC;AACA,mE;AACA,kE;AACA,yD;AACA,wD;AACA,2D;AACA,qD;AACA,Q;AACA,0C;AACA,oC;AACA,8E;AACA,iD;AACA,O;AACA,M;AACA,U;AACA,2C;AACA,wB;AACA,oC;AACA,sC;AACA,kE;AACA,qB;AACA,gC;AACA,O;AACA,M;AACA,G;;AAEA,sE;AACA,e;AACA,oD;AACA,gC;AACA,a;AACA,uD;AACA,gD;AACA,qC;AACA,+C;AACA,I;AACA,4C;AACA,0D;AACA,yB;AACA,I;AACA,E;;AAEA,kF;AACA,wE;AACA,wD;;AAEA,8B;AACA,sE;AACA,4E;AACA,8E;AACA,2E;AACA,6E;AACA,gD;AACA,+B;AACA,kD;AACA,wB;AACA,gF;AACA,iB;AACA,yD;AACA,uC;AACA,6B;AACA,+E;AACA,uD;AACA,gB;AACA,sC;AACA,S;AACA,Q;AACA,sC;AACA,wB;AACA,sE;AACA,iB;AACA,iD;AACA,iB;AACA,2D;AACA,iD;AACA,mD;AACA,6B;AACA,yC;AACA,2D;AACA,yD;AACA,gB;AACA,gD;AACA,S;AACA,Q;AACA,0C;AACA,wB;AACA,sC;AACA,iB;AACA,wD;;AAEA,wB;AACA,6E;AACA,2E;AACA,oD;AACA,sB;AACA,e;AACA,2E;AACA,2D;AACA,Q;AACA,8B;AACA,wB;AACA,sE;AACA,iB;AACA,gF;AACA,wC;AACA,+C;AACA,yC;AACA,2D;AACA,iD;AACA,gB;AACA,wC;AACA,S;AACA,O;AACA,M;AACA,U;AACA,+B;AACA,oC;AACA,oD;AACA,iD;AACA,iD;AACA,S;AACA,Q;AACA,sC;AACA,wB;AACA,uC;AACA,yC;AACA,wC;AACA,qD;AACA,sE;AACA,S;AACA,Q;AACA,8B;AACA,wB;AACA,uC;AACA,iE;AACA,S;AACA,O;AACA,M;AACA,G;;AAEA,kE;AACA,0C;AACA,iE;AACA,qB;AACA,gB;AACA,E;;;;;;;;;;;;;;;;;;;AClLA,qD;AACA,uD;AACA,E;;AAEA,kD;AACA,uC;AACA,kB;AACA,kB;AACA,wC;AACA,yD;AACA,6E;AACA,K;AACA,0E;AACA,0B;AACA,U;AACA,qC;AACA,G;AACA,E;;AAEA,4D;AACA,kB;AACA,2C;AACA,E;;AAEA,+D;AACA,kB;AACA,sD;AACA,uC;AACA,E;;AAEA,yD;AACA,kB;AACA,kD;AACA,E;;AAEA,2D;AACA,e;AACA,E;;AAEA,+D;AACA,kB;AACA,8C;AACA,E;;AAEA,6C;AACA,qD;AACA,qD;AACA,sC;;AAEA,qD;AACA,qD;AACA,0C;AACA,qC;AACA,kD;AACA,E;;AAEA,yD;AACA,oE;AACA,mD;AACA,gD;AACA,mE;AACA,6B;AACA,E;;AAEA,gF;AACA,uE;AACA,8E;AACA,8E;AACA,uC;AACA,6D;AACA,gC;AACA,8C;AACA,sB;AACA,gB;AACA,gB;;AAEA,8B;AACA,+B;AACA,oC;AACA,oD;AACA,4B;AACA,uD;AACA,wC;AACA,sC;AACA,uC;AACA,oE;AACA,8B;AACA,K;AACA,gB;AACA,G;;AAEA,wE;AACA,0E;AACA,wE;AACA,kD;AACA,oD;AACA,2E;AACA,iB;AACA,sB;AACA,K;AACA,G;;AAEA,c;AACA,E;;AAEA,sC;AACA,4C;AACA,G;;;;;;;;;;;;;;;;;;;AC3GA,gF;AACA,yE;AACA,8E;AACA,+E;AACA,C;AACA,2D;;AAEA,gF;AACA,4E;AACA,+E;AACA,4E;AACA,oC;AACA,c;;AAEA,iD;AACA,6B;AACA,4B;;AAEA,+B;AACA,mC;AACA,sD;AACA,sE;AACA,2B;AACA,uC;AACA,6B;AACA,qE;AACA,4C;AACA,4B;AACA,U;AACA,gD;AACA,kD;AACA,iD;AACA,kC;AACA,oD;AACA,gB;AACA,2C;AACA,O;;AAEA,gC;AACA,G;AACA,E;;AAEA,wC;AACA,+B;AACA,2C;AACA,wB;AACA,kB;;AAEA,oC;AACA,wB;AACA,6D;AACA,Q;AACA,iC;AACA,K;;AAEA,gB;AACA,E;;;;;;;;;;;;;;;;;;;;ACxDA,8E;AACA,uC;AACA,8C;AACA,U;AACA,yB;AACA,qB;AACA,Y;AACA,kB;AACA,+E;AACA,6C;AACA,0D;AACA,4E;AACA,2C;;AAEA,+C;AACA,8B;AACA,6D;AACA,0C;AACA,uB;;AAEA,gD;AACA,uD;AACA,0D;AACA,4D;AACA,gC;AACA,qB;AACA,c;AACA,yB;AACA,wC;AACA,8D;AACA,uB;AACA,wC;AACA,c;AACA,qC;AACA,mB;AACA,Y;AACA,uB;AACA,O;;AAEA,uE;AACA,kB;AACA,O;AACA,K;AACA,E;;AAEA,6C;AACA,+C;AACA,2D;AACA,K;AACA,E;;AAEA,wE;AACA,yD;AACA,+E;AACA,+D;AACA,yE;AACA,oD;AACA,gF;AACA,C;AACA,yE;AACA,iB;;AAEA,sD;;AAEA,oD;AACA,2D;AACA,uD;AACA,gB;;AAEA,mC;AACA,gB;;AAEA,4D;AACA,oE;AACA,uE;AACA,yC;AACA,mE;AACA,6E;;AAEA,8D;;AAEA,O;AACA,2C;AACA,e;AACA,0E;AACA,gB;AACA,e;AACA,kC;AACA,4B;AACA,uD;AACA,uC;AACA,6E;AACA,+E;AACA,+B;AACA,0D;AACA,mB;AACA,Y;AACA,G;;AAEA,yB;AACA,E;;AAEA,gE;AACA,gE;AACA,2C;AACA,oE;AACA,uB;AACA,sC;AACA,4C;AACA,+C;AACA,gC;AACA,yD;AACA,a;AACA,8B;AACA,E;;AAEA,oC;AACA,4C;AACA,C;;AAEA,qC;AACA,yB;AACA,4B;AACA,C;;AAEA,uC;AACA,0D;AACA,gE;AACA,mB;AACA,2D;AACA,kB;AACA,qD;AACA,sC;AACA,O;AACA,K;AACA,C","sourcesContent":["// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\n\n// Cursor: a specification for a particular subset of documents, w/\n// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),\n\n// ObserveHandle: the return value of a live query.\n\nLocalCollection = function (name) {\n  this.name = name;\n  this.docs = {}; // _id -> document (also containing id)\n\n  this._observeQueue = new Meteor._SynchronousQueue();\n\n  this.next_qid = 1; // live query id generator\n\n  // qid -> live query object. keys:\n  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n  //  results: array (ordered) or object (unordered) of current results\n  //  results_snapshot: snapshot of results. null if not paused.\n  //  cursor: Cursor object for the query.\n  //  selector_f, sort_f, (callbacks): functions\n  this.queries = {};\n\n  // null if not saving originals; a map from id to original document value if\n  // saving originals. See comments before saveOriginals().\n  this._savedOriginals = null;\n\n  // True when observers are paused and we should not send callbacks.\n  this.paused = false;\n};\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {};\n\nLocalCollection._applyChanges = function (doc, changeFields) {\n  _.each(changeFields, function (value, key) {\n    if (value === undefined)\n      delete doc[key];\n    else\n      doc[key] = value;\n  });\n};\n\nMinimongoError = function (message) {\n  var e = new Error(message);\n  e.name = \"MinimongoError\";\n  return e;\n};\n\n\n// options may include sort, skip, limit, reactive\n// sort may be any of these forms:\n//     {a: 1, b: -1}\n//     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n//     [\"a\", [\"b\", \"desc\"]]\n//   (in the first form you're beholden to key enumeration order in\n//   your javascript VM)\n//\n// reactive: if given, and false, don't register with Deps (default\n// is true)\n//\n// XXX possibly should support retrieving a subset of fields? and\n// have it be a hint (ignored on the client, when not copying the\n// doc?)\n//\n// XXX sort does not yet support subkeys ('a.b') .. fix that!\n// XXX add one more sort form: \"key\"\n// XXX tests\nLocalCollection.prototype.find = function (selector, options) {\n  // default syntax for everything is to omit the selector argument.\n  // but if selector is explicitly passed in as false or undefined, we\n  // want a selector that matches nothing.\n  if (arguments.length === 0)\n    selector = {};\n\n  return new LocalCollection.Cursor(this, selector, options);\n};\n\n// don't call this ctor directly.  use LocalCollection.find().\nLocalCollection.Cursor = function (collection, selector, options) {\n  var self = this;\n  if (!options) options = {};\n\n  this.collection = collection;\n\n  if (LocalCollection._selectorIsId(selector)) {\n    // stash for fast path\n    self.selector_id = LocalCollection._idStringify(selector);\n    self.selector_f = LocalCollection._compileSelector(selector, self);\n    self.sort_f = undefined;\n  } else {\n    // MongoDB throws different errors on different branching operators\n    // containing $near\n    if (isGeoQuerySpecial(selector))\n      throw new Error(\"$near can't be inside $or/$and/$nor/$not\");\n\n    self.selector_id = undefined;\n    self.selector_f = LocalCollection._compileSelector(selector, self);\n    self.sort_f = (isGeoQuery(selector) || options.sort) ?\n      LocalCollection._compileSort(options.sort || [], self) : null;\n  }\n  self.skip = options.skip;\n  self.limit = options.limit;\n  self.fields = options.fields;\n\n  if (self.fields)\n    self.projection_f = LocalCollection._compileProjection(self.fields);\n\n  if (options.transform && typeof Deps !== \"undefined\")\n    self._transform = Deps._makeNonreactive(options.transform);\n  else\n    self._transform = options.transform;\n\n  // db_objects is a list of the objects that match the cursor. (It's always a\n  // list, never an object: LocalCollection.Cursor is always ordered.)\n  self.db_objects = null;\n  self.cursor_pos = 0;\n\n  // by default, queries register w/ Deps when it is available.\n  if (typeof Deps !== \"undefined\")\n    self.reactive = (options.reactive === undefined) ? true : options.reactive;\n};\n\nLocalCollection.Cursor.prototype.rewind = function () {\n  var self = this;\n  self.db_objects = null;\n  self.cursor_pos = 0;\n};\n\nLocalCollection.prototype.findOne = function (selector, options) {\n  if (arguments.length === 0)\n    selector = {};\n\n  // NOTE: by setting limit 1 here, we end up using very inefficient\n  // code that recomputes the whole query on each update. The upside is\n  // that when you reactively depend on a findOne you only get\n  // invalidated when the found object changes, not any object in the\n  // collection. Most findOne will be by id, which has a fast path, so\n  // this might not be a big deal. In most cases, invalidation causes\n  // the called to re-query anyway, so this should be a net performance\n  // improvement.\n  options = options || {};\n  options.limit = 1;\n\n  return this.find(selector, options).fetch()[0];\n};\n\nLocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {\n  var self = this;\n\n  if (self.db_objects === null)\n    self.db_objects = self._getRawObjects(true);\n\n  if (self.reactive)\n    self._depend({\n      addedBefore: true,\n      removed: true,\n      changed: true,\n      movedBefore: true});\n\n  while (self.cursor_pos < self.db_objects.length) {\n    var elt = EJSON.clone(self.db_objects[self.cursor_pos]);\n    if (self.projection_f)\n      elt = self.projection_f(elt);\n    if (self._transform)\n      elt = self._transform(elt);\n    callback.call(thisArg, elt, self.cursor_pos, self);\n    ++self.cursor_pos;\n  }\n};\n\nLocalCollection.Cursor.prototype.getTransform = function () {\n  var self = this;\n  return self._transform;\n};\n\nLocalCollection.Cursor.prototype.map = function (callback, thisArg) {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc, index) {\n    res.push(callback.call(thisArg, doc, index, self));\n  });\n  return res;\n};\n\nLocalCollection.Cursor.prototype.fetch = function () {\n  var self = this;\n  var res = [];\n  self.forEach(function (doc) {\n    res.push(doc);\n  });\n  return res;\n};\n\nLocalCollection.Cursor.prototype.count = function () {\n  var self = this;\n\n  if (self.reactive)\n    self._depend({added: true, removed: true},\n                 true /* allow the observe to be unordered */);\n\n  if (self.db_objects === null)\n    self.db_objects = self._getRawObjects(true);\n\n  return self.db_objects.length;\n};\n\nLocalCollection.Cursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  if (! self.collection.name)\n    throw new Error(\"Can't publish a cursor from a collection without a name.\");\n  var collection = self.collection.name;\n\n  // XXX minimongo should not depend on mongo-livedata!\n  return Meteor.Collection._publishCursor(self, sub, collection);\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore)\n    throw new Error(\"Please specify only one of added() and addedBefore()\");\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.addedAt && callbacks.added)\n    throw new Error(\"Please specify only one of added() and addedAt()\");\n  if (callbacks.changedAt && callbacks.changed)\n    throw new Error(\"Please specify only one of changed() and changedAt()\");\n  if (callbacks.removed && callbacks.removedAt)\n    throw new Error(\"Please specify only one of removed() and removedAt()\");\n\n  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt\n            || callbacks.removedAt);\n};\n\n// the handle that comes back from observe.\nLocalCollection.ObserveHandle = function () {};\n\n// options to contain:\n//  * callbacks for observe():\n//    - addedAt (document, atIndex)\n//    - added (document)\n//    - changedAt (newDocument, oldDocument, atIndex)\n//    - changed (newDocument, oldDocument)\n//    - removedAt (document, atIndex)\n//    - removed (document)\n//    - movedTo (document, oldIndex, newIndex)\n//\n// attributes available on returned query handle:\n//  * stop(): end updates\n//  * collection: the collection this query is querying\n//\n// iff x is a returned query handle, (x instanceof\n// LocalCollection.ObserveHandle) is true\n//\n// initial results delivered through added callback\n// XXX maybe callbacks should take a list of objects, to expose transactions?\n// XXX maybe support field limiting (to limit what you're notified on)\n\n_.extend(LocalCollection.Cursor.prototype, {\n  observe: function (options) {\n    var self = this;\n    return LocalCollection._observeFromObserveChanges(self, options);\n  },\n  observeChanges: function (options) {\n    var self = this;\n\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    if (!options._allow_unordered && !ordered && (self.skip || self.limit))\n      throw new Error(\"must use ordered observe with skip or limit\");\n\n    // XXX merge this object w/ \"this\" Cursor.  they're the same.\n    var query = {\n      selector_f: self.selector_f, // not fast pathed\n      sort_f: ordered && self.sort_f,\n      results_snapshot: null,\n      ordered: ordered,\n      cursor: self,\n      observeChanges: options.observeChanges,\n      fields: self.fields,\n      projection_f: self.projection_f\n    };\n    var qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (self.reactive) {\n      qid = self.collection.next_qid++;\n      self.collection.queries[qid] = query;\n    }\n    query.results = self._getRawObjects(ordered);\n    if (self.collection.paused)\n      query.results_snapshot = (ordered ? [] : {});\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    var wrapCallback = function (f, fieldsIndex, ignoreEmptyFields) {\n      if (!f)\n        return function () {};\n      return function (/*args*/) {\n        var context = this;\n        var args = arguments;\n\n        if (fieldsIndex !== undefined && self.projection_f) {\n          args[fieldsIndex] = self.projection_f(args[fieldsIndex]);\n          if (ignoreEmptyFields && _.isEmpty(args[fieldsIndex]))\n            return;\n        }\n\n        if (!self.collection.paused) {\n          self.collection._observeQueue.queueTask(function () {\n            f.apply(context, args);\n          });\n        }\n      };\n    };\n    query.added = wrapCallback(options.added, 1);\n    query.changed = wrapCallback(options.changed, 1, true);\n    query.removed = wrapCallback(options.removed);\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore, 1);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !self.collection.paused) {\n      _.each(query.results, function (doc, i) {\n        var fields = EJSON.clone(doc);\n\n        delete fields._id;\n        if (ordered)\n          query.addedBefore(doc._id, fields, null);\n        query.added(doc._id, fields);\n      });\n    }\n\n    var handle = new LocalCollection.ObserveHandle;\n    _.extend(handle, {\n      collection: self.collection,\n      stop: function () {\n        if (self.reactive)\n          delete self.collection.queries[qid];\n      }\n    });\n\n    if (self.reactive && Deps.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Deps.onInvalidate(function () {\n        handle.stop();\n      });\n    }\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    self.collection._observeQueue.drain();\n\n    return handle;\n  }\n});\n\n// Returns a collection of matching objects, but doesn't deep copy them.\n//\n// If ordered is set, returns a sorted array, respecting sort_f, skip, and limit\n// properties of the query.  if sort_f is falsey, no sort -- you get the natural\n// order.\n//\n// If ordered is not set, returns an object mapping from ID to doc (sort_f, skip\n// and limit should not be set).\nLocalCollection.Cursor.prototype._getRawObjects = function (ordered) {\n  var self = this;\n\n  var results = ordered ? [] : {};\n\n  // fast path for single ID value\n  if (self.selector_id) {\n    // If you have non-zero skip and ask for a single id, you get\n    // nothing. This is so it matches the behavior of the '{_id: foo}'\n    // path.\n    if (self.skip)\n      return results;\n\n    if (_.has(self.collection.docs, self.selector_id)) {\n      var selectedDoc = self.collection.docs[self.selector_id];\n      if (ordered)\n        results.push(selectedDoc);\n      else\n        results[self.selector_id] = selectedDoc;\n    }\n    return results;\n  }\n\n  // slow path for arbitrary selector, sort, skip, limit\n  for (var id in self.collection.docs) {\n    var doc = self.collection.docs[id];\n    if (self.selector_f(doc)) {\n      if (ordered)\n        results.push(doc);\n      else\n        results[id] = doc;\n    }\n    // Fast path for limited unsorted queries.\n    if (self.limit && !self.skip && !self.sort_f &&\n        results.length === self.limit)\n      return results;\n  }\n\n  if (!ordered)\n    return results;\n\n  if (self.sort_f)\n    results.sort(self.sort_f);\n\n  var idx_start = self.skip || 0;\n  var idx_end = self.limit ? (self.limit + idx_start) : results.length;\n  return results.slice(idx_start, idx_end);\n};\n\n// XXX Maybe we need a version of observe that just calls a callback if\n// anything changed.\nLocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {\n  var self = this;\n\n  if (Deps.active) {\n    var v = new Deps.Dependency;\n    v.depend();\n    var notifyChange = _.bind(v.changed, v);\n\n    var options = {\n      _suppress_initial: true,\n      _allow_unordered: _allow_unordered\n    };\n    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],\n           function (fnName) {\n             if (changers[fnName])\n               options[fnName] = notifyChange;\n           });\n\n    // observeChanges will stop() when this computation is invalidated\n    self.observeChanges(options);\n  }\n};\n\n// XXX enforce rule that field names can't start with '$' or contain '.'\n// (real mongodb does in fact enforce this)\n// XXX possibly enforce that 'undefined' does not appear (we assume\n// this in our handling of null and $exists)\nLocalCollection.prototype.insert = function (doc, callback) {\n  var self = this;\n  doc = EJSON.clone(doc);\n\n  if (!_.has(doc, '_id')) {\n    // if you really want to use ObjectIDs, set this global.\n    // Meteor.Collection specifies its own ids and does not use this code.\n    doc._id = LocalCollection._useOID ? new LocalCollection._ObjectID()\n                                      : Random.id();\n  }\n  var id = LocalCollection._idStringify(doc._id);\n\n  if (_.has(self.docs, id))\n    throw MinimongoError(\"Duplicate _id '\" + doc._id + \"'\");\n\n  self._saveOriginal(id, undefined);\n  self.docs[id] = doc;\n\n  var queriesToRecompute = [];\n  // trigger live queries that match\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.selector_f(doc)) {\n      if (query.cursor.skip || query.cursor.limit)\n        queriesToRecompute.push(qid);\n      else\n        LocalCollection._insertInResults(query, doc);\n    }\n  }\n\n  _.each(queriesToRecompute, function (qid) {\n    if (self.queries[qid])\n      LocalCollection._recomputeResults(self.queries[qid]);\n  });\n  self._observeQueue.drain();\n\n  // Defer because the caller likely doesn't expect the callback to be run\n  // immediately.\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, doc._id);\n    });\n  return doc._id;\n};\n\nLocalCollection.prototype.remove = function (selector, callback) {\n  var self = this;\n  var remove = [];\n\n  var queriesToRecompute = [];\n  var selector_f = LocalCollection._compileSelector(selector, self);\n\n  // Avoid O(n) for \"remove a single doc by ID\".\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      var strId = LocalCollection._idStringify(id);\n      // We still have to run selector_f, in case it's something like\n      //   {_id: \"X\", a: 42}\n      if (_.has(self.docs, strId) && selector_f(self.docs[strId]))\n        remove.push(strId);\n    });\n  } else {\n    for (var id in self.docs) {\n      var doc = self.docs[id];\n      if (selector_f(doc)) {\n        remove.push(id);\n      }\n    }\n  }\n\n  var queryRemove = [];\n  for (var i = 0; i < remove.length; i++) {\n    var removeId = remove[i];\n    var removeDoc = self.docs[removeId];\n    _.each(self.queries, function (query, qid) {\n      if (query.selector_f(removeDoc)) {\n        if (query.cursor.skip || query.cursor.limit)\n          queriesToRecompute.push(qid);\n        else\n          queryRemove.push({qid: qid, doc: removeDoc});\n      }\n    });\n    self._saveOriginal(removeId, removeDoc);\n    delete self.docs[removeId];\n  }\n\n  // run live query callbacks _after_ we've removed the documents.\n  _.each(queryRemove, function (remove) {\n    var query = self.queries[remove.qid];\n    if (query)\n      LocalCollection._removeFromResults(query, remove.doc);\n  });\n  _.each(queriesToRecompute, function (qid) {\n    var query = self.queries[qid];\n    if (query)\n      LocalCollection._recomputeResults(query);\n  });\n  self._observeQueue.drain();\n  var result = remove.length;\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// XXX atomicity: if multi is true, and one modification fails, do\n// we rollback the whole operation, or what?\nLocalCollection.prototype.update = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n  if (!options) options = {};\n\n  var selector_f = LocalCollection._compileSelector(selector, self);\n\n  // Save the original results of any query that we might need to\n  // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n  // it. (We don't need to save the original results of paused queries because\n  // they already have a results_snapshot and we won't be diffing in\n  // _recomputeResults.)\n  var qidToOriginalResults = {};\n  _.each(self.queries, function (query, qid) {\n    if ((query.cursor.skip || query.cursor.limit) && !query.paused)\n      qidToOriginalResults[qid] = EJSON.clone(query.results);\n  });\n  var recomputeQids = {};\n\n  var updateCount = 0;\n\n  for (var id in self.docs) {\n    var doc = self.docs[id];\n    if (selector_f(doc)) {\n      // XXX Should we save the original even if mod ends up being a no-op?\n      self._saveOriginal(id, doc);\n      self._modifyAndNotify(doc, mod, recomputeQids);\n      ++updateCount;\n      if (!options.multi)\n        break;\n    }\n  }\n\n  _.each(recomputeQids, function (dummy, qid) {\n    var query = self.queries[qid];\n    if (query)\n      LocalCollection._recomputeResults(query,\n                                        qidToOriginalResults[qid]);\n  });\n  self._observeQueue.drain();\n\n  // If we are doing an upsert, and we didn't modify any documents yet, then\n  // it's time to do an insert. Figure out what document we are inserting, and\n  // generate an id for it.\n  var insertedId;\n  if (updateCount === 0 && options.upsert) {\n    var newDoc = LocalCollection._removeDollarOperators(selector);\n    LocalCollection._modify(newDoc, mod, true);\n    if (! newDoc._id && options.insertedId)\n      newDoc._id = options.insertedId;\n    insertedId = self.insert(newDoc);\n    updateCount = 1;\n  }\n\n  // Return the number of affected documents, or in the upsert case, an object\n  // containing the number of affected docs and the id of the doc that was\n  // inserted, if any.\n  var result;\n  if (options._returnObject) {\n    result = {\n      numberAffected: updateCount\n    };\n    if (insertedId !== undefined)\n      result.insertedId = insertedId;\n  } else {\n    result = updateCount;\n  }\n\n  if (callback)\n    Meteor.defer(function () {\n      callback(null, result);\n    });\n  return result;\n};\n\n// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:\n// true }).\nLocalCollection.prototype.upsert = function (selector, mod, options, callback) {\n  var self = this;\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  return self.update(selector, mod, _.extend({}, options, {\n    upsert: true,\n    _returnObject: true\n  }), callback);\n};\n\nLocalCollection.prototype._modifyAndNotify = function (\n    doc, mod, recomputeQids) {\n  var self = this;\n\n  var matched_before = {};\n  for (var qid in self.queries) {\n    var query = self.queries[qid];\n    if (query.ordered) {\n      matched_before[qid] = query.selector_f(doc);\n    } else {\n      // Because we don't support skip or limit (yet) in unordered queries, we\n      // can just do a direct lookup.\n      matched_before[qid] = _.has(query.results,\n                                  LocalCollection._idStringify(doc._id));\n    }\n  }\n\n  var old_doc = EJSON.clone(doc);\n\n  LocalCollection._modify(doc, mod);\n\n  for (qid in self.queries) {\n    query = self.queries[qid];\n    var before = matched_before[qid];\n    var after = query.selector_f(doc);\n\n    if (query.cursor.skip || query.cursor.limit) {\n      // We need to recompute any query where the doc may have been in the\n      // cursor's window either before or after the update. (Note that if skip\n      // or limit is set, \"before\" and \"after\" being true do not necessarily\n      // mean that the document is in the cursor's output after skip/limit is\n      // applied... but if they are false, then the document definitely is NOT\n      // in the output. So it's safe to skip recompute if neither before or\n      // after are true.)\n      if (before || after)\n        recomputeQids[qid] = true;\n    } else if (before && !after) {\n      LocalCollection._removeFromResults(query, doc);\n    } else if (!before && after) {\n      LocalCollection._insertInResults(query, doc);\n    } else if (before && after) {\n      LocalCollection._updateInResults(query, doc, old_doc);\n    }\n  }\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sort_f) {\n      query.addedBefore(doc._id, fields, null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(\n        query.sort_f, query.results, doc);\n      var next = query.results[i+1];\n      if (next)\n        next = next._id;\n      else\n        next = null;\n      query.addedBefore(doc._id, fields, next);\n    }\n    query.added(doc._id, fields);\n  } else {\n    query.added(doc._id, fields);\n    query.results[LocalCollection._idStringify(doc._id)] = doc;\n  }\n};\n\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = LocalCollection._idStringify(doc._id);  // in case callback mutates doc\n    query.removed(doc._id);\n    delete query.results[id];\n  }\n};\n\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id))\n    throw new Error(\"Can't change a doc's _id while updating\");\n  var changedFields = LocalCollection._makeChangedFields(doc, old_doc);\n  if (!query.ordered) {\n    if (!_.isEmpty(changedFields)) {\n      query.changed(doc._id, changedFields);\n      query.results[LocalCollection._idStringify(doc._id)] = doc;\n    }\n    return;\n  }\n\n  var orig_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (!_.isEmpty(changedFields))\n    query.changed(doc._id, changedFields);\n  if (!query.sort_f)\n    return;\n\n  // just take it out and put it back in again, and see if the index\n  // changes\n  query.results.splice(orig_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(\n    query.sort_f, query.results, doc);\n  if (orig_idx !== new_idx) {\n    var next = query.results[new_idx+1];\n    if (next)\n      next = next._id;\n    else\n      next = null;\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\n// Recomputes the results of a query and runs observe callbacks for the\n// difference between the previous results and the current results (unless\n// paused). Used for skip/limit queries.\n//\n// When this is used by insert or remove, it can just use query.results for the\n// old results (and there's no need to pass in oldResults), because these\n// operations don't mutate the documents in the collection. Update needs to pass\n// in an oldResults which was deep-copied before the modifier was applied.\nLocalCollection._recomputeResults = function (query, oldResults) {\n  if (!oldResults)\n    oldResults = query.results;\n  query.results = query.cursor._getRawObjects(query.ordered);\n\n  if (!query.paused) {\n    LocalCollection._diffQueryChanges(\n      query.ordered, oldResults, query.results, query);\n  }\n};\n\n\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered)\n    throw new Error(\"Can't call _findInOrderedResults on unordered query\");\n  for (var i = 0; i < query.results.length; i++)\n    if (query.results[i] === doc)\n      return i;\n  throw Error(\"object missing from query\");\n};\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0, rangeLength = array.length;\n\n  while (rangeLength > 0) {\n    var halfRange = Math.floor(rangeLength/2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      rangeLength -= halfRange + 1;\n    } else {\n      rangeLength = halfRange;\n    }\n  }\n  return first;\n};\n\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  var idx = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(idx, 0, value);\n  return idx;\n};\n\n// To track what documents are affected by a piece of code, call saveOriginals()\n// before it and retrieveOriginals() after it. retrieveOriginals returns an\n// object whose keys are the ids of the documents that were affected since the\n// call to saveOriginals(), and the values are equal to the document's contents\n// at the time of saveOriginals. (In the case of an inserted document, undefined\n// is the value.) You must alternate between calls to saveOriginals() and\n// retrieveOriginals().\nLocalCollection.prototype.saveOriginals = function () {\n  var self = this;\n  if (self._savedOriginals)\n    throw new Error(\"Called saveOriginals twice without retrieveOriginals\");\n  self._savedOriginals = {};\n};\nLocalCollection.prototype.retrieveOriginals = function () {\n  var self = this;\n  if (!self._savedOriginals)\n    throw new Error(\"Called retrieveOriginals without saveOriginals\");\n\n  var originals = self._savedOriginals;\n  self._savedOriginals = null;\n  return originals;\n};\n\nLocalCollection.prototype._saveOriginal = function (id, doc) {\n  var self = this;\n  // Are we even trying to save originals?\n  if (!self._savedOriginals)\n    return;\n  // Have we previously mutated the original (and so 'doc' is not actually\n  // original)?  (Note the 'has' check rather than truth: we store undefined\n  // here for inserted docs!)\n  if (_.has(self._savedOriginals, id))\n    return;\n  self._savedOriginals[id] = EJSON.clone(doc);\n};\n\n// Pause the observers. No callbacks from observers will fire until\n// 'resumeObservers' is called.\nLocalCollection.prototype.pauseObservers = function () {\n  // No-op if already paused.\n  if (this.paused)\n    return;\n\n  // Set the 'paused' flag such that new observer messages don't fire.\n  this.paused = true;\n\n  // Take a snapshot of the query results for each query.\n  for (var qid in this.queries) {\n    var query = this.queries[qid];\n\n    query.results_snapshot = EJSON.clone(query.results);\n  }\n};\n\n// Resume the observers. Observers immediately receive change\n// notifications to bring them to the current state of the\n// database. Note that this is not just replaying all the changes that\n// happened during the pause, it is a smarter 'coalesced' diff.\nLocalCollection.prototype.resumeObservers = function () {\n  var self = this;\n  // No-op if not paused.\n  if (!this.paused)\n    return;\n\n  // Unset the 'paused' flag. Make sure to do this first, otherwise\n  // observer methods won't actually fire when we trigger them.\n  this.paused = false;\n\n  for (var qid in this.queries) {\n    var query = self.queries[qid];\n    // Diff the current results against the snapshot and send to observers.\n    // pass the query object for its observer callbacks.\n    LocalCollection._diffQueryChanges(\n      query.ordered, query.results_snapshot, query.results, query);\n    query.results_snapshot = null;\n  }\n  self._observeQueue.drain();\n};\n\n\n// NB: used by livedata\nLocalCollection._idStringify = function (id) {\n  if (id instanceof LocalCollection._ObjectID) {\n    return id.valueOf();\n  } else if (typeof id === 'string') {\n    if (id === \"\") {\n      return id;\n    } else if (id.substr(0, 1) === \"-\" || // escape previously dashed strings\n               id.substr(0, 1) === \"~\" || // escape escaped numbers, true, false\n               LocalCollection._looksLikeObjectID(id) || // escape object-id-form strings\n               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later\n      return \"-\" + id;\n    } else {\n      return id; // other strings go through unchanged.\n    }\n  } else if (id === undefined) {\n    return '-';\n  } else if (typeof id === 'object' && id !== null) {\n    throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");\n  } else { // Numbers, true, false, null\n    return \"~\" + JSON.stringify(id);\n  }\n};\n\n\n// NB: used by livedata\nLocalCollection._idParse = function (id) {\n  if (id === \"\") {\n    return id;\n  } else if (id === '-') {\n    return undefined;\n  } else if (id.substr(0, 1) === '-') {\n    return id.substr(1);\n  } else if (id.substr(0, 1) === '~') {\n    return JSON.parse(id.substr(1));\n  } else if (LocalCollection._looksLikeObjectID(id)) {\n    return new LocalCollection._ObjectID(id);\n  } else {\n    return id;\n  }\n};\n\nLocalCollection._makeChangedFields = function (newDoc, oldDoc) {\n  var fields = {};\n  LocalCollection._diffObjects(oldDoc, newDoc, {\n    leftOnly: function (key, value) {\n      fields[key] = undefined;\n    },\n    rightOnly: function (key, value) {\n      fields[key] = value;\n    },\n    both: function (key, leftValue, rightValue) {\n      if (!EJSON.equals(leftValue, rightValue))\n        fields[key] = rightValue;\n    }\n  });\n  return fields;\n};\n\n// Searches $near operator in the selector recursively\n// (including all $or/$and/$nor/$not branches)\nvar isGeoQuery = function (selector) {\n  return _.any(selector, function (val, key) {\n    // Note: _.isObject matches objects and arrays\n    return key === \"$near\" || (_.isObject(val) && isGeoQuery(val));\n  });\n};\n\n// Checks if $near appears under some $or/$and/$nor/$not branch\nvar isGeoQuerySpecial = function (selector) {\n  return _.any(selector, function (val, key) {\n    if (_.contains(['$or', '$and', '$nor', '$not'], key))\n      return isGeoQuery(val);\n    // Note: _.isObject matches objects and arrays\n    return _.isObject(val) && isGeoQuerySpecial(val);\n  });\n};\n\n","// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as\n// arrays.\nvar isArray = function (x) {\n  return _.isArray(x) && !EJSON.isBinary(x);\n};\n\nvar _anyIfArray = function (x, f) {\n  if (isArray(x))\n    return _.any(x, f);\n  return f(x);\n};\n\nvar _anyIfArrayPlus = function (x, f) {\n  if (f(x))\n    return true;\n  return isArray(x) && _.any(x, f);\n};\n\nvar hasOperators = function(valueSelector) {\n  var theseAreOperators = undefined;\n  for (var selKey in valueSelector) {\n    var thisIsOperator = selKey.substr(0, 1) === '$';\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      throw new Error(\"Inconsistent selector: \" + valueSelector);\n    }\n  }\n  return !!theseAreOperators;  // {} has no operators\n};\n\nvar compileValueSelector = function (valueSelector, selector, cursor) {\n  if (valueSelector == null) {  // undefined or null\n    return function (value) {\n      return _anyIfArray(value, function (x) {\n        return x == null;  // undefined or null\n      });\n    };\n  }\n\n  // Selector is a non-null primitive (and not an array or RegExp either).\n  if (!_.isObject(valueSelector)) {\n    return function (value) {\n      return _anyIfArray(value, function (x) {\n        return x === valueSelector;\n      });\n    };\n  }\n\n  if (valueSelector instanceof RegExp) {\n    return function (value) {\n      if (value === undefined)\n        return false;\n      return _anyIfArray(value, function (x) {\n        return valueSelector.test(x);\n      });\n    };\n  }\n\n  // Arrays match either identical arrays or arrays that contain it as a value.\n  if (isArray(valueSelector)) {\n    return function (value) {\n      if (!isArray(value))\n        return false;\n      return _anyIfArrayPlus(value, function (x) {\n        return LocalCollection._f._equal(valueSelector, x);\n      });\n    };\n  }\n\n  // It's an object, but not an array or regexp.\n  if (hasOperators(valueSelector)) {\n    var operatorFunctions = [];\n    _.each(valueSelector, function (operand, operator) {\n      if (!_.has(VALUE_OPERATORS, operator))\n        throw new Error(\"Unrecognized operator: \" + operator);\n      // Special case for location operators\n      operatorFunctions.push(VALUE_OPERATORS[operator](\n        operand, valueSelector, cursor));\n    });\n    return function (value, doc) {\n      return _.all(operatorFunctions, function (f) {\n        return f(value, doc);\n      });\n    };\n  }\n\n  // It's a literal; compare value (or element of value array) directly to the\n  // selector.\n  return function (value) {\n    return _anyIfArray(value, function (x) {\n      return LocalCollection._f._equal(valueSelector, x);\n    });\n  };\n};\n\n// XXX can factor out common logic below\nvar LOGICAL_OPERATORS = {\n  \"$and\": function(subSelector, operators, cursor) {\n    if (!isArray(subSelector) || _.isEmpty(subSelector))\n      throw Error(\"$and/$or/$nor must be nonempty array\");\n    var subSelectorFunctions = _.map(subSelector, function (selector) {\n      return compileDocumentSelector(selector, cursor); });\n    return function (doc, wholeDoc) {\n      return _.all(subSelectorFunctions, function (f) {\n        return f(doc, wholeDoc);\n      });\n    };\n  },\n\n  \"$or\": function(subSelector, operators, cursor) {\n    if (!isArray(subSelector) || _.isEmpty(subSelector))\n      throw Error(\"$and/$or/$nor must be nonempty array\");\n    var subSelectorFunctions = _.map(subSelector, function (selector) {\n      return compileDocumentSelector(selector, cursor); });\n    return function (doc, wholeDoc) {\n      return _.any(subSelectorFunctions, function (f) {\n        return f(doc, wholeDoc);\n      });\n    };\n  },\n\n  \"$nor\": function(subSelector, operators, cursor) {\n    if (!isArray(subSelector) || _.isEmpty(subSelector))\n      throw Error(\"$and/$or/$nor must be nonempty array\");\n    var subSelectorFunctions = _.map(subSelector, function (selector) {\n      return compileDocumentSelector(selector, cursor); });\n    return function (doc, wholeDoc) {\n      return _.all(subSelectorFunctions, function (f) {\n        return !f(doc, wholeDoc);\n      });\n    };\n  },\n\n  \"$where\": function(selectorValue) {\n    if (!(selectorValue instanceof Function)) {\n      selectorValue = Function(\"return \" + selectorValue);\n    }\n    return function (doc) {\n      return selectorValue.call(doc);\n    };\n  }\n};\n\n// Each value operator is a function with args:\n//  - operand - Anything\n//  - operators - Object - operators on the same level (neighbours)\n//  - cursor - Object - original cursor\n// returns a function with args:\n//  - value - a value the operator is tested against\n//  - doc - the whole document tested in this query\nvar VALUE_OPERATORS = {\n  \"$in\": function (operand) {\n    if (!isArray(operand))\n      throw new Error(\"Argument to $in must be array\");\n    return function (value) {\n      return _anyIfArrayPlus(value, function (x) {\n        return _.any(operand, function (operandElt) {\n          return LocalCollection._f._equal(operandElt, x);\n        });\n      });\n    };\n  },\n\n  \"$all\": function (operand) {\n    if (!isArray(operand))\n      throw new Error(\"Argument to $all must be array\");\n    return function (value) {\n      if (!isArray(value))\n        return false;\n      return _.all(operand, function (operandElt) {\n        return _.any(value, function (valueElt) {\n          return LocalCollection._f._equal(operandElt, valueElt);\n        });\n      });\n    };\n  },\n\n  \"$lt\": function (operand) {\n    return function (value) {\n      return _anyIfArray(value, function (x) {\n        return LocalCollection._f._cmp(x, operand) < 0;\n      });\n    };\n  },\n\n  \"$lte\": function (operand) {\n    return function (value) {\n      return _anyIfArray(value, function (x) {\n        return LocalCollection._f._cmp(x, operand) <= 0;\n      });\n    };\n  },\n\n  \"$gt\": function (operand) {\n    return function (value) {\n      return _anyIfArray(value, function (x) {\n        return LocalCollection._f._cmp(x, operand) > 0;\n      });\n    };\n  },\n\n  \"$gte\": function (operand) {\n    return function (value) {\n      return _anyIfArray(value, function (x) {\n        return LocalCollection._f._cmp(x, operand) >= 0;\n      });\n    };\n  },\n\n  \"$ne\": function (operand) {\n    return function (value) {\n      return ! _anyIfArrayPlus(value, function (x) {\n        return LocalCollection._f._equal(x, operand);\n      });\n    };\n  },\n\n  \"$nin\": function (operand) {\n    if (!isArray(operand))\n      throw new Error(\"Argument to $nin must be array\");\n    var inFunction = VALUE_OPERATORS.$in(operand);\n    return function (value, doc) {\n      // Field doesn't exist, so it's not-in operand\n      if (value === undefined)\n        return true;\n      return !inFunction(value, doc);\n    };\n  },\n\n  \"$exists\": function (operand) {\n    return function (value) {\n      return operand === (value !== undefined);\n    };\n  },\n\n  \"$mod\": function (operand) {\n    var divisor = operand[0],\n        remainder = operand[1];\n    return function (value) {\n      return _anyIfArray(value, function (x) {\n        return x % divisor === remainder;\n      });\n    };\n  },\n\n  \"$size\": function (operand) {\n    return function (value) {\n      return isArray(value) && operand === value.length;\n    };\n  },\n\n  \"$type\": function (operand) {\n    return function (value) {\n      // A nonexistent field is of no type.\n      if (value === undefined)\n        return false;\n      // Definitely not _anyIfArrayPlus: $type: 4 only matches arrays that have\n      // arrays as elements according to the Mongo docs.\n      return _anyIfArray(value, function (x) {\n        return LocalCollection._f._type(x) === operand;\n      });\n    };\n  },\n\n  \"$regex\": function (operand, operators) {\n    var options = operators.$options;\n    if (options !== undefined) {\n      // Options passed in $options (even the empty string) always overrides\n      // options in the RegExp object itself. (See also\n      // Meteor.Collection._rewriteSelector.)\n\n      // Be clear that we only support the JS-supported options, not extended\n      // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n      // by transforming the regexp, but not today...\n      if (/[^gim]/.test(options))\n        throw new Error(\"Only the i, m, and g regexp options are supported\");\n\n      var regexSource = operand instanceof RegExp ? operand.source : operand;\n      operand = new RegExp(regexSource, options);\n    } else if (!(operand instanceof RegExp)) {\n      operand = new RegExp(operand);\n    }\n\n    return function (value) {\n      if (value === undefined)\n        return false;\n      return _anyIfArray(value, function (x) {\n        return operand.test(x);\n      });\n    };\n  },\n\n  \"$options\": function (operand) {\n    // evaluation happens at the $regex function above\n    return function (value) { return true; };\n  },\n\n  \"$elemMatch\": function (operand, selector, cursor) {\n    var matcher = compileDocumentSelector(operand, cursor);\n    return function (value, doc) {\n      if (!isArray(value))\n        return false;\n      return _.any(value, function (x) {\n        return matcher(x, doc);\n      });\n    };\n  },\n\n  \"$not\": function (operand, operators, cursor) {\n    var matcher = compileValueSelector(operand, operators, cursor);\n    return function (value, doc) {\n      return !matcher(value, doc);\n    };\n  },\n\n  \"$near\": function (operand, operators, cursor) {\n    function distanceCoordinatePairs (a, b) {\n      a = pointToArray(a);\n      b = pointToArray(b);\n      var x = a[0] - b[0];\n      var y = a[1] - b[1];\n      if (_.isNaN(x) || _.isNaN(y))\n        return null;\n      return Math.sqrt(x * x + y * y);\n    }\n    // Makes sure we get 2 elements array and assume the first one to be x and\n    // the second one to y no matter what user passes.\n    // In case user passes { lon: x, lat: y } returns [x, y]\n    function pointToArray (point) {\n      return _.map(point, _.identity);\n    }\n    // GeoJSON query is marked as $geometry property\n    var mode = _.isObject(operand) && _.has(operand, '$geometry') ? \"2dsphere\" : \"2d\";\n    var maxDistance = mode === \"2d\" ? operators.$maxDistance : operand.$maxDistance;\n    var point = mode === \"2d\" ? operand : operand.$geometry;\n    return function (value, doc) {\n      var dist = null;\n      switch (mode) {\n        case \"2d\":\n          dist = distanceCoordinatePairs(point, value);\n          break;\n        case \"2dsphere\":\n          // XXX: for now, we don't calculate the actual distance between, say,\n          // polygon and circle. If people care about this use-case it will get\n          // a priority.\n          if (value.type === \"Point\")\n            dist = GeoJSON.pointDistance(point, value);\n          else\n            dist = GeoJSON.geometryWithinRadius(value, point, maxDistance) ?\n                     0 : maxDistance + 1;\n          break;\n      }\n      // Used later in sorting by distance, since $near queries are sorted by\n      // distance from closest to farthest.\n      if (cursor) {\n        if (!cursor._distance)\n          cursor._distance = {};\n        cursor._distance[doc._id] = dist;\n      }\n\n      // Distance couldn't parse a geometry object\n      if (dist === null)\n        return false;\n\n      return maxDistance === undefined ? true : dist <= maxDistance;\n    };\n  },\n\n  \"$maxDistance\": function () {\n    // evaluation happens in the $near operator\n    return function () { return true; }\n  }\n};\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n\n  _type: function (v) {\n    if (typeof v === \"number\")\n      return 1;\n    if (typeof v === \"string\")\n      return 2;\n    if (typeof v === \"boolean\")\n      return 8;\n    if (isArray(v))\n      return 4;\n    if (v === null)\n      return 10;\n    if (v instanceof RegExp)\n      return 11;\n    if (typeof v === \"function\")\n      // note that typeof(/x/) === \"function\"\n      return 13;\n    if (v instanceof Date)\n      return 9;\n    if (EJSON.isBinary(v))\n      return 5;\n    if (v instanceof LocalCollection._ObjectID)\n      return 7;\n    return 3; // object\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of\n  // different types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1,  // (not a type)\n            1,   // number\n            2,   // string\n            3,   // object\n            4,   // array\n            5,   // binary\n            -1,  // deprecated\n            6,   // ObjectID\n            7,   // bool\n            8,   // Date\n            0,   // null\n            9,   // RegExp\n            -1,  // deprecated\n            100, // JS code\n            2,   // deprecated (symbol)\n            100, // JS code\n            1,   // 32-bit int\n            8,   // Mongo timestamp\n            1    // 64-bit int\n           ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined)\n      return b === undefined ? 0 : -1;\n    if (b === undefined)\n      return 1;\n    var ta = LocalCollection._f._type(a);\n    var tb = LocalCollection._f._type(b);\n    var oa = LocalCollection._f._typeorder(ta);\n    var ob = LocalCollection._f._typeorder(tb);\n    if (oa !== ob)\n      return oa < ob ? -1 : 1;\n    if (ta !== tb)\n      // XXX need to implement this if we implement Symbol or integers, or\n      // Timestamp\n      throw Error(\"Missing type coercion logic in _cmp\");\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : (a === b ? 0 : 1);\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      var to_array = function (obj) {\n        var ret = [];\n        for (var key in obj) {\n          ret.push(key);\n          ret.push(obj[key]);\n        }\n        return ret;\n      };\n      return LocalCollection._f._cmp(to_array(a), to_array(b));\n    }\n    if (ta === 4) { // Array\n      for (var i = 0; ; i++) {\n        if (i === a.length)\n          return (i === b.length) ? 0 : -1;\n        if (i === b.length)\n          return 1;\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0)\n          return s;\n      }\n    }\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length)\n        return a.length - b.length;\n      for (i = 0; i < a.length; i++) {\n        if (a[i] < b[i])\n          return -1;\n        if (a[i] > b[i])\n          return 1;\n      }\n      return 0;\n    }\n    if (ta === 8) { // boolean\n      if (a) return b ? 0 : 1;\n      return b ? -1 : 0;\n    }\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error(\"Sorting not supported on regular expression\"); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error(\"Sorting not supported on Javascript code\"); // XXX\n    throw Error(\"Unknown type to sort\");\n  }\n};\n\n// For unit tests. True if the given document matches the given\n// selector.\nMinimongoTest.matches = function (selector, doc) {\n  return (LocalCollection._compileSelector(selector))(doc);\n};\n\n// _makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// values.  This array has more than one element if any segment of the key other\n// than the last one is an array.  ie, any arrays found when doing non-final\n// lookups result in this function \"branching\"; each element in the returned\n// array represents the value found at this branch. If any branch doesn't have a\n// final value for the full key, its element in the returned list will be\n// undefined. It always returns a non-empty array.\n//\n// _makeLookupFunction('a.x')({a: {x: 1}}) returns [1]\n// _makeLookupFunction('a.x')({a: {x: [1]}}) returns [[1]]\n// _makeLookupFunction('a.x')({a: 5})  returns [undefined]\n// _makeLookupFunction('a.x')({a: [{x: 1},\n//                                 {x: [2]},\n//                                 {y: 3}]})\n//   returns [1, [2], undefined]\nLocalCollection._makeLookupFunction = function (key) {\n  var dotLocation = key.indexOf('.');\n  var first, lookupRest, nextIsNumeric;\n  if (dotLocation === -1) {\n    first = key;\n  } else {\n    first = key.substr(0, dotLocation);\n    var rest = key.substr(dotLocation + 1);\n    lookupRest = LocalCollection._makeLookupFunction(rest);\n    // Is the next (perhaps final) piece numeric (ie, an array lookup?)\n    nextIsNumeric = /^\\d+(\\.|$)/.test(rest);\n  }\n\n  return function (doc) {\n    if (doc == null)  // null or undefined\n      return [undefined];\n    var firstLevel = doc[first];\n\n    // We don't \"branch\" at the final level.\n    if (!lookupRest)\n      return [firstLevel];\n\n    // It's an empty array, and we're not done: we won't find anything.\n    if (isArray(firstLevel) && firstLevel.length === 0)\n      return [undefined];\n\n    // For each result at this level, finish the lookup on the rest of the key,\n    // and return everything we find. Also, if the next result is a number,\n    // don't branch here.\n    //\n    // Technically, in MongoDB, we should be able to handle the case where\n    // objects have numeric keys, but Mongo doesn't actually handle this\n    // consistently yet itself, see eg\n    // https://jira.mongodb.org/browse/SERVER-2898\n    // https://github.com/mongodb/mongo/blob/master/jstests/array_match2.js\n    if (!isArray(firstLevel) || nextIsNumeric)\n      firstLevel = [firstLevel];\n    return Array.prototype.concat.apply([], _.map(firstLevel, lookupRest));\n  };\n};\n\n// The main compilation function for a given selector.\nvar compileDocumentSelector = function (docSelector, cursor) {\n  var perKeySelectors = [];\n  _.each(docSelector, function (subSelector, key) {\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!_.has(LOGICAL_OPERATORS, key))\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      perKeySelectors.push(\n        LOGICAL_OPERATORS[key](subSelector, docSelector, cursor));\n    } else {\n      var lookUpByIndex = LocalCollection._makeLookupFunction(key);\n      var valueSelectorFunc =\n        compileValueSelector(subSelector, docSelector, cursor);\n      perKeySelectors.push(function (doc, wholeDoc) {\n        var branchValues = lookUpByIndex(doc);\n        // We apply the selector to each \"branched\" value and return true if any\n        // match. However, for \"negative\" selectors like $ne or $not we actually\n        // require *all* elements to match.\n        //\n        // This is because {'x.tag': {$ne: \"foo\"}} applied to {x: [{tag: 'foo'},\n        // {tag: 'bar'}]} should NOT match even though there is a branch that\n        // matches. (This matches the fact that $ne uses a negated\n        // _anyIfArrayPlus, for when the last level of the key is the array,\n        // which deMorgans into an 'all'.)\n        //\n        // XXX This isn't 100% consistent with MongoDB in 'null' cases:\n        //     https://jira.mongodb.org/browse/SERVER-8585\n        // XXX this still isn't right.  consider {a: {$ne: 5, $gt: 6}}. the\n        //     $ne needs to use the \"all\" logic and the $gt needs the \"any\"\n        //     logic\n        var combiner = (subSelector &&\n                        (subSelector.$not || subSelector.$ne ||\n                         subSelector.$nin))\n              ? _.all : _.any;\n        return combiner(branchValues, function (val) {\n          return valueSelectorFunc(val, wholeDoc);\n        });\n      });\n    }\n  });\n\n\n  return function (doc, wholeDoc) {\n    // If called w/o wholeDoc, doc is considered the original by default\n    if (wholeDoc === undefined)\n      wholeDoc = doc;\n    return _.all(perKeySelectors, function (f) {\n      return f(doc, wholeDoc);\n    });\n  };\n};\n\n// Given a selector, return a function that takes one argument, a\n// document, and returns true if the document matches the selector,\n// else false.\nLocalCollection._compileSelector = function (selector, cursor) {\n  // you can pass a literal function instead of a selector\n  if (selector instanceof Function)\n    return function (doc) {return selector.call(doc);};\n\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector)) {\n    return function (doc) {\n      return EJSON.equals(doc._id, selector);\n    };\n  }\n\n  // protect against dangerous selectors.  falsey and {_id: falsey} are both\n  // likely programmer error, and not what you want, particularly for\n  // destructive operations.\n  if (!selector || (('_id' in selector) && !selector._id))\n    return function (doc) {return false;};\n\n  // Top level can't be an array or true or binary.\n  if (typeof(selector) === 'boolean' || isArray(selector) ||\n      EJSON.isBinary(selector))\n    throw new Error(\"Invalid selector: \" + selector);\n\n  return compileDocumentSelector(selector, cursor);\n};\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nLocalCollection._compileSort = function (spec, cursor) {\n  var sortSpecParts = [];\n\n  if (spec instanceof Array) {\n    for (var i = 0; i < spec.length; i++) {\n      if (typeof spec[i] === \"string\") {\n        sortSpecParts.push({\n          lookup: LocalCollection._makeLookupFunction(spec[i]),\n          ascending: true\n        });\n      } else {\n        sortSpecParts.push({\n          lookup: LocalCollection._makeLookupFunction(spec[i][0]),\n          ascending: spec[i][1] !== \"desc\"\n        });\n      }\n    }\n  } else if (typeof spec === \"object\") {\n    for (var key in spec) {\n      sortSpecParts.push({\n        lookup: LocalCollection._makeLookupFunction(key),\n        ascending: spec[key] >= 0\n      });\n    }\n  } else {\n    throw Error(\"Bad sort specification: \", JSON.stringify(spec));\n  }\n\n  // If there are no sorting rules specified, try to sort on _distance hidden\n  // fields on cursor we may acquire if query involved $near operator.\n  if (sortSpecParts.length === 0)\n    return function (a, b) {\n      if (!cursor || !cursor._distance)\n        return 0;\n      return cursor._distance[a._id] - cursor._distance[b._id];\n    };\n\n  // reduceValue takes in all the possible values for the sort key along various\n  // branches, and returns the min or max value (according to the bool\n  // findMin). Each value can itself be an array, and we look at its values\n  // too. (ie, we do a single level of flattening on branchValues, then find the\n  // min/max.)\n  var reduceValue = function (branchValues, findMin) {\n    var reduced;\n    var first = true;\n    // Iterate over all the values found in all the branches, and if a value is\n    // an array itself, iterate over the values in the array separately.\n    _.each(branchValues, function (branchValue) {\n      // Value not an array? Pretend it is.\n      if (!isArray(branchValue))\n        branchValue = [branchValue];\n      // Value is an empty array? Pretend it was missing, since that's where it\n      // should be sorted.\n      if (isArray(branchValue) && branchValue.length === 0)\n        branchValue = [undefined];\n      _.each(branchValue, function (value) {\n        // We should get here at least once: lookup functions return non-empty\n        // arrays, so the outer loop runs at least once, and we prevented\n        // branchValue from being an empty array.\n        if (first) {\n          reduced = value;\n          first = false;\n        } else {\n          // Compare the value we found to the value we found so far, saving it\n          // if it's less (for an ascending sort) or more (for a descending\n          // sort).\n          var cmp = LocalCollection._f._cmp(reduced, value);\n          if ((findMin && cmp > 0) || (!findMin && cmp < 0))\n            reduced = value;\n        }\n      });\n    });\n    return reduced;\n  };\n\n  return function (a, b) {\n    for (var i = 0; i < sortSpecParts.length; ++i) {\n      var specPart = sortSpecParts[i];\n      var aValue = reduceValue(specPart.lookup(a), specPart.ascending);\n      var bValue = reduceValue(specPart.lookup(b), specPart.ascending);\n      var compare = LocalCollection._f._cmp(aValue, bValue);\n      if (compare !== 0)\n        return specPart.ascending ? compare : -compare;\n    };\n    return 0;\n  };\n};\n\n","// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n\n  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (_.isArray(doc))\n      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });\n\n    var res = details.including ? {} : EJSON.clone(doc);\n    _.each(ruleTree, function (rule, key) {\n      if (!_.has(doc, key))\n        return;\n      if (_.isObject(rule)) {\n        // For sub-objects/subsets we branch\n        if (_.isObject(doc[key]))\n          res[key] = transform(doc[key], rule);\n        // Otherwise we don't even touch this subfield\n      } else if (details.including)\n        res[key] = EJSON.clone(doc[key]);\n      else\n        delete res[key];\n    });\n\n    return res;\n  };\n\n  return function (obj) {\n    var res = transform(obj, details.tree);\n\n    if (_idProjection && _.has(obj, '_id'))\n      res._id = obj._id;\n    if (!_idProjection && _.has(res, '_id'))\n      delete res._id;\n    return res;\n  };\n};\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nprojectionDetails = function (fields) {\n  // Find the non-_id keys (_id is handled specially because it is included unless\n  // explicitly excluded). Sort the keys, so that our code to detect overlaps\n  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = _.keys(fields).sort();\n\n  // If there are other rules other than '_id', treat '_id' differently in a\n  // separate case. If '_id' is the only rule, use it to understand if it is\n  // including/excluding projection.\n  if (fieldsKeys.length > 0 && !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id'))\n    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });\n\n  var including = null; // Unknown\n\n  _.each(fieldsKeys, function (keyPath) {\n    var rule = !!fields[keyPath];\n    if (including === null)\n      including = rule;\n    if (including !== rule)\n      // This error message is copies from MongoDB shell\n      throw MinimongoError(\"You cannot currently mix including and excluding fields.\");\n  });\n\n\n  var projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    function (path) { return including; },\n    function (node, path, fullPath) {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23 } }\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // { \"_id\" : ObjectId(\"520bfe456024608e8ef24af3\"), \"a\" : { \"b\" : 23, \"c\" : 44 } }\n      //\n      // Note, how second time the return set of keys is different.\n\n      var currentPath = fullPath;\n      var anotherPath = path;\n      throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath +\n                           \" found in fields option, using both of them may trigger \" +\n                           \"unexpected behavior. Did you mean to use only one of them?\");\n    });\n\n  return {\n    tree: projectionRulesTree,\n    including: including\n  };\n};\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\npathsToTree = function (paths, newLeafFn, conflictFn, tree) {\n  tree = tree || {};\n  _.each(paths, function (keyPath) {\n    var treePos = tree;\n    var pathArr = keyPath.split('.');\n\n    // use _.all just for iteration with break\n    var success = _.all(pathArr.slice(0, -1), function (key, idx) {\n      if (!_.has(treePos, key))\n        treePos[key] = {};\n      else if (!_.isObject(treePos[key])) {\n        treePos[key] = conflictFn(treePos[key],\n                                  pathArr.slice(0, idx + 1).join('.'),\n                                  keyPath);\n        // break out of loop if we are failing for this path\n        if (!_.isObject(treePos[key]))\n          return false;\n      }\n\n      treePos = treePos[key];\n      return true;\n    });\n\n    if (success) {\n      var lastKey = _.last(pathArr);\n      if (!_.has(treePos, lastKey))\n        treePos[lastKey] = newLeafFn(keyPath);\n      else\n        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);\n    }\n  });\n\n  return tree;\n};\n\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (!_.isObject(fields) || _.isArray(fields))\n    throw MinimongoError(\"fields option must be an object\");\n\n  _.each(fields, function (val, keyPath) {\n    if (_.contains(keyPath.split('.'), '$'))\n      throw MinimongoError(\"Minimongo doesn't support $ operator in projections yet.\");\n    if (_.indexOf([1, 0, true, false], val) === -1)\n      throw MinimongoError(\"Projection values should be one of 1, 0, true, or false\");\n  });\n};\n\n","// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// isInsert is set when _modify is being called to compute the document to\n// insert as part of an upsert operation. We use this primarily to figure out\n// when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, mod, isInsert) {\n  var is_modifier = false;\n  for (var k in mod) {\n    // IE7 doesn't support indexing into strings (eg, k[0]), so use substr.\n    // Too bad -- it's far slower:\n    // http://jsperf.com/testing-the-first-character-of-a-string\n    is_modifier = k.substr(0, 1) === '$';\n    break; // just check the first key.\n  }\n\n  var new_doc;\n\n  if (!is_modifier) {\n    if (mod._id && !EJSON.equals(doc._id, mod._id))\n      throw MinimongoError(\"Cannot change the _id of a document\");\n\n    // replace the whole document\n    for (var k in mod) {\n      if (k.substr(0, 1) === '$')\n        throw MinimongoError(\n          \"When replacing document, field name may not start with '$'\");\n      if (/\\./.test(k))\n        throw MinimongoError(\n          \"When replacing document, field name may not contain '.'\");\n    }\n    new_doc = mod;\n  } else {\n    // apply modifiers\n    var new_doc = EJSON.clone(doc);\n\n    for (var op in mod) {\n      var mod_func = LocalCollection._modifiers[op];\n      // Treat $setOnInsert as $set if this is an insert.\n      if (isInsert && op === '$setOnInsert')\n        mod_func = LocalCollection._modifiers['$set'];\n      if (!mod_func)\n        throw MinimongoError(\"Invalid modifier specified \" + op);\n      for (var keypath in mod[op]) {\n        // XXX mongo doesn't allow mod field names to end in a period,\n        // but I don't see why.. it allows '' as a key, as does JS\n        if (keypath.length && keypath[keypath.length-1] === '.')\n          throw MinimongoError(\n            \"Invalid mod field name, may not end in a period\");\n\n        var arg = mod[op][keypath];\n        var keyparts = keypath.split('.');\n        var no_create = !!LocalCollection._noCreateModifiers[op];\n        var forbid_array = (op === \"$rename\");\n        var target = LocalCollection._findModTarget(new_doc, keyparts,\n                                                    no_create, forbid_array);\n        var field = keyparts.pop();\n        mod_func(target, field, arg, keypath, new_doc);\n      }\n    }\n  }\n\n  // move new document into place.\n  _.each(_.keys(doc), function (k) {\n    // Note: this used to be for (var k in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n\n    // isInsert: if we're constructing a document to insert (via upsert)\n    // and we're in replacement mode, not modify mode, DON'T take the\n    // _id from the query.  This matches mongo's behavior.\n    if (k !== '_id' || isInsert)\n      delete doc[k];\n  });\n  for (var k in new_doc) {\n    doc[k] = new_doc[k];\n  }\n};\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object. if no_create is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// no_create is true, return undefined instead. may modify the last\n// element of keyparts to signal to the caller that it needs to use a\n// different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]). if forbid_array is true, return null if\n// the keypath goes through an array.\nLocalCollection._findModTarget = function (doc, keyparts, no_create,\n                                      forbid_array) {\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = (i === keyparts.length - 1);\n    var keypart = keyparts[i];\n    var numeric = /^[0-9]+$/.test(keypart);\n    if (no_create && (!(typeof doc === \"object\") || !(keypart in doc)))\n      return undefined;\n    if (doc instanceof Array) {\n      if (forbid_array)\n        return null;\n      if (!numeric)\n        throw MinimongoError(\n          \"can't append to array using string field name [\"\n                    + keypart + \"]\");\n      keypart = parseInt(keypart);\n      if (last)\n        // handle 'a.01'\n        keyparts[i] = keypart;\n      while (doc.length < keypart)\n        doc.push(null);\n      if (!last) {\n        if (doc.length === keypart)\n          doc.push({});\n        else if (typeof doc[keypart] !== \"object\")\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] +\n                      \"' of list value \" + JSON.stringify(doc[keypart]));\n      }\n    } else {\n      // XXX check valid fieldname (no $ at start, no .)\n      if (!last && !(keypart in doc))\n        doc[keypart] = {};\n    }\n\n    if (last)\n      return doc;\n    doc = doc[keypart];\n  }\n\n  // notreached\n};\n\nLocalCollection._noCreateModifiers = {\n  $unset: true,\n  $pop: true,\n  $rename: true,\n  $pull: true,\n  $pullAll: true\n};\n\nLocalCollection._modifiers = {\n  $inc: function (target, field, arg) {\n    if (typeof arg !== \"number\")\n      throw MinimongoError(\"Modifier $inc allowed for numbers only\");\n    if (field in target) {\n      if (typeof target[field] !== \"number\")\n        throw MinimongoError(\"Cannot apply $inc modifier to non-number\");\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set: function (target, field, arg) {\n    if (!_.isObject(target)) { // not an array or an object\n      var e = MinimongoError(\"Cannot set property on non-object field\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (target === null) {\n      var e = MinimongoError(\"Cannot set property on null\");\n      e.setPropertyError = true;\n      throw e;\n    }\n    if (field === '_id' && !EJSON.equals(arg, target._id))\n      throw MinimongoError(\"Cannot change the _id of a document\");\n\n    target[field] = EJSON.clone(arg);\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target)\n          target[field] = null;\n      } else\n        delete target[field];\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined)\n      target[field] = [];\n    if (!(target[field] instanceof Array))\n      throw MinimongoError(\"Cannot apply $push modifier to non-array\");\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      target[field].push(EJSON.clone(arg));\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array))\n      throw MinimongoError(\"$each must be an array\");\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== \"number\")\n        throw MinimongoError(\"$slice must be a numeric value\");\n      // XXX should check to make sure integer\n      if (arg.$slice > 0)\n        throw MinimongoError(\"$slice in $push must be zero or negative\");\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined)\n        throw MinimongoError(\"$sort requires $slice to be present\");\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      sortFunction = LocalCollection._compileSort(arg.$sort);\n      for (var i = 0; i < toPush.length; i++) {\n        if (LocalCollection._f._type(toPush[i]) !== 3) {\n          throw MinimongoError(\"$push like modifiers using $sort \" +\n                      \"require all elements to be objects\");\n        }\n      }\n    }\n\n    // Actually push.\n    for (var j = 0; j < toPush.length; j++)\n      target[field].push(EJSON.clone(toPush[j]));\n\n    // Actually sort.\n    if (sortFunction)\n      target[field].sort(sortFunction);\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0)\n        target[field] = [];  // differs from Array.slice!\n      else\n        target[field] = target[field].slice(slice);\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    var x = target[field];\n    if (x === undefined)\n      target[field] = arg;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pushAll modifier to non-array\");\n    else {\n      for (var i = 0; i < arg.length; i++)\n        x.push(arg[i]);\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var x = target[field];\n    if (x === undefined)\n      target[field] = [arg];\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $addToSet modifier to non-array\");\n    else {\n      var isEach = false;\n      if (typeof arg === \"object\") {\n        for (var k in arg) {\n          if (k === \"$each\")\n            isEach = true;\n          break;\n        }\n      }\n      var values = isEach ? arg[\"$each\"] : [arg];\n      _.each(values, function (value) {\n        for (var i = 0; i < x.length; i++)\n          if (LocalCollection._f._equal(value, x[i]))\n            return;\n        x.push(EJSON.clone(value));\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pop modifier to non-array\");\n    else {\n      if (typeof arg === 'number' && arg < 0)\n        x.splice(0, 1);\n      else\n        x.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = []\n      if (typeof arg === \"object\" && !(arg instanceof Array)) {\n        // XXX would be much nicer to compile this once, rather than\n        // for each document we modify.. but usually we're not\n        // modifying that many documents, so we'll let it slide for\n        // now\n\n        // XXX _compileSelector isn't up for the job, because we need\n        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n        // like {$gt: 4} is not normally a complete selector.\n        // same issue as $elemMatch possibly?\n        var match = LocalCollection._compileSelector(arg);\n        for (var i = 0; i < x.length; i++)\n          if (!match(x[i]))\n            out.push(x[i])\n      } else {\n        for (var i = 0; i < x.length; i++)\n          if (!LocalCollection._f._equal(x[i], arg))\n            out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(typeof arg === \"object\" && arg instanceof Array))\n      throw MinimongoError(\"Modifier $pushAll/pullAll allowed for arrays only\");\n    if (target === undefined)\n      return;\n    var x = target[field];\n    if (x === undefined)\n      return;\n    else if (!(x instanceof Array))\n      throw MinimongoError(\"Cannot apply $pull/pullAll modifier to non-array\");\n    else {\n      var out = []\n      for (var i = 0; i < x.length; i++) {\n        var exclude = false;\n        for (var j = 0; j < arg.length; j++) {\n          if (LocalCollection._f._equal(x[i], arg[j])) {\n            exclude = true;\n            break;\n          }\n        }\n        if (!exclude)\n          out.push(x[i]);\n      }\n      target[field] = out;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    if (keypath === arg)\n      // no idea why mongo has this restriction..\n      throw MinimongoError(\"$rename source must differ from target\");\n    if (target === null)\n      throw MinimongoError(\"$rename source field invalid\");\n    if (typeof arg !== \"string\")\n      throw MinimongoError(\"$rename target must be a string\");\n    if (target === undefined)\n      return;\n    var v = target[field];\n    delete target[field];\n\n    var keyparts = arg.split('.');\n    var target2 = LocalCollection._findModTarget(doc, keyparts, false, true);\n    if (target2 === null)\n      throw MinimongoError(\"$rename target field invalid\");\n    var field2 = keyparts.pop();\n    target2[field2] = v;\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError(\"$bit is not supported\");\n  }\n};\n\nLocalCollection._removeDollarOperators = function (selector) {\n  var selectorDoc = {};\n  for (var k in selector)\n    if (k.substr(0, 1) !== '$')\n      selectorDoc[k] = selector[k];\n  return selectorDoc;\n};\n\n","\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are maps {_id: doc}.\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults,\n                                       observer) {\n  if (ordered)\n    LocalCollection._diffQueryOrderedChanges(\n      oldResults, newResults, observer);\n  else\n    LocalCollection._diffQueryUnorderedChanges(\n      oldResults, newResults, observer);\n};\n\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults,\n                                                observer) {\n  if (observer.movedBefore) {\n    throw new Error(\"_diffQueryUnordered called with a movedBefore observer!\");\n  }\n\n  _.each(newResults, function (newDoc) {\n    if (_.has(oldResults, newDoc._id)) {\n      var oldDoc = oldResults[newDoc._id];\n      if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {\n        observer.changed(newDoc._id, LocalCollection._makeChangedFields(newDoc, oldDoc));\n      }\n    } else {\n      var fields = EJSON.clone(newDoc);\n      delete fields._id;\n      observer.added && observer.added(newDoc._id, fields);\n    }\n  });\n\n  if (observer.removed) {\n    _.each(oldResults, function (oldDoc) {\n      if (!_.has(newResults, oldDoc._id))\n        observer.removed(oldDoc._id);\n    });\n  }\n};\n\n\nLocalCollection._diffQueryOrderedChanges = function (old_results, new_results, observer) {\n\n  var new_presence_of_id = {};\n  _.each(new_results, function (doc) {\n    if (new_presence_of_id[doc._id])\n      Meteor._debug(\"Duplicate _id in new_results\");\n    new_presence_of_id[doc._id] = true;\n  });\n\n  var old_index_of_id = {};\n  _.each(old_results, function (doc, i) {\n    if (doc._id in old_index_of_id)\n      Meteor._debug(\"Duplicate _id in old_results\");\n    old_index_of_id[doc._id] = i;\n  });\n\n  // ALGORITHM:\n  //\n  // To determine which docs should be considered \"moved\" (and which\n  // merely change position because of other docs moving) we run\n  // a \"longest common subsequence\" (LCS) algorithm.  The LCS of the\n  // old doc IDs and the new doc IDs gives the docs that should NOT be\n  // considered moved.\n\n  // To actually call the appropriate callbacks to get from the old state to the\n  // new state:\n\n  // First, we call removed() on all the items that only appear in the old\n  // state.\n\n  // Then, once we have the items that should not move, we walk through the new\n  // results array group-by-group, where a \"group\" is a set of items that have\n  // moved, anchored on the end by an item that should not move.  One by one, we\n  // move each of those elements into place \"before\" the anchoring end-of-group\n  // item, and fire changed events on them if necessary.  Then we fire a changed\n  // event on the anchor, and move on to the next group.  There is always at\n  // least one group; the last group is anchored by a virtual \"null\" id at the\n  // end.\n\n  // Asymptotically: O(N k) where k is number of ops, or potentially\n  // O(N log N) if inner loop of LCS were made to be binary search.\n\n\n  //////// LCS (longest common sequence, with respect to _id)\n  // (see Wikipedia article on Longest Increasing Subsequence,\n  // where the LIS is taken of the sequence of old indices of the\n  // docs in new_results)\n  //\n  // unmoved: the output of the algorithm; members of the LCS,\n  // in the form of indices into new_results\n  var unmoved = [];\n  // max_seq_len: length of LCS found so far\n  var max_seq_len = 0;\n  // seq_ends[i]: the index into new_results of the last doc in a\n  // common subsequence of length of i+1 <= max_seq_len\n  var N = new_results.length;\n  var seq_ends = new Array(N);\n  // ptrs:  the common subsequence ending with new_results[n] extends\n  // a common subsequence ending with new_results[ptr[n]], unless\n  // ptr[n] is -1.\n  var ptrs = new Array(N);\n  // virtual sequence of old indices of new results\n  var old_idx_seq = function(i_new) {\n    return old_index_of_id[new_results[i_new]._id];\n  };\n  // for each item in new_results, use it to extend a common subsequence\n  // of length j <= max_seq_len\n  for(var i=0; i<N; i++) {\n    if (old_index_of_id[new_results[i]._id] !== undefined) {\n      var j = max_seq_len;\n      // this inner loop would traditionally be a binary search,\n      // but scanning backwards we will likely find a subseq to extend\n      // pretty soon, bounded for example by the total number of ops.\n      // If this were to be changed to a binary search, we'd still want\n      // to scan backwards a bit as an optimization.\n      while (j > 0) {\n        if (old_idx_seq(seq_ends[j-1]) < old_idx_seq(i))\n          break;\n        j--;\n      }\n\n      ptrs[i] = (j === 0 ? -1 : seq_ends[j-1]);\n      seq_ends[j] = i;\n      if (j+1 > max_seq_len)\n        max_seq_len = j+1;\n    }\n  }\n\n  // pull out the LCS/LIS into unmoved\n  var idx = (max_seq_len === 0 ? -1 : seq_ends[max_seq_len-1]);\n  while (idx >= 0) {\n    unmoved.push(idx);\n    idx = ptrs[idx];\n  }\n  // the unmoved item list is built backwards, so fix that\n  unmoved.reverse();\n\n  // the last group is always anchored by the end of the result list, which is\n  // an id of \"null\"\n  unmoved.push(new_results.length);\n\n  _.each(old_results, function (doc) {\n    if (!new_presence_of_id[doc._id])\n      observer.removed && observer.removed(doc._id);\n  });\n  // for each group of things in the new_results that is anchored by an unmoved\n  // element, iterate through the things before it.\n  var startOfGroup = 0;\n  _.each(unmoved, function (endOfGroup) {\n    var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;\n    var oldDoc;\n    var newDoc;\n    var fields;\n    for (var i = startOfGroup; i < endOfGroup; i++) {\n      newDoc = new_results[i];\n      if (!_.has(old_index_of_id, newDoc._id)) {\n        fields = EJSON.clone(newDoc);\n        delete fields._id;\n        observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);\n        observer.added && observer.added(newDoc._id, fields);\n      } else {\n        // moved\n        oldDoc = old_results[old_index_of_id[newDoc._id]];\n        fields = LocalCollection._makeChangedFields(newDoc, oldDoc);\n        if (!_.isEmpty(fields)) {\n          observer.changed && observer.changed(newDoc._id, fields);\n        }\n        observer.movedBefore && observer.movedBefore(newDoc._id, groupId);\n      }\n    }\n    if (groupId) {\n      newDoc = new_results[endOfGroup];\n      oldDoc = old_results[old_index_of_id[newDoc._id]];\n      fields = LocalCollection._makeChangedFields(newDoc, oldDoc);\n      if (!_.isEmpty(fields)) {\n        observer.changed && observer.changed(newDoc._id, fields);\n      }\n    }\n    startOfGroup = endOfGroup+1;\n  });\n\n\n};\n\n\n// General helper for diff-ing two objects.\n// callbacks is an object like so:\n// { leftOnly: function (key, leftValue) {...},\n//   rightOnly: function (key, rightValue) {...},\n//   both: function (key, leftValue, rightValue) {...},\n// }\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  _.each(left, function (leftValue, key) {\n    if (_.has(right, key))\n      callbacks.both && callbacks.both(key, leftValue, right[key]);\n    else\n      callbacks.leftOnly && callbacks.leftOnly(key, leftValue);\n  });\n  if (callbacks.rightOnly) {\n    _.each(right, function(rightValue, key) {\n      if (!_.has(left, key))\n        callbacks.rightOnly(key, rightValue);\n    });\n  }\n};\n","LocalCollection._IdMap = function () {\n  var self = this;\n  self._map = {};\n};\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n_.extend(LocalCollection._IdMap.prototype, {\n  get: function (id) {\n    var self = this;\n    var key = LocalCollection._idStringify(id);\n    return self._map[key];\n  },\n  set: function (id, value) {\n    var self = this;\n    var key = LocalCollection._idStringify(id);\n    self._map[key] = value;\n  },\n  remove: function (id) {\n    var self = this;\n    var key = LocalCollection._idStringify(id);\n    delete self._map[key];\n  },\n  has: function (id) {\n    var self = this;\n    var key = LocalCollection._idStringify(id);\n    return _.has(self._map, key);\n  },\n  empty: function () {\n    var self = this;\n    return _.isEmpty(self._map);\n  },\n  clear: function () {\n    var self = this;\n    self._map = {};\n  },\n  forEach: function (iterator) {\n    var self = this;\n    _.each(self._map, function (value, key, obj) {\n      var context = this;\n      iterator.call(context, value, LocalCollection._idParse(key), obj);\n    });\n  },\n  // XXX used?\n  setDefault: function (id, def) {\n    var self = this;\n    var key = LocalCollection._idStringify(id);\n    if (_.has(self._map, key))\n      return self._map[key];\n    self._map[key] = def;\n    return def;\n  }\n});\n","// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in self.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function (options) {\n  var self = this;\n  options = options || {};\n\n  var orderedFromCallbacks = options.callbacks &&\n        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n  if (_.has(options, 'ordered')) {\n    self.ordered = options.ordered;\n    if (options.callbacks && options.ordered !== orderedFromCallbacks)\n      throw Error(\"ordered option doesn't match callbacks\");\n  } else if (options.callbacks) {\n    self.ordered = orderedFromCallbacks;\n  } else {\n    throw Error(\"must provide ordered or callbacks\");\n  }\n  var callbacks = options.callbacks || {};\n\n  if (self.ordered) {\n    self.docs = new OrderedDict(LocalCollection._idStringify);\n    self.applyChange = {\n      addedBefore: function (id, fields, before) {\n        var doc = EJSON.clone(fields);\n        doc._id = id;\n        callbacks.addedBefore && callbacks.addedBefore.call(\n          self, id, fields, before);\n        // This line triggers if we provide added with movedBefore.\n        callbacks.added && callbacks.added.call(self, id, fields);\n        // XXX could `before` be a falsy ID?  Technically\n        // idStringify seems to allow for them -- though\n        // OrderedDict won't call stringify on a falsy arg.\n        self.docs.putBefore(id, doc, before || null);\n      },\n      movedBefore: function (id, before) {\n        var doc = self.docs.get(id);\n        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);\n        self.docs.moveBefore(id, before || null);\n      }\n    };\n  } else {\n    self.docs = new LocalCollection._IdMap;\n    self.applyChange = {\n      added: function (id, fields) {\n        var doc = EJSON.clone(fields);\n        callbacks.added && callbacks.added.call(self, id, fields);\n        doc._id = id;\n        self.docs.set(id,  doc);\n      }\n    };\n  }\n\n  // The methods in _IdMap and OrderedDict used by these callbacks are\n  // identical.\n  self.applyChange.changed = function (id, fields) {\n    var doc = self.docs.get(id);\n    if (!doc)\n      throw new Error(\"Unknown id for changed: \" + id);\n    callbacks.changed && callbacks.changed.call(\n      self, id, EJSON.clone(fields));\n    LocalCollection._applyChanges(doc, fields);\n  };\n  self.applyChange.removed = function (id) {\n    callbacks.removed && callbacks.removed.call(self, id);\n    self.docs.remove(id);\n  };\n};\n\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {return doc;};\n  var suppressed = !!observeCallbacks._suppress_initial;\n\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        var self = this;\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))\n          return;\n        var doc = transform(_.extend(fields, {_id: id}));\n        if (observeCallbacks.addedAt) {\n          var index = indices\n                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n          observeCallbacks.addedAt(doc, index, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed))\n          return;\n        var doc = EJSON.clone(self.docs.get(id));\n        if (!doc)\n          throw new Error(\"Unknown id for changed: \" + id);\n        var oldDoc = transform(EJSON.clone(doc));\n        LocalCollection._applyChanges(doc, fields);\n        doc = transform(doc);\n        if (observeCallbacks.changedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.changedAt(doc, oldDoc, index);\n        } else {\n          observeCallbacks.changed(doc, oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        var self = this;\n        if (!observeCallbacks.movedTo)\n          return;\n        var from = indices ? self.docs.indexOf(id) : -1;\n\n        var to = indices\n              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from)\n          --to;\n        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),\n                                 from, to, before || null);\n      },\n      removed: function (id) {\n        var self = this;\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed))\n          return;\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from self.docs!\n        var doc = transform(self.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          var index = indices ? self.docs.indexOf(id) : -1;\n          observeCallbacks.removedAt(doc, index);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          var doc = _.extend(fields, {_id:  id});\n          observeCallbacks.added(transform(doc));\n        }\n      },\n      changed: function (id, fields) {\n        var self = this;\n        if (observeCallbacks.changed) {\n          var oldDoc = self.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          LocalCollection._applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc), transform(oldDoc));\n        }\n      },\n      removed: function (id) {\n        var self = this;\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(self.docs.get(id)));\n        }\n      }\n    };\n  }\n\n  var changeObserver = new LocalCollection._CachingChangeObserver(\n    {callbacks: observeChangesCallbacks});\n  var handle = cursor.observeChanges(changeObserver.applyChange);\n  suppressed = false;\n  return handle;\n};\n","LocalCollection._looksLikeObjectID = function (str) {\n  return str.length === 24 && str.match(/^[0-9a-f]*$/);\n};\n\nLocalCollection._ObjectID = function (hexString) {\n  //random-based impl of Mongo ObjectID\n  var self = this;\n  if (hexString) {\n    hexString = hexString.toLowerCase();\n    if (!LocalCollection._looksLikeObjectID(hexString)) {\n      throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");\n    }\n    // meant to work with _.isEqual(), which relies on structural equality\n    self._str = hexString;\n  } else {\n    self._str = Random.hexString(24);\n  }\n};\n\nLocalCollection._ObjectID.prototype.toString = function () {\n  var self = this;\n  return \"ObjectID(\\\"\" + self._str + \"\\\")\";\n};\n\nLocalCollection._ObjectID.prototype.equals = function (other) {\n  var self = this;\n  return other instanceof LocalCollection._ObjectID &&\n    self.valueOf() === other.valueOf();\n};\n\nLocalCollection._ObjectID.prototype.clone = function () {\n  var self = this;\n  return new LocalCollection._ObjectID(self._str);\n};\n\nLocalCollection._ObjectID.prototype.typeName = function() {\n  return \"oid\";\n};\n\nLocalCollection._ObjectID.prototype.getTimestamp = function() {\n  var self = this;\n  return parseInt(self._str.substr(0, 8), 16);\n};\n\nLocalCollection._ObjectID.prototype.valueOf =\n    LocalCollection._ObjectID.prototype.toJSONValue =\n    LocalCollection._ObjectID.prototype.toHexString =\n    function () { return this._str; };\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return (typeof selector === \"string\") ||\n    (typeof selector === \"number\") ||\n    selector instanceof LocalCollection._ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) ||\n    (selector && typeof selector === \"object\" &&\n     selector._id && LocalCollection._selectorIsId(selector._id) &&\n     _.size(selector) === 1);\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector))\n    return [selector];\n  if (!selector)\n    return null;\n\n  // Do we have an _id clause?\n  if (_.has(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id))\n      return [selector._id];\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && selector._id.$in\n        && _.isArray(selector._id.$in)\n        && !_.isEmpty(selector._id.$in)\n        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (selector.$and && _.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds)\n        return subIds;\n    }\n  }\n\n  return null;\n};\n\nEJSON.addType(\"oid\",  function (str) {\n  return new LocalCollection._ObjectID(str);\n});\n","// Knows how to combine a mongo selector and a fields projection to a new fields\n// projection taking into account active fields from the passed selector.\n// @returns Object - projection object (same as fields option of mongo cursor)\nLocalCollection._combineSelectorAndProjection = function (selector, projection)\n{\n  var selectorPaths = getPathsWithoutNumericKeys(selector);\n\n  // Special case for $where operator in the selector - projection should depend\n  // on all fields of the document. getSelectorPaths returns a list of paths\n  // selector depends on. If one of the paths is '' (empty string) representing\n  // the root or the whole document, complete projection should be returned.\n  if (_.contains(selectorPaths, ''))\n    return {};\n\n  var prjDetails = projectionDetails(projection);\n  var tree = prjDetails.tree;\n  var mergedProjection = {};\n\n  // merge the paths to include\n  tree = pathsToTree(selectorPaths,\n                     function (path) { return true; },\n                     function (node, path, fullPath) { return true; },\n                     tree);\n  mergedProjection = treeToPaths(tree);\n  if (prjDetails.including) {\n    // both selector and projection are pointing on fields to include\n    // so we can just return the merged tree\n    return mergedProjection;\n  } else {\n    // selector is pointing at fields to include\n    // projection is pointing at fields to exclude\n    // make sure we don't exclude important paths\n    var mergedExclProjection = {};\n    _.each(mergedProjection, function (incl, path) {\n      if (!incl)\n        mergedExclProjection[path] = false;\n    });\n\n    return mergedExclProjection;\n  }\n};\n\n// Returns a set of key paths similar to\n// { 'foo.bar': 1, 'a.b.c': 1 }\nvar treeToPaths = function (tree, prefix) {\n  prefix = prefix || '';\n  var result = {};\n\n  _.each(tree, function (val, key) {\n    if (_.isObject(val))\n      _.extend(result, treeToPaths(val, prefix + key + '.'));\n    else\n      result[prefix + key] = val;\n  });\n\n  return result;\n};\n\n","// Returns true if the modifier applied to some document may change the result\n// of matching the document by selector\n// The modifier is always in a form of Object:\n//  - $set\n//    - 'a.b.22.z': value\n//    - 'foo.bar': 42\n//  - $unset\n//    - 'abc.d': 1\nLocalCollection._isSelectorAffectedByModifier = function (selector, modifier) {\n  // safe check for $set/$unset being objects\n  modifier = _.extend({ $set: {}, $unset: {} }, modifier);\n  var modifiedPaths = _.keys(modifier.$set).concat(_.keys(modifier.$unset));\n  var meaningfulPaths = getPaths(selector);\n\n  return _.any(modifiedPaths, function (path) {\n    var mod = path.split('.');\n    return _.any(meaningfulPaths, function (meaningfulPath) {\n      var sel = meaningfulPath.split('.');\n      var i = 0, j = 0;\n\n      while (i < sel.length && j < mod.length) {\n        if (numericKey(sel[i]) && numericKey(mod[j])) {\n          // foo.4.bar selector affected by foo.4 modifier\n          // foo.3.bar selector unaffected by foo.4 modifier\n          if (sel[i] === mod[j])\n            i++, j++;\n          else\n            return false;\n        } else if (numericKey(sel[i])) {\n          // foo.4.bar selector unaffected by foo.bar modifier\n          return false;\n        } else if (numericKey(mod[j])) {\n          j++;\n        } else if (sel[i] === mod[j])\n          i++, j++;\n        else\n          return false;\n      }\n\n      // One is a prefix of another, taking numeric fields into account\n      return true;\n    });\n  });\n};\n\ngetPathsWithoutNumericKeys = function (sel) {\n  return _.map(getPaths(sel), function (path) {\n    return _.reject(path.split('.'), numericKey).join('.');\n  });\n};\n\n// @param selector - Object: MongoDB selector. Currently doesn't support\n//                           $-operators and arrays well.\n// @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`\n//                           only. (assumed to come from oplog)\n// @returns - Boolean: if after applying the modifier, selector can start\n//                     accepting the modified value.\nLocalCollection._canSelectorBecomeTrueByModifier = function (selector, modifier)\n{\n  if (!LocalCollection._isSelectorAffectedByModifier(selector, modifier))\n    return false;\n\n  modifier = _.extend({$set:{}, $unset:{}}, modifier);\n\n  if (_.any(_.keys(selector), pathHasNumericKeys) ||\n      _.any(_.keys(modifier.$unset), pathHasNumericKeys) ||\n      _.any(_.keys(modifier.$set), pathHasNumericKeys))\n    return true;\n\n  if (!isLiteralSelector(selector))\n    return true;\n\n  // convert a selector into an object matching the selector\n  // { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }\n  // => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }\n  var doc = pathsToTree(_.keys(selector),\n                        function (path) { return selector[path]; },\n                        _.identity /*conflict resolution is no resolution*/);\n\n  var selectorFn = LocalCollection._compileSelector(selector);\n\n  try {\n    LocalCollection._modify(doc, modifier);\n  } catch (e) {\n    // Couldn't set a property on a field which is a scalar or null in the\n    // selector.\n    // Example:\n    // real document: { 'a.b': 3 }\n    // selector: { 'a': 12 }\n    // converted selector (ideal document): { 'a': 12 }\n    // modifier: { $set: { 'a.b': 4 } }\n    // We don't know what real document was like but from the error raised by\n    // $set on a scalar field we can reason that the structure of real document\n    // is completely different.\n    if (e.name === \"MinimongoError\" && e.setPropertyError)\n      return false;\n    throw e;\n  }\n\n  return selectorFn(doc);\n};\n\n// Returns a list of key paths the given selector is looking for\nvar getPaths = MinimongoTest.getSelectorPaths = function (sel) {\n  return _.chain(sel).map(function (v, k) {\n    // we don't know how to handle $where because it can be anything\n    if (k === \"$where\")\n      return ''; // matches everything\n    // we branch from $or/$and/$nor operator\n    if (_.contains(['$or', '$and', '$nor'], k))\n      return _.map(v, getPaths);\n    // the value is a literal or some comparison operator\n    return k;\n  }).flatten().uniq().value();\n};\n\nfunction pathHasNumericKeys (path) {\n  return _.any(path.split('.'), numericKey);\n}\n\n// string can be converted to integer\nfunction numericKey (s) {\n  return /^[0-9]+$/.test(s);\n}\n\nfunction isLiteralSelector (selector) {\n  return _.all(selector, function (subSelector, keyPath) {\n    if (keyPath.substr(0, 1) === \"$\" || _.isRegExp(subSelector))\n      return false;\n    if (!_.isObject(subSelector) || _.isArray(subSelector))\n      return true;\n    return _.all(subSelector, function (value, key) {\n      return key.substr(0, 1) !== \"$\";\n    });\n  });\n}\n\n"]}